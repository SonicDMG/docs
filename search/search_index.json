{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Your Wiki to implement Awesome Applications with Astra Welcome to the Awesome Astra wiki! As the name stated it is an attempt to gather all information regarding Astra usage in a single place to help you in the development of your applications. It is a community and collaborative effort, if you have some inputs or correction please do so.","title":"\ud83c\udfe0 Home"},{"location":"cheatsheet/","text":"CheatSheet \u00b6 Mermaid \u00b6 graph LR user>fa:fa-user Developer]-- Create Database --> cassandra[(fa:fa-database Cassandra)] user-- Design -->usecase{{fa:fa-cube Use Case}} usecase-- Workflow -->queries[fa:fa-bezier-curve queries] usecase-- MCD -->entities[fa:fa-grip-vertical entities] queries-- Chebotko modelization -->schema[fa:fa-list schema] entities-- Chebotko modelization -->schema[fa:fa-list schema] schema[fa:fa-list schema]-- Inject -->cassandra[(fa:fa-database Cassandra)] user-- prepare -->dataset{{fa:fa-coings DataSet}} dataset-- input -->dsbulk-- load data -->cassandra user-- Create Token -->token{{fa:fa-key Token}} usecase-->API API-->Request token-->Request schema-->Request Request-- invoke -->cassandra Font Awesome \u00b6 fa-lg","title":"Cheatsheet"},{"location":"cheatsheet/#cheatsheet","text":"","title":"CheatSheet"},{"location":"cheatsheet/#mermaid","text":"graph LR user>fa:fa-user Developer]-- Create Database --> cassandra[(fa:fa-database Cassandra)] user-- Design -->usecase{{fa:fa-cube Use Case}} usecase-- Workflow -->queries[fa:fa-bezier-curve queries] usecase-- MCD -->entities[fa:fa-grip-vertical entities] queries-- Chebotko modelization -->schema[fa:fa-list schema] entities-- Chebotko modelization -->schema[fa:fa-list schema] schema[fa:fa-list schema]-- Inject -->cassandra[(fa:fa-database Cassandra)] user-- prepare -->dataset{{fa:fa-coings DataSet}} dataset-- input -->dsbulk-- load data -->cassandra user-- Create Token -->token{{fa:fa-key Token}} usecase-->API API-->Request token-->Request schema-->Request Request-- invoke -->cassandra","title":"Mermaid"},{"location":"cheatsheet/#font-awesome","text":"fa-lg","title":"Font Awesome"},{"location":"todo/","text":"This page has not been written yet or the content has not be backported from previous location","title":"\u2022 Temporal"},{"location":"pages/astra/cqlproxy/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Github Repository - Reference Documentation A - Overview \u00b6 \ud83d\udcd8 What is cql-proxy ? \u00b6 cql-proxy is designed to forward your application's CQL traffic to an appropriate database service. It listens on a local address and securely forwards that traffic. Note : cql-proxy was made as a genrally available release on 2/16/2022 . See this blog for additional details. Please give it a try and let us know what you think! \ud83d\udcd8 When to use cql-proxy \u00b6 The cql-proxy sidecar enables unsupported CQL drivers to work with DataStax Astra . These drivers include both legacy DataStax drivers and community-maintained CQL drivers, such as the gocql driver and the rust-driver . cql-proxy also enables applications that are currently using Apache Cassandra or DataStax Enterprise (DSE) to use Astra without requiring any code changes. Your application just needs to be configured to use the proxy. If you're building a new application using DataStax drivers , cql-proxy is not required, as the drivers can communicate directly with Astra. DataStax drivers have excellent support for Astra out-of-the-box, and are well-documented in the driver-guide guide. B - Configuration \u00b6 Use the -h or --help flag to display a listing all flags and their corresponding descriptions and environment variables (shown below as items starting with $ ): $ ./cql-proxy -h Usage: cql-proxy Flags: -h, --help Show context-sensitive help. -b, --bundle = STRING Path to secure connect bundle ( $BUNDLE ) -u, --username = STRING Username to use for authentication ( $USERNAME ) -p, --password = STRING Password to use for authentication ( $PASSWORD ) -c, --contact-points = CONTACT-POINTS,... Contact points for cluster. Ignored if using the bundle path option ( $CONTACT_POINTS ) . -a, --bind = STRING Address to use to bind serve ( $BIND ) --debug Show debug logging ( $DEBUG ) --profiling Enable profiling ( $PROFILING ) To pass configuration to cql-proxy , either command-line flags or environment variables can be used. Using the docker method as an example, the follwing samples show how username, password and bundle are defined with each method. \ud83d\udcd8 Using flags \u00b6 docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042 :9042 \\ --rm datastax/cql-proxy:v0.0.4 \\ --bundle /tmp/scb.zip --username <astra-client-id> --password <astra-client-secret> \ud83d\udcd8 Using environment variables \u00b6 docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042 :9042 \\ --rm datastax/cql-proxy:v0.0.4 \\ -e BUNDLE = /tmp/scb.zip -e USERNAME = <astra-client-id> -e PASSWORD = <astra-client-secret> C - Getting started \u00b6 There are three methods for using cql-proxy : Locally build and run cql-proxy Run a docker image that has cql-proxy installed Use a Kubernetes container to run cql-proxy \u2705 Locally build and run \u00b6 Build cql-proxy . go build Run with your desired database. DataStax Astra cluster: ./cql-proxy --bundle <your-secure-connect-zip> \\ --username <astra-client-id> --password <astra-client-secret> Apache Cassandra cluster: ./cql-proxy --contact-points <cluster node IPs or DNS names> \u2705 Run a docker image \u00b6 Run with your desired database. DataStax Astra cluster: docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042 :9042 \\ datastax/cql-proxy:v0.0.4 \\ --bundle /tmp/scb.zip --username <astra-client-id> --password <astra-client-secret> The <astra-client-id> and <astra-client-secret> can be generated using these instructions . Apache Cassandra cluster: docker run -p 9042 :9042 \\ datastax/cql-proxy:v0.0.4 \\ --contact-points <cluster node IPs or DNS names> If you wish to have the docker image removed after you are done with it, add --rm before the image name datastax/cql-proxy:v0.0.4 . \u2705 Use Kubernetes \u00b6 Using Kubernetes with cql-proxy requires a number of steps: Generate a token following the Astra instructions . This step will display your Client ID, Client Secret, and Token; make sure you download the information for the next steps. Store the secure bundle in /tmp/scb.zip to match the example below. Create cql-proxy.yaml . You'll need to add three sets of information: arguments, volume mounts, and volumes. Argument: Modify the local bundle location, username and password, using the client ID and client secret obtained in the last step to the container argument. command: [\"./cql-proxy\"] args: [\"--bundle=/tmp/scb.zip\",\"--username=Client ID\",\"--password=Client Secret\"] Volume mounts: Modify /tmp/ as a volume mount as required. volumeMounts: - name: my-cm-vol mountPath: /tmp/ Volume: Modify the configMap filename as required. In this example, it is named cql-proxy-configmap . Use the same name for the volumes that you used for the volumeMounts . volumes: - name: my-cm-vol configMap: name: cql-proxy-configmap Create a configmap. Use the same secure bundle that was specified in the cql-proxy.yaml . kubectl create configmap cql-proxy-configmap --from-file /tmp/scb.zip Check the configmap that was created. kubectl describe configmap config Name: config Namespace: default Labels: <none> Annotations: <none> Data ==== BinaryData ==== scb.zip: 12311 bytes Create a Kubernetes deployment with the YAML file you created: kubectl create -f cql-proxy.yaml Check the logs: kubectl logs <deployment-name>","title":"\u2023 CQL Proxy"},{"location":"pages/astra/cqlproxy/#a-overview","text":"","title":"A - Overview"},{"location":"pages/astra/cqlproxy/#what-is-cql-proxy","text":"cql-proxy is designed to forward your application's CQL traffic to an appropriate database service. It listens on a local address and securely forwards that traffic. Note : cql-proxy was made as a genrally available release on 2/16/2022 . See this blog for additional details. Please give it a try and let us know what you think!","title":"\ud83d\udcd8 What is cql-proxy?"},{"location":"pages/astra/cqlproxy/#when-to-use-cql-proxy","text":"The cql-proxy sidecar enables unsupported CQL drivers to work with DataStax Astra . These drivers include both legacy DataStax drivers and community-maintained CQL drivers, such as the gocql driver and the rust-driver . cql-proxy also enables applications that are currently using Apache Cassandra or DataStax Enterprise (DSE) to use Astra without requiring any code changes. Your application just needs to be configured to use the proxy. If you're building a new application using DataStax drivers , cql-proxy is not required, as the drivers can communicate directly with Astra. DataStax drivers have excellent support for Astra out-of-the-box, and are well-documented in the driver-guide guide.","title":"\ud83d\udcd8 When to use cql-proxy"},{"location":"pages/astra/cqlproxy/#b-configuration","text":"Use the -h or --help flag to display a listing all flags and their corresponding descriptions and environment variables (shown below as items starting with $ ): $ ./cql-proxy -h Usage: cql-proxy Flags: -h, --help Show context-sensitive help. -b, --bundle = STRING Path to secure connect bundle ( $BUNDLE ) -u, --username = STRING Username to use for authentication ( $USERNAME ) -p, --password = STRING Password to use for authentication ( $PASSWORD ) -c, --contact-points = CONTACT-POINTS,... Contact points for cluster. Ignored if using the bundle path option ( $CONTACT_POINTS ) . -a, --bind = STRING Address to use to bind serve ( $BIND ) --debug Show debug logging ( $DEBUG ) --profiling Enable profiling ( $PROFILING ) To pass configuration to cql-proxy , either command-line flags or environment variables can be used. Using the docker method as an example, the follwing samples show how username, password and bundle are defined with each method.","title":"B - Configuration"},{"location":"pages/astra/cqlproxy/#using-flags","text":"docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042 :9042 \\ --rm datastax/cql-proxy:v0.0.4 \\ --bundle /tmp/scb.zip --username <astra-client-id> --password <astra-client-secret>","title":"\ud83d\udcd8 Using flags"},{"location":"pages/astra/cqlproxy/#using-environment-variables","text":"docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042 :9042 \\ --rm datastax/cql-proxy:v0.0.4 \\ -e BUNDLE = /tmp/scb.zip -e USERNAME = <astra-client-id> -e PASSWORD = <astra-client-secret>","title":"\ud83d\udcd8 Using environment variables"},{"location":"pages/astra/cqlproxy/#c-getting-started","text":"There are three methods for using cql-proxy : Locally build and run cql-proxy Run a docker image that has cql-proxy installed Use a Kubernetes container to run cql-proxy","title":"C - Getting started"},{"location":"pages/astra/cqlproxy/#locally-build-and-run","text":"Build cql-proxy . go build Run with your desired database. DataStax Astra cluster: ./cql-proxy --bundle <your-secure-connect-zip> \\ --username <astra-client-id> --password <astra-client-secret> Apache Cassandra cluster: ./cql-proxy --contact-points <cluster node IPs or DNS names>","title":"\u2705 Locally build and run"},{"location":"pages/astra/cqlproxy/#run-a-docker-image","text":"Run with your desired database. DataStax Astra cluster: docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042 :9042 \\ datastax/cql-proxy:v0.0.4 \\ --bundle /tmp/scb.zip --username <astra-client-id> --password <astra-client-secret> The <astra-client-id> and <astra-client-secret> can be generated using these instructions . Apache Cassandra cluster: docker run -p 9042 :9042 \\ datastax/cql-proxy:v0.0.4 \\ --contact-points <cluster node IPs or DNS names> If you wish to have the docker image removed after you are done with it, add --rm before the image name datastax/cql-proxy:v0.0.4 .","title":"\u2705 Run a docker image"},{"location":"pages/astra/cqlproxy/#use-kubernetes","text":"Using Kubernetes with cql-proxy requires a number of steps: Generate a token following the Astra instructions . This step will display your Client ID, Client Secret, and Token; make sure you download the information for the next steps. Store the secure bundle in /tmp/scb.zip to match the example below. Create cql-proxy.yaml . You'll need to add three sets of information: arguments, volume mounts, and volumes. Argument: Modify the local bundle location, username and password, using the client ID and client secret obtained in the last step to the container argument. command: [\"./cql-proxy\"] args: [\"--bundle=/tmp/scb.zip\",\"--username=Client ID\",\"--password=Client Secret\"] Volume mounts: Modify /tmp/ as a volume mount as required. volumeMounts: - name: my-cm-vol mountPath: /tmp/ Volume: Modify the configMap filename as required. In this example, it is named cql-proxy-configmap . Use the same name for the volumes that you used for the volumeMounts . volumes: - name: my-cm-vol configMap: name: cql-proxy-configmap Create a configmap. Use the same secure bundle that was specified in the cql-proxy.yaml . kubectl create configmap cql-proxy-configmap --from-file /tmp/scb.zip Check the configmap that was created. kubectl describe configmap config Name: config Namespace: default Labels: <none> Annotations: <none> Data ==== BinaryData ==== scb.zip: 12311 bytes Create a Kubernetes deployment with the YAML file you created: kubectl create -f cql-proxy.yaml Check the logs: kubectl logs <deployment-name>","title":"\u2705 Use Kubernetes"},{"location":"pages/astra/create-instance/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - The Astra database creation procedure \ud83c\udfa5 Youtube Video - Walk through instance creation A - Overview \u00b6 ASTRA DB is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads. B - Prerequisites \u00b6 You should have an Astra account . If you don't have one yet, keep reading and we'll show you how to create it. C - Procedure \u00b6 \u2705 Step 1:Click the sign-in button to login or register. You can use your Github , Google accounts or register with an email . With the latest make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character. If you already have an Astra account, skip this step, locate and click the \"Create Database\" button on the left-side navigation bar of your Astra UI, and read next step. \u2705 Step 2: Complete the creation form As you create a new account, you will be prompted to create a database; you will see the same form if you simply hit the \"Create database\" button in your existing Astra account. \u2139\ufe0f Fields Description Field Description database name It does not need to be unique and not used to initialize a connection but only a label (Between 2 and 50 characters). It is recommended to have a database for each of your application. The free tier is limited to 5 databases. keyspace It is a logical grouping of your tables. (Between 2 and 48 characters), Please use lower cases and snake_case . Cloud Provider Use the one you like, click a cloud provider logo, pick an Area in the list and finally pick a region. We recommend to pick one the closes to you to readuce latencies but in free tier very few difference. \u2139\ufe0f Create Database button becomes enabled only when all fields are filled properly. Please use only lower cases and no space for a keyspace name. \u2139\ufe0f You will see your new database pending in the Dashboard.The status will change to Active when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready. \ud83d\udc41\ufe0f Walkthrough","title":"\u2023 Create Database"},{"location":"pages/astra/create-instance/#a-overview","text":"ASTRA DB is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.","title":"A - Overview"},{"location":"pages/astra/create-instance/#b-prerequisites","text":"You should have an Astra account . If you don't have one yet, keep reading and we'll show you how to create it.","title":"B - Prerequisites"},{"location":"pages/astra/create-instance/#c-procedure","text":"\u2705 Step 1:Click the sign-in button to login or register. You can use your Github , Google accounts or register with an email . With the latest make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character. If you already have an Astra account, skip this step, locate and click the \"Create Database\" button on the left-side navigation bar of your Astra UI, and read next step. \u2705 Step 2: Complete the creation form As you create a new account, you will be prompted to create a database; you will see the same form if you simply hit the \"Create database\" button in your existing Astra account. \u2139\ufe0f Fields Description Field Description database name It does not need to be unique and not used to initialize a connection but only a label (Between 2 and 50 characters). It is recommended to have a database for each of your application. The free tier is limited to 5 databases. keyspace It is a logical grouping of your tables. (Between 2 and 48 characters), Please use lower cases and snake_case . Cloud Provider Use the one you like, click a cloud provider logo, pick an Area in the list and finally pick a region. We recommend to pick one the closes to you to readuce latencies but in free tier very few difference. \u2139\ufe0f Create Database button becomes enabled only when all fields are filled properly. Please use only lower cases and no space for a keyspace name. \u2139\ufe0f You will see your new database pending in the Dashboard.The status will change to Active when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready. \ud83d\udc41\ufe0f Walkthrough","title":"C - Procedure"},{"location":"pages/astra/create-token/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - The Astra token creation procedure \ud83c\udfa5 Youtube Video - Walk through token creation \ud83c\udfa5 Youtube Video - More about token and roles in Astra A - Overview \u00b6 Tokens are the way to authenticate against Astra with any given Apis or Drivers. They are created at organization level and as such can be used with multiple Databases. When you create a token you will select a Role that code a set of permissions. There you can limit the usage of your token for a particular database. B - Prerequisites \u00b6 You should have an Astra account C - Procedure \u00b6 \u2705 Step 1 : Open the Organization settings panel On the top left hand corner locate the panel Current Organization with your email address. Use the chevron down \u2304 to open the menu and pick Organizations Settings \u2705 Step 2: Open the token management page On the new page, select Token Management in the menu. Then use the Select Roles combo to select Organization Administrator role. This is the administrator of your tenant with all permissions. \ud83d\udca1 You can reach the Token Management page directly from the ellipsis menu next to your database in the main Astra dashboard. Expand to see how \u2705 Step 3: Save the token as a CSV. The values of clientSecret and token will not be shown to you later for security reasons. Do not share those values and never commit them on github. \ud83d\udc41\ufe0f Walkthrough You can use the clipboard icons close to each parameter to clip them and copy them elsewhere.","title":"\u2023 Create Token"},{"location":"pages/astra/create-token/#a-overview","text":"Tokens are the way to authenticate against Astra with any given Apis or Drivers. They are created at organization level and as such can be used with multiple Databases. When you create a token you will select a Role that code a set of permissions. There you can limit the usage of your token for a particular database.","title":"A - Overview"},{"location":"pages/astra/create-token/#b-prerequisites","text":"You should have an Astra account","title":"B - Prerequisites"},{"location":"pages/astra/create-token/#c-procedure","text":"\u2705 Step 1 : Open the Organization settings panel On the top left hand corner locate the panel Current Organization with your email address. Use the chevron down \u2304 to open the menu and pick Organizations Settings \u2705 Step 2: Open the token management page On the new page, select Token Management in the menu. Then use the Select Roles combo to select Organization Administrator role. This is the administrator of your tenant with all permissions. \ud83d\udca1 You can reach the Token Management page directly from the ellipsis menu next to your database in the main Astra dashboard. Expand to see how \u2705 Step 3: Save the token as a CSV. The values of clientSecret and token will not be shown to you later for security reasons. Do not share those values and never commit them on github. \ud83d\udc41\ufe0f Walkthrough You can use the clipboard icons close to each parameter to clip them and copy them elsewhere.","title":"C - Procedure"},{"location":"pages/astra/create-topic/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - Reference documentation \ud83c\udfa5 Youtube Video - Astra Streaming demo \ud83c\udfa5 Pulsar Documentation - Getting Starter Apache Pulsar documentation A - Overview \u00b6 ASTRA STREAMING is the simplest way to use the Apache Pulsar messaging/streaming service with zero operations at all - just push the button and get your messages flowing. No credit card required, $25.00 USD credit every month, and the strength and the features of Apache Pulsar managed for you in the cloud. This page explains how to create a new tenant in Astra Streaming, a new namespace in the tenant (if desired) and a new topic in the namespace. Also instructions are given to retrieve the connection parameters to later connect to the topic and start messaging from your application. B - Prerequisites \u00b6 You should have an Astra account . Have a tenant_name , optionally a namespace (if not using \"default\"), and a topic_name ready to create the topic. C - Procedure \u00b6 Make sure you are logged in to your Astra account before proceeding. \u2705 Step 1: Create a tenant Go to your Astra console, locate the \"Create Streaming\" button on the left window and to the right of Streaming. Click on it. Set up a new Tenant (remember Pulsar has a multi-tenant architecture): you have to find a globally unique name for it . Pick the provider/region you like ( try to have it close to you for reduced latency ) and finally hit \"Create Tenant\". You'll shortly see the dashboard for your newly-created Tenant. \u2705 Step 2: Create a namespace A default namespace is created for you with the tenant and you can use it if you want. However, you may want to create a namespace to host your topic(s). Go to the \"Namespaces\" tab of your Tenant dashboard and click on the \"Create namespace\" button on the right. Choose a name and hit \"Create\": you should see it listed among the available namespaces in a moment. \u2705 Step 3: Create a topic Head to the \"Topics\" tab and click the \"Add Topic\" button next to the namespace you want to use. Choose a topic name and click \"Save\" after reviewing the topic settings (such as persistent=yes, partitioned=no ) according to your needs. Your topic is now being created, which takes a couple of minutes max. It will then be ready to receive and dispatch messages. \ud83d\udc41\ufe0f Walkthrough for topic creation \u2705 Step 4: retrieve the Broker URL All is left is to make sure you have the connection parameters needed to reach the topic programmatically. If you click the \"Connect\" tab you will see a list of \"Tenant Details\", along with links to look at code examples in various languages. There are several ways to connect to the topic: in particular, if you plan to use the Pulsar drivers from your application, the important bits are the \"Broker Service URL\" and the \"Streaming Token\" secret. The \"Broker Service URL\" is shown right in the \"Connect\" tab and looks like pulsar+ssl://pulsar-[...].streaming.datastax.com:6651 . You can click on the clipboard icon to copy it. \u2705 Step 5: Manage secrets and retrieve the Streaming Token You will also need a Token, a long secret string providing authentication info when the driver will connect to the topic. The token must be treated as a secret, which means do not post it publicly and do not check it in to repositories. Note : the Streaming Tokens are a completely separate thing from the Astra DB Tokens. Get to the \"Token Manager\" by clicking on the link in the \"Tenant Details\" list: there you will be able to create, copy and revoke streaming tokens for your tenant. Note that a default token has already been created for you, so you don't need to create a new token if you are OK with using that one. Click on the clipboard icon to copy it. The token is a long random-looking string, such as eyJhbGci [...] cpNpX_qN68Q (about 500 chars long). \ud83d\udc41\ufe0f Screenshot for the connection parameters","title":"\u2023 Create Topic"},{"location":"pages/astra/create-topic/#a-overview","text":"ASTRA STREAMING is the simplest way to use the Apache Pulsar messaging/streaming service with zero operations at all - just push the button and get your messages flowing. No credit card required, $25.00 USD credit every month, and the strength and the features of Apache Pulsar managed for you in the cloud. This page explains how to create a new tenant in Astra Streaming, a new namespace in the tenant (if desired) and a new topic in the namespace. Also instructions are given to retrieve the connection parameters to later connect to the topic and start messaging from your application.","title":"A - Overview"},{"location":"pages/astra/create-topic/#b-prerequisites","text":"You should have an Astra account . Have a tenant_name , optionally a namespace (if not using \"default\"), and a topic_name ready to create the topic.","title":"B - Prerequisites"},{"location":"pages/astra/create-topic/#c-procedure","text":"Make sure you are logged in to your Astra account before proceeding. \u2705 Step 1: Create a tenant Go to your Astra console, locate the \"Create Streaming\" button on the left window and to the right of Streaming. Click on it. Set up a new Tenant (remember Pulsar has a multi-tenant architecture): you have to find a globally unique name for it . Pick the provider/region you like ( try to have it close to you for reduced latency ) and finally hit \"Create Tenant\". You'll shortly see the dashboard for your newly-created Tenant. \u2705 Step 2: Create a namespace A default namespace is created for you with the tenant and you can use it if you want. However, you may want to create a namespace to host your topic(s). Go to the \"Namespaces\" tab of your Tenant dashboard and click on the \"Create namespace\" button on the right. Choose a name and hit \"Create\": you should see it listed among the available namespaces in a moment. \u2705 Step 3: Create a topic Head to the \"Topics\" tab and click the \"Add Topic\" button next to the namespace you want to use. Choose a topic name and click \"Save\" after reviewing the topic settings (such as persistent=yes, partitioned=no ) according to your needs. Your topic is now being created, which takes a couple of minutes max. It will then be ready to receive and dispatch messages. \ud83d\udc41\ufe0f Walkthrough for topic creation \u2705 Step 4: retrieve the Broker URL All is left is to make sure you have the connection parameters needed to reach the topic programmatically. If you click the \"Connect\" tab you will see a list of \"Tenant Details\", along with links to look at code examples in various languages. There are several ways to connect to the topic: in particular, if you plan to use the Pulsar drivers from your application, the important bits are the \"Broker Service URL\" and the \"Streaming Token\" secret. The \"Broker Service URL\" is shown right in the \"Connect\" tab and looks like pulsar+ssl://pulsar-[...].streaming.datastax.com:6651 . You can click on the clipboard icon to copy it. \u2705 Step 5: Manage secrets and retrieve the Streaming Token You will also need a Token, a long secret string providing authentication info when the driver will connect to the topic. The token must be treated as a secret, which means do not post it publicly and do not check it in to repositories. Note : the Streaming Tokens are a completely separate thing from the Astra DB Tokens. Get to the \"Token Manager\" by clicking on the link in the \"Tenant Details\" list: there you will be able to create, copy and revoke streaming tokens for your tenant. Note that a default token has already been created for you, so you don't need to create a new token if you are OK with using that one. Click on the clipboard icon to copy it. The token is a long random-looking string, such as eyJhbGci [...] cpNpX_qN68Q (about 500 chars long). \ud83d\udc41\ufe0f Screenshot for the connection parameters","title":"C - Procedure"},{"location":"pages/astra/download-scb/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - Download Cloud Secure Bundle \ud83c\udfa5 Youtube Video - Walk through secure A - Overview \u00b6 To initialize a secured 2-way TLS connection between clients and Astra x509 certificates are needed. The strong authentication is key for maximum security and still benefit from greatest drivers features(health-check, load-balancing, fail-over). Under the hood the protocol SNI over TCP is used to contact each node independently. The configuration and required certificates are provided to user through a zip file called the secure connect bundle that can be downloaded for each DATABASE REGION . Meaning a database deployed across multiple regions will have one secure connect bundle per region. (1 region = 1 underlying Apache Cassandra\u2122 datacenter) B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database C - Procedure \u00b6 \u2705 Step 1 : Select your database Once signed in Astra the list of available databases is located in the menu on the left. Select the database you want to work with by clicking on it. Click on the TAB CONNECT or the big blue button [CONNECT] on the top right hand corner. \u2705 Step 2 : Download the ZIP On this screen look for Connect using a driver . You can pick any of the options Node.js ( javascript ), Python or Java . It will be the same file downloaded. Click on Download Bundle and eventually select the region you want to use Click on target region to be able to copy the link locally. Remarks \u00b6 Most browsers will give you the option to open the zip file directly. Do not do that, save it whole instead : the bundle zipfile will be passed to the drivers as it is! The generated link to the bundle zipfile will expire a few minutes after it is generated. If you download the bundle much later after you have reached the \"Connect\" page, you might end up with a faulty bundle. As a check, make sure the zipfile you downloaded is around 12-13 KiB in size.","title":"\u2023 Secure Connect Bundle"},{"location":"pages/astra/download-scb/#a-overview","text":"To initialize a secured 2-way TLS connection between clients and Astra x509 certificates are needed. The strong authentication is key for maximum security and still benefit from greatest drivers features(health-check, load-balancing, fail-over). Under the hood the protocol SNI over TCP is used to contact each node independently. The configuration and required certificates are provided to user through a zip file called the secure connect bundle that can be downloaded for each DATABASE REGION . Meaning a database deployed across multiple regions will have one secure connect bundle per region. (1 region = 1 underlying Apache Cassandra\u2122 datacenter)","title":"A - Overview"},{"location":"pages/astra/download-scb/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database","title":"B - Prerequisites"},{"location":"pages/astra/download-scb/#c-procedure","text":"\u2705 Step 1 : Select your database Once signed in Astra the list of available databases is located in the menu on the left. Select the database you want to work with by clicking on it. Click on the TAB CONNECT or the big blue button [CONNECT] on the top right hand corner. \u2705 Step 2 : Download the ZIP On this screen look for Connect using a driver . You can pick any of the options Node.js ( javascript ), Python or Java . It will be the same file downloaded. Click on Download Bundle and eventually select the region you want to use Click on target region to be able to copy the link locally.","title":"C - Procedure"},{"location":"pages/astra/download-scb/#remarks","text":"Most browsers will give you the option to open the zip file directly. Do not do that, save it whole instead : the bundle zipfile will be passed to the drivers as it is! The generated link to the bundle zipfile will expire a few minutes after it is generated. If you download the bundle much later after you have reached the \"Connect\" page, you might end up with a faulty bundle. As a check, make sure the zipfile you downloaded is around 12-13 KiB in size.","title":"Remarks"},{"location":"pages/astra/faq/","text":"Questions List \u00b6 Where should I find a database identifier ? Where should I find a database region name ? How to create a keyspace or a namespace ? Where should I find a database identifier ? \u00b6 The database id is a unique identifier ( GUID ) for your database. You can find it on the main dashboard of AstraDB. You can copy it to the clip board by clicking the small icon \ud83d\udccb \u2139\ufe0f Note that, on the contrary of the identifier, the database name is not unique in an organization. ( project in the screenshot above) Where should I find a database region name ? \u00b6 A database can have one or multiple regions. Each regions will have a datacenter Id and a region name. The region name is the one used in the Api Urls. Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the region name in the region table. In the screenshot below we do have 2 europe-west1 and us-east1 . How to create a namespace or keyspace ? \u00b6 Namespaces and keyspaces are synonyms. There are 2 ways to create them. You can create them when you create a database You can create them on the Database Dashboard in the Keyspaces section by clicking the button Add Keyspace . Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the create Keyspace Button on the botton right-hand corner Create Keyspace from its name. The database will switch in MAINTENANCE mode for a few seconds but do not worry the application can still request the other keyspaces.","title":"\u2023 FAQ"},{"location":"pages/astra/faq/#questions-list","text":"Where should I find a database identifier ? Where should I find a database region name ? How to create a keyspace or a namespace ?","title":"Questions List"},{"location":"pages/astra/faq/#where-should-i-find-a-database-identifier","text":"The database id is a unique identifier ( GUID ) for your database. You can find it on the main dashboard of AstraDB. You can copy it to the clip board by clicking the small icon \ud83d\udccb \u2139\ufe0f Note that, on the contrary of the identifier, the database name is not unique in an organization. ( project in the screenshot above)","title":"Where should I find a database identifier ?"},{"location":"pages/astra/faq/#where-should-i-find-a-database-region-name","text":"A database can have one or multiple regions. Each regions will have a datacenter Id and a region name. The region name is the one used in the Api Urls. Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the region name in the region table. In the screenshot below we do have 2 europe-west1 and us-east1 .","title":"Where should I find a database region name ?"},{"location":"pages/astra/faq/#how-to-create-a-namespace-or-keyspace","text":"Namespaces and keyspaces are synonyms. There are 2 ways to create them. You can create them when you create a database You can create them on the Database Dashboard in the Keyspaces section by clicking the button Add Keyspace . Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the create Keyspace Button on the botton right-hand corner Create Keyspace from its name. The database will switch in MAINTENANCE mode for a few seconds but do not worry the application can still request the other keyspaces.","title":"How to create a namespace or keyspace ?"},{"location":"pages/astra/multi-regions/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - Reference documentation \ud83c\udfa5 Youtube Video - Walk through instance creation A - Overview \u00b6 AstraDB allows you to replicate data across multiple regions to maintain data availability for multi-region application architectures. Configuring multiple regions can also satisfy data locality requirements with the added value of cost savings. \ud83d\udd04 Eventual Consistency \u00b6 Apache Cassandra\u00ae and DataStax Astra DB follow the eventual consistency model. As a result, data written to one datacenter/region may not be immediately accessible in other datacenters/regions in the same database cluster. The time span is normally within a few minutes to fully replicate the data. However, it could take longer, and possibly span one or more days. There are several contributing factors to the latter scenario, such as the workload volume, the number of regions, the process that runs data repair operations, and network resources. \u2696\ufe0f Data sovereignty \u00b6 Astra DB serverless replicates all data in the database to all of a database\u2019s regions. By contrast, multiple keyspaces in Apache Cassandra\u00ae and DataStax Enterprise (DSE) allow a database to replicate some tables to a subset of regions. To achieve the same behavior as Cassandra or DSE, create a separate AstraDB instance that adheres to the necessary region restrictions. The database client will need to add a separate connection for the additional database and send queries to the appropriate connection depending on the table being queried. \u26a0\ufe0f Limitations \u00b6 Lightweight transactions work for only a single-region datacenter. If you original region is disconnected, schema changes are suspended and repairs do not run. If any regions are disconnected, the writes to those regions will not be forwarded. While adding a new region, you cannot drop a table or keyspace and you cannot truncate a table. If any region is not online, you cannot truncate a table. B - Prerequisites \u00b6 You should have an Astra account You should have enter a CREDIT CARD in the system OR/AND get MORE THAN 25$ in Astra Credits. C - Create a new Region \u00b6 \u2705 Step 1: Click the Add Region Button Select the database to show the Dashboard, select Add Region. \u2705 Step 2: Select your region Select your desired region from the dropdown menu of available. You can review your selected region and its cost below the dropdown menu. You can add only a single region at one time. \u2705 Step 3: Validate your region Select Add Region to add the region to your database. The database switch in maintenance status. Do not worry the existing regions remain active and available for operations there is no downtime. After you add the new region, your new region will show up in the list of regions on your database Dashboard. Finally after the initialization you got: D - Delete a new Region \u00b6 \u2705 Step 1: Select Region to delete From you database Dashboard, select the overflow menu for the database you want to delete, Select Delete. You can notice that you CANNOT delete the original main region, the delete is not available in the menu \u2705 Step 2: Validate your action Removing a region is not reversible. Proceed with caution. A pop-up will ask you to validate this operation by entering the delete word. The database will switch in maintenance mode. After a few seconds you will see the status of the deleted regions change from Active to Offline Finally the region will not be visible on screen","title":"\u2023 Multi Regions"},{"location":"pages/astra/multi-regions/#a-overview","text":"AstraDB allows you to replicate data across multiple regions to maintain data availability for multi-region application architectures. Configuring multiple regions can also satisfy data locality requirements with the added value of cost savings.","title":"A - Overview"},{"location":"pages/astra/multi-regions/#eventual-consistency","text":"Apache Cassandra\u00ae and DataStax Astra DB follow the eventual consistency model. As a result, data written to one datacenter/region may not be immediately accessible in other datacenters/regions in the same database cluster. The time span is normally within a few minutes to fully replicate the data. However, it could take longer, and possibly span one or more days. There are several contributing factors to the latter scenario, such as the workload volume, the number of regions, the process that runs data repair operations, and network resources.","title":"\ud83d\udd04 Eventual Consistency"},{"location":"pages/astra/multi-regions/#data-sovereignty","text":"Astra DB serverless replicates all data in the database to all of a database\u2019s regions. By contrast, multiple keyspaces in Apache Cassandra\u00ae and DataStax Enterprise (DSE) allow a database to replicate some tables to a subset of regions. To achieve the same behavior as Cassandra or DSE, create a separate AstraDB instance that adheres to the necessary region restrictions. The database client will need to add a separate connection for the additional database and send queries to the appropriate connection depending on the table being queried.","title":"\u2696\ufe0f Data sovereignty"},{"location":"pages/astra/multi-regions/#limitations","text":"Lightweight transactions work for only a single-region datacenter. If you original region is disconnected, schema changes are suspended and repairs do not run. If any regions are disconnected, the writes to those regions will not be forwarded. While adding a new region, you cannot drop a table or keyspace and you cannot truncate a table. If any region is not online, you cannot truncate a table.","title":"\u26a0\ufe0f Limitations"},{"location":"pages/astra/multi-regions/#b-prerequisites","text":"You should have an Astra account You should have enter a CREDIT CARD in the system OR/AND get MORE THAN 25$ in Astra Credits.","title":"B - Prerequisites"},{"location":"pages/astra/multi-regions/#c-create-a-new-region","text":"\u2705 Step 1: Click the Add Region Button Select the database to show the Dashboard, select Add Region. \u2705 Step 2: Select your region Select your desired region from the dropdown menu of available. You can review your selected region and its cost below the dropdown menu. You can add only a single region at one time. \u2705 Step 3: Validate your region Select Add Region to add the region to your database. The database switch in maintenance status. Do not worry the existing regions remain active and available for operations there is no downtime. After you add the new region, your new region will show up in the list of regions on your database Dashboard. Finally after the initialization you got:","title":"C - Create a new Region"},{"location":"pages/astra/multi-regions/#d-delete-a-new-region","text":"\u2705 Step 1: Select Region to delete From you database Dashboard, select the overflow menu for the database you want to delete, Select Delete. You can notice that you CANNOT delete the original main region, the delete is not available in the menu \u2705 Step 2: Validate your action Removing a region is not reversible. Proceed with caution. A pop-up will ask you to validate this operation by entering the delete word. The database will switch in maintenance mode. After a few seconds you will see the status of the deleted regions change from Active to Offline Finally the region will not be visible on screen","title":"D - Delete a new Region"},{"location":"pages/astra/resume-db/","text":"A - Overview \u00b6 In the free tier (serverless) , after 23h , your database will be hibernated and the status will change to StandBy . From there it needs to be resumed or the first request will fail . This first request will also replace the database in Active mode after a few seconds. B - Prerequisites \u00b6 You should have an Astra account C - Procedure \u00b6 The idea here is to trigger an harmless request to access to the health TAB to change the status of the Database. \u2705 Step 1: Trigger a request Access the database by clicking its name in the menu on the left Select Table Health check Wait for a minute for the database to exit hibernation","title":"\u2023 Resume a database"},{"location":"pages/astra/resume-db/#a-overview","text":"In the free tier (serverless) , after 23h , your database will be hibernated and the status will change to StandBy . From there it needs to be resumed or the first request will fail . This first request will also replace the database in Active mode after a few seconds.","title":"A - Overview"},{"location":"pages/astra/resume-db/#b-prerequisites","text":"You should have an Astra account","title":"B - Prerequisites"},{"location":"pages/astra/resume-db/#c-procedure","text":"The idea here is to trigger an harmless request to access to the health TAB to change the status of the Database. \u2705 Step 1: Trigger a request Access the database by clicking its name in the menu on the left Select Table Health check Wait for a minute for the database to exit hibernation","title":"C - Procedure"},{"location":"pages/data/data/","text":"\ud83d\udce5 Load and Export \u00b6 \ud83d\udd0d Browse \u00b6 \ud83d\udccb Data Modelling \u00b6","title":"\ud83c\udfe0 Home"},{"location":"pages/data/data/#load-and-export","text":"","title":"\ud83d\udce5 Load and Export"},{"location":"pages/data/data/#browse","text":"","title":"\ud83d\udd0d Browse"},{"location":"pages/data/data/#data-modelling","text":"","title":"\ud83d\udccb Data Modelling"},{"location":"pages/data/explore/cqlsh/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - Reference documentation \ud83d\udcd6 Cql Tool Docs - Reference Documentation A - Overview \u00b6 CqlSH is a command-line interface for interacting with Cassandra using CQL (the Cassandra Query Language). It is shipped with every Cassandra package, and can be found in the bin/ directory alongside the cassandra executable. cqlsh is implemented with the Python native protocol driver, and connects to the single specified node. You can setup the software by providing options in the command line and/OR provide the settings in a file called cqlshrc located in ~/.cassandra > cqlsh --help Usage: cqlsh [options] [host [port]] CQL Shell Options: --version show program's version number and exit -h, --help show this help message and exit -C, --color Always use color output --no-color Never use color output --browser=BROWSER The browser to use to display CQL help, where BROWSER can be: - one of the supported browsers in https://docs.python.org/2/library/webbrowser.html. - browser path followed by %s, example: /usr/bin /google-chrome-stable %s --ssl Use SSL -u USERNAME, --username=USERNAME Authenticate as user. -p PASSWORD, --password=PASSWORD Authenticate using password. -k KEYSPACE, --keyspace=KEYSPACE Authenticate to the given keyspace. -b SECURE_CONNECT_BUNDLE, --secure-connect-bundle=SECURE_CONNECT_BUNDLE Connect using secure connect bundle. If this option is specified host, port settings are ignored -f FILE, --file=FILE Execute commands from FILE, then exit --debug Show additional debugging information --coverage Collect coverage data --encoding=ENCODING Specify a non-default encoding for output. (Default: utf-8) --cqlshrc=CQLSHRC Specify an alternative cqlshrc file location. --cqlversion=CQLVERSION Specify a particular CQL version, by default the highest version supported by the server will be used. Examples: \"3.0.3\", \"3.1.0\" --protocol-version=PROTOCOL_VERSION Specify a specific protocol version; otherwise the client will default and downgrade as necessary. Mutually exclusive with --dse-protocol-version. -e EXECUTE, --execute=EXECUTE Execute the statement and quit. --connect-timeout=CONNECT_TIMEOUT Specify the connection timeout in seconds (default: 5 seconds). --request-timeout=REQUEST_TIMEOUT Specify the default request timeout in seconds (default: 10 seconds). --consistency-level=CONSISTENCY_LEVEL Specify the initial consistency level. --serial-consistency-level=SERIAL_CONSISTENCY_LEVEL Specify the initial serial consistency level. -t, --tty Force tty mode (command prompt). --no-file-io Disable cqlsh commands that perform file I/O. --disable-history Disable saving of history Connects to 127.0.0.1:9042 by default. These defaults can be changed by setting $CQLSH_HOST and/or $CQLSH_PORT. When a host (and optional port number) are given on the command line, they take precedence over any defaults. B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should download the Cqlsh Version for Astra DB You should NOT use a WINDOWS machine, as of today cqlsh is not supported on Windows C - Installation \u00b6 \u2705 Step 1: Download and extract the archive To download the archive you can go on the download page , check the box and download the file: You can also use the command line: wget https://downloads.datastax.com/enterprise/cqlsh-astra.tar.gz \\ && tar xvzf cqlsh-astra.tar.gz \\ && rm -f cqlsh-astra.tar.gz The archive should look like: \u2705 Step 2: Start cqlsh providing parameters in the command line: From the directory where you extracted the CQLSH tarball, run the cqlsh script from the command line: $ cd /cqlsh-astra/bin $ ./cqlsh -u ${ CLIENT_ID } -p ${ CLIENT_SECRET } -b ${ PATH_TO_SECURE_BUNBLE .zip } -u (username) - Client ID as provided in the token generation page -p (password) - Client secret as provided in the token generation page -b (bundle) - location of the secure connect bundle that you downloaded for your database. \u2705 Step 3: Start Cqlsh providing parameters in cqlshrc Configure the cqlshrc file If you do not want to pass the secure connect bundle on the command line every time, set up the location in your cqlshrc file in ~/.cassandra [authentication] username = ${CLIENT_ID} password = ${CLIENT_SECRET} [connection] secure_connect_bundle = ${PATH_TO_SECURE_BUNBLE.zip} D - Tips and tricks \u00b6 If is a good idea to add cqlsh in your path to be able to use from everywhere If you want to work with multiple DB use some alias with the parameters alias cqlsh_db1='cqlsh -u user -p password -b secure-connect-db1.zip' alias cqlsh_db2='cqlsh --cqlshrc_db2'","title":"\u2023 Cqlsh"},{"location":"pages/data/explore/cqlsh/#a-overview","text":"CqlSH is a command-line interface for interacting with Cassandra using CQL (the Cassandra Query Language). It is shipped with every Cassandra package, and can be found in the bin/ directory alongside the cassandra executable. cqlsh is implemented with the Python native protocol driver, and connects to the single specified node. You can setup the software by providing options in the command line and/OR provide the settings in a file called cqlshrc located in ~/.cassandra > cqlsh --help Usage: cqlsh [options] [host [port]] CQL Shell Options: --version show program's version number and exit -h, --help show this help message and exit -C, --color Always use color output --no-color Never use color output --browser=BROWSER The browser to use to display CQL help, where BROWSER can be: - one of the supported browsers in https://docs.python.org/2/library/webbrowser.html. - browser path followed by %s, example: /usr/bin /google-chrome-stable %s --ssl Use SSL -u USERNAME, --username=USERNAME Authenticate as user. -p PASSWORD, --password=PASSWORD Authenticate using password. -k KEYSPACE, --keyspace=KEYSPACE Authenticate to the given keyspace. -b SECURE_CONNECT_BUNDLE, --secure-connect-bundle=SECURE_CONNECT_BUNDLE Connect using secure connect bundle. If this option is specified host, port settings are ignored -f FILE, --file=FILE Execute commands from FILE, then exit --debug Show additional debugging information --coverage Collect coverage data --encoding=ENCODING Specify a non-default encoding for output. (Default: utf-8) --cqlshrc=CQLSHRC Specify an alternative cqlshrc file location. --cqlversion=CQLVERSION Specify a particular CQL version, by default the highest version supported by the server will be used. Examples: \"3.0.3\", \"3.1.0\" --protocol-version=PROTOCOL_VERSION Specify a specific protocol version; otherwise the client will default and downgrade as necessary. Mutually exclusive with --dse-protocol-version. -e EXECUTE, --execute=EXECUTE Execute the statement and quit. --connect-timeout=CONNECT_TIMEOUT Specify the connection timeout in seconds (default: 5 seconds). --request-timeout=REQUEST_TIMEOUT Specify the default request timeout in seconds (default: 10 seconds). --consistency-level=CONSISTENCY_LEVEL Specify the initial consistency level. --serial-consistency-level=SERIAL_CONSISTENCY_LEVEL Specify the initial serial consistency level. -t, --tty Force tty mode (command prompt). --no-file-io Disable cqlsh commands that perform file I/O. --disable-history Disable saving of history Connects to 127.0.0.1:9042 by default. These defaults can be changed by setting $CQLSH_HOST and/or $CQLSH_PORT. When a host (and optional port number) are given on the command line, they take precedence over any defaults.","title":"A - Overview"},{"location":"pages/data/explore/cqlsh/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should download the Cqlsh Version for Astra DB You should NOT use a WINDOWS machine, as of today cqlsh is not supported on Windows","title":"B - Prerequisites"},{"location":"pages/data/explore/cqlsh/#c-installation","text":"\u2705 Step 1: Download and extract the archive To download the archive you can go on the download page , check the box and download the file: You can also use the command line: wget https://downloads.datastax.com/enterprise/cqlsh-astra.tar.gz \\ && tar xvzf cqlsh-astra.tar.gz \\ && rm -f cqlsh-astra.tar.gz The archive should look like: \u2705 Step 2: Start cqlsh providing parameters in the command line: From the directory where you extracted the CQLSH tarball, run the cqlsh script from the command line: $ cd /cqlsh-astra/bin $ ./cqlsh -u ${ CLIENT_ID } -p ${ CLIENT_SECRET } -b ${ PATH_TO_SECURE_BUNBLE .zip } -u (username) - Client ID as provided in the token generation page -p (password) - Client secret as provided in the token generation page -b (bundle) - location of the secure connect bundle that you downloaded for your database. \u2705 Step 3: Start Cqlsh providing parameters in cqlshrc Configure the cqlshrc file If you do not want to pass the secure connect bundle on the command line every time, set up the location in your cqlshrc file in ~/.cassandra [authentication] username = ${CLIENT_ID} password = ${CLIENT_SECRET} [connection] secure_connect_bundle = ${PATH_TO_SECURE_BUNBLE.zip}","title":"C - Installation"},{"location":"pages/data/explore/cqlsh/#d-tips-and-tricks","text":"If is a good idea to add cqlsh in your path to be able to use from everywhere If you want to work with multiple DB use some alias with the parameters alias cqlsh_db1='cqlsh -u user -p password -b secure-connect-db1.zip' alias cqlsh_db2='cqlsh --cqlshrc_db2'","title":"D - Tips and tricks"},{"location":"pages/data/explore/datagrip/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - Reference documentation Instructions described in **Sebastian Estevez Blog post** A - Overview \u00b6 DataGrip is a database management environment for developers. It is designed to query, create, and manage databases. Databases can work locally, on a server, or in the cloud. Supports MySQL, PostgreSQL, Microsoft SQL Server, Oracle, and more. If you have a JDBC driver, add it to DataGrip, connect to your DBMS, and start working. B - Prerequisites \u00b6 Datagrip reference documentation Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP Download and install DataGrip C - Installation and Setup \u00b6 \u2705 Step 1: Download JDBC Driver Download the JDBC driver from the DataStax website: Go to https://downloads.datastax.com/#odbc-jdbc-drivers. Select Simba JDBC Driver for Apache Cassandra. Select JDBC 4.2. Read the license terms and accept it (click the checkbox). Hit the blue Download button. Once the download completes, unzip the downloaded file. \u2705 Step 2: Download Settings.zip Download the settings.zip locally \u26a0\ufe0f If you are already a DataGrip user, back up your existing settings because the download settings.zip might override your existing settings. \u2705 Step 3: Import the settings.zip into DataGrip Selecting File \u2192 Manage IDE Settings \u2192 Import Settings in DataGrip. From the directory menu, select the `settings.zip file from the directory where it is stored. Select Import and Restart . You will see a new database connection type called Astra: Simba Cassandra JDBC 4.2 driver shown. Go to the Advanced Settings to confirm the VM home path is set to Default. VM home path is set to a value named Default. \u2705 Step 4: Establish the connection When you create your connection, the URL will look like this: jdbc:cassandra://;AuthMech=<2>;UID=token;PWD=<ApplicationToken>;SecureConnectionBundlePath=<PATH TO YOUR SECURE CONNECT BUNDLE>;TunableConsistency=<6> URL in the screenshot shows the format described in the previous sentence. AuthMech: Specifies whether the driver connects to a Cassandra or Astra DB database and whether the driver authenticates the connection. ApplicationToken: Generated from Astra DB console. SecureConnectionBundlePath: Path to where your downloaded Secure Connect Bundle is located. TunableConsistency: Specifies Cassandra replica or the number of Cassandra replicas that must process a query for the query to be considered successful.","title":"\u2023 Datagrip"},{"location":"pages/data/explore/datagrip/#a-overview","text":"DataGrip is a database management environment for developers. It is designed to query, create, and manage databases. Databases can work locally, on a server, or in the cloud. Supports MySQL, PostgreSQL, Microsoft SQL Server, Oracle, and more. If you have a JDBC driver, add it to DataGrip, connect to your DBMS, and start working.","title":"A - Overview"},{"location":"pages/data/explore/datagrip/#b-prerequisites","text":"Datagrip reference documentation Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP Download and install DataGrip","title":"B - Prerequisites"},{"location":"pages/data/explore/datagrip/#c-installation-and-setup","text":"\u2705 Step 1: Download JDBC Driver Download the JDBC driver from the DataStax website: Go to https://downloads.datastax.com/#odbc-jdbc-drivers. Select Simba JDBC Driver for Apache Cassandra. Select JDBC 4.2. Read the license terms and accept it (click the checkbox). Hit the blue Download button. Once the download completes, unzip the downloaded file. \u2705 Step 2: Download Settings.zip Download the settings.zip locally \u26a0\ufe0f If you are already a DataGrip user, back up your existing settings because the download settings.zip might override your existing settings. \u2705 Step 3: Import the settings.zip into DataGrip Selecting File \u2192 Manage IDE Settings \u2192 Import Settings in DataGrip. From the directory menu, select the `settings.zip file from the directory where it is stored. Select Import and Restart . You will see a new database connection type called Astra: Simba Cassandra JDBC 4.2 driver shown. Go to the Advanced Settings to confirm the VM home path is set to Default. VM home path is set to a value named Default. \u2705 Step 4: Establish the connection When you create your connection, the URL will look like this: jdbc:cassandra://;AuthMech=<2>;UID=token;PWD=<ApplicationToken>;SecureConnectionBundlePath=<PATH TO YOUR SECURE CONNECT BUNDLE>;TunableConsistency=<6> URL in the screenshot shows the format described in the previous sentence. AuthMech: Specifies whether the driver connects to a Cassandra or Astra DB database and whether the driver authenticates the connection. ApplicationToken: Generated from Astra DB console. SecureConnectionBundlePath: Path to where your downloaded Secure Connect Bundle is located. TunableConsistency: Specifies Cassandra replica or the number of Cassandra replicas that must process a query for the query to be considered successful.","title":"C - Installation and Setup"},{"location":"pages/data/explore/dbeaver/","text":"This article includes information that was originally written by Erick Ramirez on DataStax Community A - Overview \u00b6 DBeaver is a universal database management tool for everyone who needs to work with data in a professional way. With DBeaver you are able to manipulate with your data like in a regular spreadsheet, create analytical reports based on records from different data storages, export information in an appropriate format. \u2139\ufe0f Introduction to DBeaver \ud83d\udce5 DBeaver Download Link B - Prerequisites \u00b6 Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP This article assumes you have installed DBeaver Community Edition on your laptop or PC. It was written for version 21.2.0 on MacOS but it should also work for the Windows version. C - Installation and Setup \u00b6 \u2705 Step 1: JDBC Driver \u00b6 Download the JDBC driver from the DataStax website: Go to https://downloads.datastax.com/#odbc-jdbc-drivers. Select Simba JDBC Driver for Apache Cassandra. Select JDBC 4.2. Read the license terms and accept it (click the checkbox). Hit the blue Download button. Once the download completes, unzip the downloaded file. \u2705 Step 2: Import Driver \u00b6 Go to the Driver Manager. Click the New button. In the Libraries tab, click the Add File button. Locate the directory where you unzipped the driver download and add the CassandraJDBC42.jar file. Click the Find Class button which should identify the driver class as com.simba.cassandra.jdbc42.Driver . In the Settings tab, set the following: Driver Name: Astra DB Driver Type: Generic Class Name: com.simba.cassandra.jdbc42.Driver Click the OK button to save the driver At this point, you should see Astra DB as one of the drivers on the list: \u2705 Step 3: Create New Connection \u00b6 Connect to your Astra DB in DBeaver: Open the New Database Connection dialog box. Select Astra DB from the list of drivers. In the Main tab, set the JDBC URL to: jdbc:cassandra://;AuthMech=2;TunableConsistency=6;SecureConnectionBundlePath=/path/to/secure-connect-dbeaver.zip Note That you will need to specify the full path to your secure bundle. In the Username field, enter the string token In the Password field, paste the value of the token you created in the Prerequisites section above. The token looks like AstraCS:AbC...XYz:123...edf0 . Click on the Connection details button In Connection name field, give your DB connection a name: Click the Finish button Click on the Test Connection button to confirm that the driver configuration is working: \u2705 Step 4: Final Test \u00b6 Connect to your Astra DB. If the connection was successful, you should be able to explore the keyspaces and tables in your DB on the left-hand side of the UI. Here's an example output: \ud83c\udfe0 Back to HOME","title":"\u2023 DBeaver"},{"location":"pages/data/explore/dbeaver/#a-overview","text":"DBeaver is a universal database management tool for everyone who needs to work with data in a professional way. With DBeaver you are able to manipulate with your data like in a regular spreadsheet, create analytical reports based on records from different data storages, export information in an appropriate format. \u2139\ufe0f Introduction to DBeaver \ud83d\udce5 DBeaver Download Link","title":"A - Overview"},{"location":"pages/data/explore/dbeaver/#b-prerequisites","text":"Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP This article assumes you have installed DBeaver Community Edition on your laptop or PC. It was written for version 21.2.0 on MacOS but it should also work for the Windows version.","title":"B - Prerequisites"},{"location":"pages/data/explore/dbeaver/#c-installation-and-setup","text":"","title":"C - Installation and Setup"},{"location":"pages/data/explore/dbeaver/#step-1-jdbc-driver","text":"Download the JDBC driver from the DataStax website: Go to https://downloads.datastax.com/#odbc-jdbc-drivers. Select Simba JDBC Driver for Apache Cassandra. Select JDBC 4.2. Read the license terms and accept it (click the checkbox). Hit the blue Download button. Once the download completes, unzip the downloaded file.","title":"\u2705 Step 1: JDBC Driver"},{"location":"pages/data/explore/dbeaver/#step-2-import-driver","text":"Go to the Driver Manager. Click the New button. In the Libraries tab, click the Add File button. Locate the directory where you unzipped the driver download and add the CassandraJDBC42.jar file. Click the Find Class button which should identify the driver class as com.simba.cassandra.jdbc42.Driver . In the Settings tab, set the following: Driver Name: Astra DB Driver Type: Generic Class Name: com.simba.cassandra.jdbc42.Driver Click the OK button to save the driver At this point, you should see Astra DB as one of the drivers on the list:","title":"\u2705 Step 2: Import Driver"},{"location":"pages/data/explore/dbeaver/#step-3-create-new-connection","text":"Connect to your Astra DB in DBeaver: Open the New Database Connection dialog box. Select Astra DB from the list of drivers. In the Main tab, set the JDBC URL to: jdbc:cassandra://;AuthMech=2;TunableConsistency=6;SecureConnectionBundlePath=/path/to/secure-connect-dbeaver.zip Note That you will need to specify the full path to your secure bundle. In the Username field, enter the string token In the Password field, paste the value of the token you created in the Prerequisites section above. The token looks like AstraCS:AbC...XYz:123...edf0 . Click on the Connection details button In Connection name field, give your DB connection a name: Click the Finish button Click on the Test Connection button to confirm that the driver configuration is working:","title":"\u2705 Step 3: Create New Connection"},{"location":"pages/data/explore/dbeaver/#step-4-final-test","text":"Connect to your Astra DB. If the connection was successful, you should be able to explore the keyspaces and tables in your DB on the left-hand side of the UI. Here's an example output: \ud83c\udfe0 Back to HOME","title":"\u2705 Step 4: Final Test"},{"location":"pages/data/explore/dbschema/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 Astra Docs - Reference documentation Instructions described in **Sebastian Estevez Blog post** A - Overview \u00b6 DbSchema is a universal database designer for out-of-the-box schema management and documentation, sharing the schema in the team, and deploying on different databases. Visual tools can help developers, database administrators, and decision-makers to query, explore and manage the data. \u2139\ufe0f Introduction to DBSchema \ud83d\udce5 DBSchema Installation DBSchema uses the Simba JDBC driver to connect to Cassandra as the storage backend. The Java driver itself supports connections to Astra DB natively. B - Prerequisites \u00b6 Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP This article assumes you have installed the latest version of DBSchema on your laptop or PC. C - Installation and Setup \u00b6 \u2705 Step 1: JDBC Driver Download the JDBC driver from the DataStax website: Go to https://downloads.datastax.com/#odbc-jdbc-drivers. Select Simba JDBC Driver for Apache Cassandra. Select JDBC 4.2. Read the license terms and accept it (click the checkbox). Hit the blue Download button. Once the download completes, unzip the downloaded file. \u2705 Step 2: Establish the Connection Open DB Schema Select Connect to the Database Select Start In the Choose your database menu, select Cassandra. Select Next. Select JDBC Driver edit option. In the JDBC Driver Manager, select New . In the Add RDBMS window, enter Astra and select OK Select OK in the confirmation message. Upload the Simba JDBC Driver. Select Open Once you upload the Simba JDBC Driver, you will see Astra in the Choose your Database **window. Select **Next . In the Astra Connection Dialog, add JDBC URL as jdbc:cassandra://;AuthMech=<2>;UID=token;PWD=<ApplicationToken>;SecureConnectionBundlePath=<PATH TO YOUR SECURE CONNECT BUNDLE>;TunableConsistency=<6> with the following variables: AuthMech: Specifies whether the driver connects to a Cassandra or Astra DB database and whether the driver authenticates the connection. ApplicationToken: Generated from Astra DB console. See Manage application tokens. SecureConnectionBundlePath: Path to where your downloaded Secure Connect Bundle is located. See Get secure connect bundle. TunableConsistency: Specifies Cassandra replica or the number of Cassandra replicas that must process a query for the query to be considered successful. Select Connect In the Select Schemas/Catalogs , select the keyspace to which you want to connect. Select OK. \u2705 Step 4: Final Test Now that your connection is working, you can create tables, introspect your keyspaces, view your data in the DBSchema GUI, and more. To learn more about DBSchema, see Quick start with DBSchema","title":"\u2023 DBSchema"},{"location":"pages/data/explore/dbschema/#a-overview","text":"DbSchema is a universal database designer for out-of-the-box schema management and documentation, sharing the schema in the team, and deploying on different databases. Visual tools can help developers, database administrators, and decision-makers to query, explore and manage the data. \u2139\ufe0f Introduction to DBSchema \ud83d\udce5 DBSchema Installation DBSchema uses the Simba JDBC driver to connect to Cassandra as the storage backend. The Java driver itself supports connections to Astra DB natively.","title":"A - Overview"},{"location":"pages/data/explore/dbschema/#b-prerequisites","text":"Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP This article assumes you have installed the latest version of DBSchema on your laptop or PC.","title":"B - Prerequisites"},{"location":"pages/data/explore/dbschema/#c-installation-and-setup","text":"\u2705 Step 1: JDBC Driver Download the JDBC driver from the DataStax website: Go to https://downloads.datastax.com/#odbc-jdbc-drivers. Select Simba JDBC Driver for Apache Cassandra. Select JDBC 4.2. Read the license terms and accept it (click the checkbox). Hit the blue Download button. Once the download completes, unzip the downloaded file. \u2705 Step 2: Establish the Connection Open DB Schema Select Connect to the Database Select Start In the Choose your database menu, select Cassandra. Select Next. Select JDBC Driver edit option. In the JDBC Driver Manager, select New . In the Add RDBMS window, enter Astra and select OK Select OK in the confirmation message. Upload the Simba JDBC Driver. Select Open Once you upload the Simba JDBC Driver, you will see Astra in the Choose your Database **window. Select **Next . In the Astra Connection Dialog, add JDBC URL as jdbc:cassandra://;AuthMech=<2>;UID=token;PWD=<ApplicationToken>;SecureConnectionBundlePath=<PATH TO YOUR SECURE CONNECT BUNDLE>;TunableConsistency=<6> with the following variables: AuthMech: Specifies whether the driver connects to a Cassandra or Astra DB database and whether the driver authenticates the connection. ApplicationToken: Generated from Astra DB console. See Manage application tokens. SecureConnectionBundlePath: Path to where your downloaded Secure Connect Bundle is located. See Get secure connect bundle. TunableConsistency: Specifies Cassandra replica or the number of Cassandra replicas that must process a query for the query to be considered successful. Select Connect In the Select Schemas/Catalogs , select the keyspace to which you want to connect. Select OK. \u2705 Step 4: Final Test Now that your connection is working, you can create tables, introspect your keyspaces, view your data in the DBSchema GUI, and more. To learn more about DBSchema, see Quick start with DBSchema","title":"C - Installation and Setup"},{"location":"pages/data/explore/minddb/","text":"This article was originally written by Steven Matisson on Datastax JIRA This page will go into details about what I had to do to build the project, modify the `cassandra.py` and `scylla_ds.py`, and get mindsdb GUI connected to Astra. - **Source Repo:** [GitHub - mindsdb/mindsdb](https://github.com/mindsdb/mindsdb) - **My Fork:** [ds-steven-matison/mindsdb](https://github.com/ds-steven-matison/mindsdb) - **Docs:** [https://docs.mindsdb.com/](https://docs.mindsdb.com/) #### Files I Changed /root/mindsdb/lib64/python3.6/site-packages/mindsdb_datasources/datasources/scylla_ds.py - _Path here is correct. \u201clib64\u201d not part of repo, so I put scylla_ds.py in repo so you can see source code here: [github diff](https://github.com/ds-steven-matison/mindsdb/commit/51d6936d49e0597e47cc7dac24785d2f775f3ea4#diff-9ad8948ab6e9e5fbdfa34873eb019faa3069f62c2297acbb50791ba70af43e9f)_ /root/mindsdb/lib64/python3.6/site-packages/mindsdb_datasources/cassandra.py - Changes diff in repo here: [github diff](https://github.com/ds-steven-matison/mindsdb/commit/51d6936d49e0597e47cc7dac24785d2f775f3ea4#diff-23fdac8240db507d6205637ba90dcb72f825d939bf44d5ada16ea4ebfeee0175) ### Git Status Untracked files: (use \"git add <file>...\" to include in what will be committed) LICENSE.txt MindsDB.egg-info/ bin/ config.json include/ lib/ lib64 mindsdb/integrations/cassandra/cassandra.py.bk mindsdb/integrations/cassandra/tmp.py pip-selfcheck.json share/ ### Terminal History 503 python -v 504 python -version 505 ls 506 python3 -v 507 python3 -m venv mindsdb 508 source mindsdb/bin/activate 509 pip3 install mindsdb 510 pip3 install Cython 511 pip3 install mindsdb 512 pip3 install sentencepiece 513 pip3 freeze 514 pip install --upgrade pip 515 pip3 install sentencepiece 516 pip3 install mindsdb 517 pip3 freeze 518 python3 -m mindsdb 533 pip3 install mindsdb 548 pip3 install cassandra-driver 549 python3 -c 'import cassandra; print (cassandra.__version__)' 570 python3 mindsdb_cassandra.py 571 nano mindsdb_cassandra.py 572 python3 mindsdb_cassandra.py 573 python3 -m mindsdb --api=mysql --config=config.json 574 pip3 uninstall mindsdb 577 git clone https://github.com/ds-steven-matison/mindsdb.git 578 cd mindsdb/mindsdb/integrations/cassandra/ 579 ls 580 nano cassandra.py 581 cp cassandra.py cassandra.py.bk 582 nano cassandra.py 588 pip3 install -r requirements.txt 592 pip3 install cassandra-driver 636 cp secure-connect-mindsdb.zip /tmp 637 chmod 755 /tmp/secure-connect-mindsdb.zip 654 pip3 freeze 658 pip3 install cassandra-driver 659 python3 -c 'import cassandra; print (cassandra.__version__)' 662 nano /root/mindsdb/lib64/python3.6/site-packages/mindsdb_datasources/cassandra.py 669 nano ./mindsdb/lib/python3.6/site-packages/cassandra/cluster.py 670 nano /root/mindsdb/lib64/python3.6/site-packages/mindsdb_datasources/datasources/scylla_ds.py 672 python3 -m venv mindsdb 673 source mindsdb/bin/activate 674 cd mindsdb && pip3 install -r requirements.txt 675 pip install --upgrade pip 676 pip3 install --upgrade pip 677 pip3 install -r requirements.txt 678 python setup.py develop 683 mkdir /storage 695 install mindsdb_native[cassandra] 696 pip3 install mindsdb-sdk 721 nano config.json 722 python3 -m mindsdb --config=config.json","title":"\u2023 MindDB"},{"location":"pages/data/explore/netflix-data-explorer/","text":"Work in progress","title":"\u2023 Netflix Data Explorer"},{"location":"pages/data/explore/tableplus/","text":"\ud83c\udfe0 Back to HOME Last Update 2/11/2022 This article includes information that was originally written by Erick Ramirez on DataStax Community A - Overview \u00b6 TablePlus is a modern, native tool with elegant UI that allows you to simultaneously manage multiple databases such as MySQL, PostgreSQL, SQLite, Microsoft SQL Server and more. \u2139\ufe0f Introduction to TablePlus \ud83d\udce5 TablePlus Download Link B - Prerequisites \u00b6 Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP This article assumes you have a running installation of Tableplus on your laptop or PC. It was written for the MacOS version but it should also work for the Windows version. C - Installation and Setup \u00b6 Note: For simplicity, the secure connect bundle has been placed in /path/to/scb \u2705 Step 1: DB Information \u00b6 On your laptop or PC where Tableplus is installed, unpack your secure bundle. For example: $ cd /path/to/scb $ unzip secure-connect-getvaxxed.zip Here is an example file listing after unpacking the bundle: / path/ to/ scb/ ca.crt cert cert.pfx config.json cqlshrc identity.jks key trustStore.jks Obtain information about your database from the config.json file. Here is an example: { \"host\": \"70bf8560-105f-11ec-a3ea-0800200c9a66-us-west1.db.astra.datastax.com\", \"port\": 98765, \"cql_port\": 34567, \"keyspace\": \"getvaxxed\", \"localDC\": \"us-west-2\", \"caCertLocation\": \"./ca.crt\", \"keyLocation\": \"./key\", \"certLocation\": \"./cert\", \"keyStoreLocation\": \"./identity.jks\", \"keyStorePassword\": \"Kga1OJ83EF2oBQYR5\", \"trustStoreLocation\": \"./trustStore.jks\", \"trustStorePassword\": \"n8F9ptJO3H7YRxTW1\", \"csvLocation\": \"./data\", \"pfxCertPassword\": \"9b3HgFChtY60m4nfJ\" } We will use this information to configure Astra DB as the data source in Tableplus. \u2705 Step 2: New Connection \u00b6 In Tableplus, create a new connection and select Cassandra as the target database. In the Host and Port fields, use the host and cql_port values in the config.json above. In the User and Password fields, use the client ID and client secret from the token you created in the Prerequisites section of this article. In the Keyspace field, use the keyspace values in the config.json above. Choose SSL VERIFY NONE for the SSL mode. For SSL keys, select the secure bundle files: key for Key (leave the password blank when prompted) cert for Cert ca.crt for CA Cert Here's an example of what the Cassandra Connection dialog box should look like: \u2705 Step 3: Final Test \u00b6 Connect to your Astra DB. If the connection was successful, you should be able to see all the tables on the left-hand side of the UI. Here's an example output: \ud83c\udfe0 Back to HOME","title":"\u2023 TablePlus"},{"location":"pages/data/explore/tableplus/#a-overview","text":"TablePlus is a modern, native tool with elegant UI that allows you to simultaneously manage multiple databases such as MySQL, PostgreSQL, SQLite, Microsoft SQL Server and more. \u2139\ufe0f Introduction to TablePlus \ud83d\udce5 TablePlus Download Link","title":"A - Overview"},{"location":"pages/data/explore/tableplus/#b-prerequisites","text":"Create an Astra Database Create an Astra Token Download your secure connect bundle ZIP This article assumes you have a running installation of Tableplus on your laptop or PC. It was written for the MacOS version but it should also work for the Windows version.","title":"B - Prerequisites"},{"location":"pages/data/explore/tableplus/#c-installation-and-setup","text":"Note: For simplicity, the secure connect bundle has been placed in /path/to/scb","title":"C - Installation and Setup"},{"location":"pages/data/explore/tableplus/#step-1-db-information","text":"On your laptop or PC where Tableplus is installed, unpack your secure bundle. For example: $ cd /path/to/scb $ unzip secure-connect-getvaxxed.zip Here is an example file listing after unpacking the bundle: / path/ to/ scb/ ca.crt cert cert.pfx config.json cqlshrc identity.jks key trustStore.jks Obtain information about your database from the config.json file. Here is an example: { \"host\": \"70bf8560-105f-11ec-a3ea-0800200c9a66-us-west1.db.astra.datastax.com\", \"port\": 98765, \"cql_port\": 34567, \"keyspace\": \"getvaxxed\", \"localDC\": \"us-west-2\", \"caCertLocation\": \"./ca.crt\", \"keyLocation\": \"./key\", \"certLocation\": \"./cert\", \"keyStoreLocation\": \"./identity.jks\", \"keyStorePassword\": \"Kga1OJ83EF2oBQYR5\", \"trustStoreLocation\": \"./trustStore.jks\", \"trustStorePassword\": \"n8F9ptJO3H7YRxTW1\", \"csvLocation\": \"./data\", \"pfxCertPassword\": \"9b3HgFChtY60m4nfJ\" } We will use this information to configure Astra DB as the data source in Tableplus.","title":"\u2705 Step 1: DB Information"},{"location":"pages/data/explore/tableplus/#step-2-new-connection","text":"In Tableplus, create a new connection and select Cassandra as the target database. In the Host and Port fields, use the host and cql_port values in the config.json above. In the User and Password fields, use the client ID and client secret from the token you created in the Prerequisites section of this article. In the Keyspace field, use the keyspace values in the config.json above. Choose SSL VERIFY NONE for the SSL mode. For SSL keys, select the secure bundle files: key for Key (leave the password blank when prompted) cert for Cert ca.crt for CA Cert Here's an example of what the Cassandra Connection dialog box should look like:","title":"\u2705 Step 2: New Connection"},{"location":"pages/data/explore/tableplus/#step-3-final-test","text":"Connect to your Astra DB. If the connection was successful, you should be able to see all the tables on the left-hand side of the UI. Here's an example output: \ud83c\udfe0 Back to HOME","title":"\u2705 Step 3: Final Test"},{"location":"pages/data/load/astra-data-loader/","text":"Work in progress","title":"\u2023 Astra Data Loader"},{"location":"pages/data/load/dsbulk/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 DSBulks Docs - Reference documentation \ud83d\udcd6 Datastax Docs - Reference Documentation A - Overview \u00b6 \ud83d\udcd8 What is DSBulk ? \u00b6 The DataStax Bulk Loader tool (DSBulk) is a unified tool for loading into and unloading from Cassandra-compatible storage engines, such as OSS Apache Cassandra\u00ae, DataStax Astra and DataStax Enterprise (DSE). Out of the box, DSBulk provides the ability to: Load (import) large amounts of data into the database efficiently and reliably; Unload (export) large amounts of data from the database efficiently and reliably; Count elements in a database table: how many rows in total, how many rows per replica and per token range, and how many rows in the top N largest partitions. # Load data dsbulk load <options> # Unload data dsbulk unload <options> # Count rows dsbulk count <options> Currently, CSV and Json formats are supported for both loading and unloading data. \ud83d\udcd8 Datastax Bulk Loader with Astra \u00b6 Use DataStax Bulk Loader (dsbulk) to load and unload data in CSV or JSON format with your DataStax Astra DB database efficiently and reliably. You can use dsbulk as a standalone tool to remotely connect to a cluster. The tool is not required to run locally on an instances, but can be used in this configuration. B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle This article was written for Datastax Bulk Loader version 1.8.0 . C - Installation \u00b6 \u2705 Step 1 : Download the archive and unzip locally curl -OL https://downloads.datastax.com/dsbulk/dsbulk-1.8.0.tar.gz \\ && tar xvzf dsbulk-1.8.0.tar.gz \\ && rm -f dsbulk-1.8.0.tar.gz it will take a few seconds (file is about 30M)... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 49 30.0M 49 14.8M 0 0 343k 0 0:01:29 0:00:44 0:00:45 244k D - Usage \u00b6 \ud83d\udcd8 Load Data \u00b6 Given a table CREATE TABLE better_reads . book_by_id ( id text PRIMARY KEY , author_id list < text > , author_names list < text > , book_description text , book_name text , cover_ids list < text > , published_date date ) A sample CSV could be: id|author_id|author_names|book_description|book_name|cover_ids|published_date 1234|[\"id1\",\"id2\",\"id3\"]|[\"name1\",\"name2\",\"name3\"]|this is a dsecription|Book name|[\"cover1\",\"cover2\"]|2022-02-02 Loaded with the following command: dsbulk load \\ -url book_by_id.csv \\ -c csv \\ -delim '|' \\ -k better_reads \\ -t book_by_id \\ --schema.allowMissingFields true \\ -u clientId \\ -p clientSecret \\ -b secureBundle.zip \ud83d\udcd8 Export Data \u00b6 Unloaded the same table with the following command: dsbulk unload \\ -k better_reads \\ -t book_by_id \\ -c csv \\ -u clientId \\ -p clientSecret \\ -b secureBundle.zip \\ > book_by_id_export.csv \ud83d\udcd8 Count Table Records \u00b6 Counted the rows in the table with the following command: dsbulk count \\ -k better_reads \\ -t book_by_id \\ -u clientId \\ -p clientSecret \\ -b secureBundle.zip Produces the following output: Operation directory: /local/dsbulk-1.8.0/logs/COUNT_20220223-213637-046128 total | failed | rows/s | p50ms | p99ms | p999ms 143,475 | 0 | 87,509 | 155.34 | 511.71 | 511.71 Operation COUNT_20220223-213637-046128 completed successfully in 1 second. 143475","title":"\u2023 DSBulk"},{"location":"pages/data/load/dsbulk/#a-overview","text":"","title":"A - Overview"},{"location":"pages/data/load/dsbulk/#what-is-dsbulk","text":"The DataStax Bulk Loader tool (DSBulk) is a unified tool for loading into and unloading from Cassandra-compatible storage engines, such as OSS Apache Cassandra\u00ae, DataStax Astra and DataStax Enterprise (DSE). Out of the box, DSBulk provides the ability to: Load (import) large amounts of data into the database efficiently and reliably; Unload (export) large amounts of data from the database efficiently and reliably; Count elements in a database table: how many rows in total, how many rows per replica and per token range, and how many rows in the top N largest partitions. # Load data dsbulk load <options> # Unload data dsbulk unload <options> # Count rows dsbulk count <options> Currently, CSV and Json formats are supported for both loading and unloading data.","title":"\ud83d\udcd8 What is DSBulk ?"},{"location":"pages/data/load/dsbulk/#datastax-bulk-loader-with-astra","text":"Use DataStax Bulk Loader (dsbulk) to load and unload data in CSV or JSON format with your DataStax Astra DB database efficiently and reliably. You can use dsbulk as a standalone tool to remotely connect to a cluster. The tool is not required to run locally on an instances, but can be used in this configuration.","title":"\ud83d\udcd8 Datastax Bulk Loader with Astra"},{"location":"pages/data/load/dsbulk/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle This article was written for Datastax Bulk Loader version 1.8.0 .","title":"B - Prerequisites"},{"location":"pages/data/load/dsbulk/#c-installation","text":"\u2705 Step 1 : Download the archive and unzip locally curl -OL https://downloads.datastax.com/dsbulk/dsbulk-1.8.0.tar.gz \\ && tar xvzf dsbulk-1.8.0.tar.gz \\ && rm -f dsbulk-1.8.0.tar.gz it will take a few seconds (file is about 30M)... % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 49 30.0M 49 14.8M 0 0 343k 0 0:01:29 0:00:44 0:00:45 244k","title":"C - Installation"},{"location":"pages/data/load/dsbulk/#d-usage","text":"","title":"D - Usage"},{"location":"pages/data/load/dsbulk/#load-data","text":"Given a table CREATE TABLE better_reads . book_by_id ( id text PRIMARY KEY , author_id list < text > , author_names list < text > , book_description text , book_name text , cover_ids list < text > , published_date date ) A sample CSV could be: id|author_id|author_names|book_description|book_name|cover_ids|published_date 1234|[\"id1\",\"id2\",\"id3\"]|[\"name1\",\"name2\",\"name3\"]|this is a dsecription|Book name|[\"cover1\",\"cover2\"]|2022-02-02 Loaded with the following command: dsbulk load \\ -url book_by_id.csv \\ -c csv \\ -delim '|' \\ -k better_reads \\ -t book_by_id \\ --schema.allowMissingFields true \\ -u clientId \\ -p clientSecret \\ -b secureBundle.zip","title":"\ud83d\udcd8 Load Data"},{"location":"pages/data/load/dsbulk/#export-data","text":"Unloaded the same table with the following command: dsbulk unload \\ -k better_reads \\ -t book_by_id \\ -c csv \\ -u clientId \\ -p clientSecret \\ -b secureBundle.zip \\ > book_by_id_export.csv","title":"\ud83d\udcd8 Export Data"},{"location":"pages/data/load/dsbulk/#count-table-records","text":"Counted the rows in the table with the following command: dsbulk count \\ -k better_reads \\ -t book_by_id \\ -u clientId \\ -p clientSecret \\ -b secureBundle.zip Produces the following output: Operation directory: /local/dsbulk-1.8.0/logs/COUNT_20220223-213637-046128 total | failed | rows/s | p50ms | p99ms | p999ms 143,475 | 0 | 87,509 | 155.34 | 511.71 | 511.71 Operation COUNT_20220223-213637-046128 completed successfully in 1 second. 143475","title":"\ud83d\udcd8 Count Table Records"},{"location":"pages/data/load/nosqlbench/","text":"\ud83d\udcd6 Reference Documentations and resources \ud83d\udcd6 NoSQLBench Docs - Reference documentation \ud83d\udcd6 Astra Docs - Reference Documentation A - Overview \u00b6 \ud83d\udcd8 What is NoSQLBench ? \u00b6 NoSQLBench is a powerful, state-of-the-art tool for emulating real application workloads and direct them to actual target data stores for reliable, reproducible benchmarking. NoSQLBench is extremely customizable, yet comes with many pre-defined workloads, ready for several types of distributed, NoSQL data systems. One of the target databases is Cassandra/Astra DB, supported out-of-the-box by NoSQLBench and complemented by some ready-made realistic workloads for benchmarking. At the heart of NoSQLBench are a few principles: ease-of-use, meaning that one can start using it without learning all layers of customizability; modularity in the design: building a new driver is comparatively easy; workloads are reproducible down to the individual statement (no \"actual randomness\" involved); reliable performance timing, i.e. care is taken on the client side to avoid unexpected JVM pauses. \ud83d\udcd8 NoSQLBench and Astra DB \u00b6 NoSQLBench uses the (CQL-based) Cassandra Java Drivers, which mean that it supports Astra DB natively with its drivers. The only care is in providing access to an Astra DB instance, which is done via command-line parameters. The only care is that, while running a benchmark against a generic Cassandra installation usually entails creation of a keyspace if it does not exist, when benchmarking Astra DB you should make sure the keyspace exists already (the keyspace name can be passed as a command-line parameter when launching NoSQLBench). B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle C - Installation \u00b6 The following installation instructions are taken from the official NoSQLBench documentation . Please refer to it for more details and updates. \u2705 Step 1 : Download the binaries Go to the releases page and download the latest version. The suggested option is to download the Linux binary ( nb ), but as an alternative the nb.jar version can also be used: here we assume the Linux binary is used, please see the NoSQLBench documentation for more on using the JAR. \u2705 Step 2 : Make executable and put in search path Once the file is downloaded, make it executable with chmod +x nb and put it (or make a symlink) somewhere in your system's search path, such as /home/${USER}/.local/bin/ . As a quick test, try the command nb --version . D - Usage \u00b6 Command \u00b6 If you already use NoSQLBench... then all you need to know is that invocations should include the following parameters to locate an Astra DB instance and authenticate to it: nb \\ [...] \\ username=CLIENT_ID \\ password=CLIENT_SECRET \\ secureconnectbundle=/PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace=KEYSPACE_NAME \\ [...] In the above, you should pass your Client ID and Client Secret as found in the Astra DB Token, and the path to the Secure Bundle zipfile you obtained earlier (see Prerequisites ). Please prepend ./ to the bundle path if it is a relative path. You may want to specify a keyspace, as seen in the sample command quoted here, because, as Astra DB does not support the CREATE KEYSPACE CQL command, it would be your responsibility to match the keyspace used in the benchmark with the name of an existing one. Please inspect the contents of your workload yaml file more closely for more details on the keyspace name used by default. Quick-start \u00b6 There is a comprehensive Getting Started page on NoSQLBench documentation, so here only a couple of sample full commands will be given. Please consult the full documentation for more options and configurations. Some of the ready-made workloads included with NoSQLBench are specific for benchmarking realistic usage patterns of Cassandra/Astra DB. A quick way to get started is to launch those workloads with the \"workload scenario\" syntax (where the 'scenario' specifies that you are targeting an Astra DB instance). \"cql-keyvalue\" workload The following will run the \"cql-keyvalue\" workload, specifically its \"astra\" scenario, on an Astra DB instance: nb cql-keyvalue astra \\ username = CLIENT_ID \\ password = CLIENT_SECRET \\ secureconnectbundle = /PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace = KEYSPACE_NAME Alternatively, if you are using the jar version of the tool, java -jar nb.jar cql-keyvalue astra \\ username = CLIENT_ID \\ password = CLIENT_SECRET \\ secureconnectbundle = /PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace = KEYSPACE_NAME This workload emulates usage of Astra DB/Cassandra as a simple key-value store, and does so by alternating \"random\" reads and writes to a single table. A preliminar \"rampup\" phase is run, consisting only of writes, and then the \"main\" phase takes place (this structure is a rather universal features of these benchmarks). (Note: most likely you may want to add further options, such as cyclerate , rampup-cycles , main-cycles or --progress console . See the NoSQLBench docs and inspect the workload yaml for more). The above command, as things progress, will produce an output similar to: cqlkeyvalue_astra_schema: 100.00%/Stopped (details: min=0 cycle=1 max=1) (last report) cqlkeyvalue_astra_rampup: 15.60%/Running (details: min=0 cycle=234 max=1500) cqlkeyvalue_astra_rampup: 32.40%/Running (details: min=0 cycle=486 max=1500) [...] cqlkeyvalue_astra_main: 96.67%/Running (details: min=0 cycle=1450 max=1500) cqlkeyvalue_astra_main: 100.00%/Running (details: min=0 cycle=1500 max=1500) (last report) followed by a final summary - reflected also in files in the logs/ directory, similar to: -- Gauges ---------------------------------------------------------------------- cqlkeyvalue_astra_main.cycles.config.burstrate value = 55.00000000000001 [...] cqlkeyvalue_astra_schema.tokenfiller count = 57086 mean rate = 941.29 calls/second 1-minute rate = 940.67 calls/second 5-minute rate = 939.91 calls/second 15-minute rate = 939.71 calls/second You may want to check that at this point a new table has been created, if it did not exist yet, in the keyspace. \"cql-iot\" workload Similar to the above for the \"cql-iot\" workload, aimed at emulating time-series-based reads and writes for a hypothetical IoT system: nb cql-iot astra \\ username = CLIENT_ID \\ password = CLIENT_SECRET \\ secureconnectbundle = /PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace = KEYSPACE_NAME Other workloads You can inspect all available workloads with: nb --list-scenarios and look for astra in the output example scenario invocations there. Moreover, you can design your own workload .","title":"\u2023 NoSQL Bench"},{"location":"pages/data/load/nosqlbench/#a-overview","text":"","title":"A - Overview"},{"location":"pages/data/load/nosqlbench/#what-is-nosqlbench","text":"NoSQLBench is a powerful, state-of-the-art tool for emulating real application workloads and direct them to actual target data stores for reliable, reproducible benchmarking. NoSQLBench is extremely customizable, yet comes with many pre-defined workloads, ready for several types of distributed, NoSQL data systems. One of the target databases is Cassandra/Astra DB, supported out-of-the-box by NoSQLBench and complemented by some ready-made realistic workloads for benchmarking. At the heart of NoSQLBench are a few principles: ease-of-use, meaning that one can start using it without learning all layers of customizability; modularity in the design: building a new driver is comparatively easy; workloads are reproducible down to the individual statement (no \"actual randomness\" involved); reliable performance timing, i.e. care is taken on the client side to avoid unexpected JVM pauses.","title":"\ud83d\udcd8 What is NoSQLBench ?"},{"location":"pages/data/load/nosqlbench/#nosqlbench-and-astra-db","text":"NoSQLBench uses the (CQL-based) Cassandra Java Drivers, which mean that it supports Astra DB natively with its drivers. The only care is in providing access to an Astra DB instance, which is done via command-line parameters. The only care is that, while running a benchmark against a generic Cassandra installation usually entails creation of a keyspace if it does not exist, when benchmarking Astra DB you should make sure the keyspace exists already (the keyspace name can be passed as a command-line parameter when launching NoSQLBench).","title":"\ud83d\udcd8 NoSQLBench and Astra DB"},{"location":"pages/data/load/nosqlbench/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle","title":"B - Prerequisites"},{"location":"pages/data/load/nosqlbench/#c-installation","text":"The following installation instructions are taken from the official NoSQLBench documentation . Please refer to it for more details and updates. \u2705 Step 1 : Download the binaries Go to the releases page and download the latest version. The suggested option is to download the Linux binary ( nb ), but as an alternative the nb.jar version can also be used: here we assume the Linux binary is used, please see the NoSQLBench documentation for more on using the JAR. \u2705 Step 2 : Make executable and put in search path Once the file is downloaded, make it executable with chmod +x nb and put it (or make a symlink) somewhere in your system's search path, such as /home/${USER}/.local/bin/ . As a quick test, try the command nb --version .","title":"C - Installation"},{"location":"pages/data/load/nosqlbench/#d-usage","text":"","title":"D - Usage"},{"location":"pages/data/load/nosqlbench/#command","text":"If you already use NoSQLBench... then all you need to know is that invocations should include the following parameters to locate an Astra DB instance and authenticate to it: nb \\ [...] \\ username=CLIENT_ID \\ password=CLIENT_SECRET \\ secureconnectbundle=/PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace=KEYSPACE_NAME \\ [...] In the above, you should pass your Client ID and Client Secret as found in the Astra DB Token, and the path to the Secure Bundle zipfile you obtained earlier (see Prerequisites ). Please prepend ./ to the bundle path if it is a relative path. You may want to specify a keyspace, as seen in the sample command quoted here, because, as Astra DB does not support the CREATE KEYSPACE CQL command, it would be your responsibility to match the keyspace used in the benchmark with the name of an existing one. Please inspect the contents of your workload yaml file more closely for more details on the keyspace name used by default.","title":"Command"},{"location":"pages/data/load/nosqlbench/#quick-start","text":"There is a comprehensive Getting Started page on NoSQLBench documentation, so here only a couple of sample full commands will be given. Please consult the full documentation for more options and configurations. Some of the ready-made workloads included with NoSQLBench are specific for benchmarking realistic usage patterns of Cassandra/Astra DB. A quick way to get started is to launch those workloads with the \"workload scenario\" syntax (where the 'scenario' specifies that you are targeting an Astra DB instance). \"cql-keyvalue\" workload The following will run the \"cql-keyvalue\" workload, specifically its \"astra\" scenario, on an Astra DB instance: nb cql-keyvalue astra \\ username = CLIENT_ID \\ password = CLIENT_SECRET \\ secureconnectbundle = /PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace = KEYSPACE_NAME Alternatively, if you are using the jar version of the tool, java -jar nb.jar cql-keyvalue astra \\ username = CLIENT_ID \\ password = CLIENT_SECRET \\ secureconnectbundle = /PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace = KEYSPACE_NAME This workload emulates usage of Astra DB/Cassandra as a simple key-value store, and does so by alternating \"random\" reads and writes to a single table. A preliminar \"rampup\" phase is run, consisting only of writes, and then the \"main\" phase takes place (this structure is a rather universal features of these benchmarks). (Note: most likely you may want to add further options, such as cyclerate , rampup-cycles , main-cycles or --progress console . See the NoSQLBench docs and inspect the workload yaml for more). The above command, as things progress, will produce an output similar to: cqlkeyvalue_astra_schema: 100.00%/Stopped (details: min=0 cycle=1 max=1) (last report) cqlkeyvalue_astra_rampup: 15.60%/Running (details: min=0 cycle=234 max=1500) cqlkeyvalue_astra_rampup: 32.40%/Running (details: min=0 cycle=486 max=1500) [...] cqlkeyvalue_astra_main: 96.67%/Running (details: min=0 cycle=1450 max=1500) cqlkeyvalue_astra_main: 100.00%/Running (details: min=0 cycle=1500 max=1500) (last report) followed by a final summary - reflected also in files in the logs/ directory, similar to: -- Gauges ---------------------------------------------------------------------- cqlkeyvalue_astra_main.cycles.config.burstrate value = 55.00000000000001 [...] cqlkeyvalue_astra_schema.tokenfiller count = 57086 mean rate = 941.29 calls/second 1-minute rate = 940.67 calls/second 5-minute rate = 939.91 calls/second 15-minute rate = 939.71 calls/second You may want to check that at this point a new table has been created, if it did not exist yet, in the keyspace. \"cql-iot\" workload Similar to the above for the \"cql-iot\" workload, aimed at emulating time-series-based reads and writes for a hypothetical IoT system: nb cql-iot astra \\ username = CLIENT_ID \\ password = CLIENT_SECRET \\ secureconnectbundle = /PATH/TO/SECURE-CONNECT-DB.zip \\ keyspace = KEYSPACE_NAME Other workloads You can inspect all available workloads with: nb --list-scenarios and look for astra in the output example scenario invocations there. Moreover, you can design your own workload .","title":"Quick-start"},{"location":"pages/develop/api-document/","text":"\ud83d\udcd6 Reference Documentations Document API reference Blogpost Design Improvements in 2021 QuickStart Overview \u00b6 The document Api is an abstraction on top of Apache Cassandra to allow document-oriented accesses. The algorithm used is called document shredding and optimized to limit tombstones on edits and deletes. You would work with JSON document with no validation. You can search on any field thanks to the support out of the box of the secondary index SAI Data is stored in collections , that would create a technical table under the hood not mean to be queried through CQL create table < collection_name > ( key text , p0 text , \u2026 p [ N ] text , bool_value boolean , txt_value text , dbl_value double , leaf text ) A json like {\"a\": { \"b\": 1 }, \"c\": 2} will be stored like | key | p0 | p1 | dbl_value | |:--------------:|:--------------:|:-----------|:-----------| | {docid} | a | b | 1 | | {docid} | c | null | 2 | This also work with arrays {\"a\": { \"b\": 1 }, \"c\": [{\"d\": 2}]} key p0 p1 p2 dbl_value {docid} a b null 1 {docid} c [0] d 2 \u26a0\ufe0f Limitations: As of today there are no aggregations nor sorting available in the Document Api. Working with Postman \u00b6 \ud83d\udce6. Prerequisites [ASTRA] \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6. Prerequisites [Development Environment] \u00b6 You should install Postman to import some collections we provided. \ud83d\udce6. Setup Postman \u00b6 Import the configuration File Astra_Document_Api_Configuration.json in postman. In the menu locate File > Import and drag the file in the box. Edit the values for you db: Parameter Name parameter value Description token AstraCS:.... When you generate a new token it is the third field. Make sure you add enough privileges to use the APis, Database Administrator is a good choice to develop db 00000000-0000-0000-0000-00000000000 Unique identifier of your DB, you find on the main dashboard region us-east1 region name, you find on the datanase dashboard namespace demo Namespaces are the same as keyspaces. They are created with the database or added from the database dashboard: How to create a keyspace ] collection person Collection name (like table) to store one type of documents. this is what it is look like Import the Document Api Collection Astra_Document_Api.json in postman. Same as before File > Menu That's it you have now access to a few dozens operations for namespace , collections and documents Working with CURL \u00b6 \ud83d\udce6. Prerequisites [ASTRA] \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6. Prerequisites [Development Environment] \u00b6 Working with CURL:You should have curl commands available either installing following steps here or curl --version Working with Swagger \u00b6","title":"Api document"},{"location":"pages/develop/api-document/#overview","text":"The document Api is an abstraction on top of Apache Cassandra to allow document-oriented accesses. The algorithm used is called document shredding and optimized to limit tombstones on edits and deletes. You would work with JSON document with no validation. You can search on any field thanks to the support out of the box of the secondary index SAI Data is stored in collections , that would create a technical table under the hood not mean to be queried through CQL create table < collection_name > ( key text , p0 text , \u2026 p [ N ] text , bool_value boolean , txt_value text , dbl_value double , leaf text ) A json like {\"a\": { \"b\": 1 }, \"c\": 2} will be stored like | key | p0 | p1 | dbl_value | |:--------------:|:--------------:|:-----------|:-----------| | {docid} | a | b | 1 | | {docid} | c | null | 2 | This also work with arrays {\"a\": { \"b\": 1 }, \"c\": [{\"d\": 2}]} key p0 p1 p2 dbl_value {docid} a b null 1 {docid} c [0] d 2 \u26a0\ufe0f Limitations: As of today there are no aggregations nor sorting available in the Document Api.","title":"Overview"},{"location":"pages/develop/api-document/#working-with-postman","text":"","title":"Working with Postman"},{"location":"pages/develop/api-document/#prerequisites-astra","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token","title":"\ud83d\udce6. Prerequisites [ASTRA]"},{"location":"pages/develop/api-document/#prerequisites-development-environment","text":"You should install Postman to import some collections we provided.","title":"\ud83d\udce6. Prerequisites [Development Environment]"},{"location":"pages/develop/api-document/#setup-postman","text":"Import the configuration File Astra_Document_Api_Configuration.json in postman. In the menu locate File > Import and drag the file in the box. Edit the values for you db: Parameter Name parameter value Description token AstraCS:.... When you generate a new token it is the third field. Make sure you add enough privileges to use the APis, Database Administrator is a good choice to develop db 00000000-0000-0000-0000-00000000000 Unique identifier of your DB, you find on the main dashboard region us-east1 region name, you find on the datanase dashboard namespace demo Namespaces are the same as keyspaces. They are created with the database or added from the database dashboard: How to create a keyspace ] collection person Collection name (like table) to store one type of documents. this is what it is look like Import the Document Api Collection Astra_Document_Api.json in postman. Same as before File > Menu That's it you have now access to a few dozens operations for namespace , collections and documents","title":"\ud83d\udce6. Setup Postman"},{"location":"pages/develop/api-document/#working-with-curl","text":"","title":"Working with CURL"},{"location":"pages/develop/api-document/#prerequisites-astra_1","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token","title":"\ud83d\udce6. Prerequisites [ASTRA]"},{"location":"pages/develop/api-document/#prerequisites-development-environment_1","text":"Working with CURL:You should have curl commands available either installing following steps here or curl --version","title":"\ud83d\udce6. Prerequisites [Development Environment]"},{"location":"pages/develop/api-document/#working-with-swagger","text":"","title":"Working with Swagger"},{"location":"pages/develop/framework-micronaut/","text":"This guide was built base on the Micronaut Cassandra Guide A - Overview \u00b6 Micronaut is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin, and Groovy. Micronaut is developed by the creators of the Grails framework and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails. For more information refer to the user guide The micronaut-cassandra module includes support for integrating Micronaut services with Cassandra. B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install a Java JDK 1.8+ and Apache Maven C - Configuration \u00b6 You can find a working sample here \u2705 Step 1: Create your project To create a micronaut project and CLI mn is provided. You can install it using sdkman as describe in the doc #Download SDKMan curl -s https://get.sdkman.io | bash #Setup SDKMan source \" $HOME /.sdkman/bin/sdkman-init.sh\" #Download Micronaut sdk install micronaut To generate a new project use mn create-app adding the feature cassandra mn create-app astra-todo-micronaut --features cassandra Notice that in your pom.xml you now have the following <dependency> <groupId> io.micronaut.cassandra </groupId> <artifactId> micronaut-cassandra </artifactId> <scope> compile </scope> </dependency> \u2705 Step 2: Setup your project All configuration of your project will be defined in application.yaml in src/main/resources . The module is clever enough to load all properties as if it was the driver configuration file . You can defined multiple profiles and each profile will be identified with key cassandra.${profile_name} . There is a default profile. In the following sample file we provide 2 profiles one for local and one for Astra. There is no extra code needed, simply configuration. cassandra : default : basic : session-keyspace : micronaut contact-points : - \"localhost:9042\" load-balancing-policy : local-datacenter : datacenter1 astra : basic : request : timeout : 5 seconds consistency : LOCAL_QUORUM page-size : 5000 session-keyspace : micronaut cloud : secure-connect-bundle : /Users/cedricklunven/Downloads/secure-connect-workshops.zip advanced : auth-provider : class : PlainTextAuthProvider username : token password : \"AstraCS:blahblahblah\" connection : init-query-timeout : 10 seconds set-keyspace-timeout : 10 seconds control-connection.timeout : 10 seconds \u2705 Step 3: Application Startup At startup you may want create the different tables needed for you application. In Astra you can only create keyspaces from the devops API or the user interface. . To enable content at startup simple implement ApplicationEventListener<ServiceReadyEvent> as shown below @Singleton public class TodoApplicationStartup implements ApplicationEventListener < ServiceReadyEvent > { /** Logger for the class. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoApplicationStartup . class ); @Property ( name = \"todo.cassandra.create_schema\" , defaultValue = \"false\" ) private boolean createTable ; @Inject private CqlSession cqlSession ; /** {@inheritDoc} */ @Override public void onApplicationEvent ( final ServiceReadyEvent event ) { LOGGER . info ( \"Startup Initialization\" ); if ( createTable ) { TodoServiceCassandraCql . createTableTodo ( cqlSession ); LOGGER . info ( \"+ Table TodoItems created if needed.\" ); } LOGGER . info ( \"[OK]\" ); } } \u2705 Step 4: Use Cassandra To use Cassandra you will reuse the CqlSession from the Datastax drivers. You can simply inject it where you needed as shown in this sample code @Validated @Controller ( \"/api/v1\" ) public class TodoRestController { /** Logger for our Client. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoRestController . class ); /** CqlSession initialized from application.yaml */ @Inject private CqlSession cqlSession ; Happy coding.","title":"Framework micronaut"},{"location":"pages/develop/framework-micronaut/#a-overview","text":"Micronaut is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin, and Groovy. Micronaut is developed by the creators of the Grails framework and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails. For more information refer to the user guide The micronaut-cassandra module includes support for integrating Micronaut services with Cassandra.","title":"A - Overview"},{"location":"pages/develop/framework-micronaut/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install a Java JDK 1.8+ and Apache Maven","title":"B - Prerequisites"},{"location":"pages/develop/framework-micronaut/#c-configuration","text":"You can find a working sample here \u2705 Step 1: Create your project To create a micronaut project and CLI mn is provided. You can install it using sdkman as describe in the doc #Download SDKMan curl -s https://get.sdkman.io | bash #Setup SDKMan source \" $HOME /.sdkman/bin/sdkman-init.sh\" #Download Micronaut sdk install micronaut To generate a new project use mn create-app adding the feature cassandra mn create-app astra-todo-micronaut --features cassandra Notice that in your pom.xml you now have the following <dependency> <groupId> io.micronaut.cassandra </groupId> <artifactId> micronaut-cassandra </artifactId> <scope> compile </scope> </dependency> \u2705 Step 2: Setup your project All configuration of your project will be defined in application.yaml in src/main/resources . The module is clever enough to load all properties as if it was the driver configuration file . You can defined multiple profiles and each profile will be identified with key cassandra.${profile_name} . There is a default profile. In the following sample file we provide 2 profiles one for local and one for Astra. There is no extra code needed, simply configuration. cassandra : default : basic : session-keyspace : micronaut contact-points : - \"localhost:9042\" load-balancing-policy : local-datacenter : datacenter1 astra : basic : request : timeout : 5 seconds consistency : LOCAL_QUORUM page-size : 5000 session-keyspace : micronaut cloud : secure-connect-bundle : /Users/cedricklunven/Downloads/secure-connect-workshops.zip advanced : auth-provider : class : PlainTextAuthProvider username : token password : \"AstraCS:blahblahblah\" connection : init-query-timeout : 10 seconds set-keyspace-timeout : 10 seconds control-connection.timeout : 10 seconds \u2705 Step 3: Application Startup At startup you may want create the different tables needed for you application. In Astra you can only create keyspaces from the devops API or the user interface. . To enable content at startup simple implement ApplicationEventListener<ServiceReadyEvent> as shown below @Singleton public class TodoApplicationStartup implements ApplicationEventListener < ServiceReadyEvent > { /** Logger for the class. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoApplicationStartup . class ); @Property ( name = \"todo.cassandra.create_schema\" , defaultValue = \"false\" ) private boolean createTable ; @Inject private CqlSession cqlSession ; /** {@inheritDoc} */ @Override public void onApplicationEvent ( final ServiceReadyEvent event ) { LOGGER . info ( \"Startup Initialization\" ); if ( createTable ) { TodoServiceCassandraCql . createTableTodo ( cqlSession ); LOGGER . info ( \"+ Table TodoItems created if needed.\" ); } LOGGER . info ( \"[OK]\" ); } } \u2705 Step 4: Use Cassandra To use Cassandra you will reuse the CqlSession from the Datastax drivers. You can simply inject it where you needed as shown in this sample code @Validated @Controller ( \"/api/v1\" ) public class TodoRestController { /** Logger for our Client. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoRestController . class ); /** CqlSession initialized from application.yaml */ @Inject private CqlSession cqlSession ; Happy coding.","title":"C - Configuration"},{"location":"pages/develop/framework-quarkus/","text":"Quarkus Documentation Quarkus Workshop Todo Application Quarkus","title":"Framework quarkus"},{"location":"pages/develop/framework-spring/","text":"Working with Spring \u00b6 Spring makes programming Java quicker, easier, and safer for everybody. Spring\u2019s focus on speed, simplicity, and productivity has made it the world's most popular Java framework.. To get more information regarding the framework visit the reference Spring.io . Spring applications are packaged as standalone using Spring Boot . To add capabilities to applications multiple starters are provided by Spring. In the current page we will details which are the starters needed to interact Astra interfaces. Datastax team also implemented a dedicated astra-spring-boot-starter to help you with the boiler plate code. Astra Spring Boot Starter \u00b6 \u2139\ufe0f Overview \u00b6 The Astra Spring Boot Starter once imported in a Spring Boot application, will configure both Astra SDK and Spring Data Cassandra to work with AstraDB. Configuration keys are read in application.yaml like any spring applications with a dedicated prefix astra . The starter will initialize any beans you would need ( AstraClient , CqlSession , StargateClient ) to use all interfaces exposes by Astra. Not all are activated by default, you want to initialize only what you need. \ud83d\udce6. Prerequisites [ASTRA] \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6. Prerequisites [Development Environment] \u00b6 You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6. Setup Project \u00b6 Create your project with Spring Initializr . Dependencies needed are web and data-cassandra but we did the work for you if you click the template link Property Value Property Value groupId com.datastax.tutorial package com.datastax.tutorial artifactId sdk-quickstart-spring description Sample Spring App name sdk-quickstart-spring dependencies Spring Web and Spring Data for Cassandra packaging JAR Java Version 8 or 11 - Import the application in your favorite IDE but do not start the application immediately. - Add the latest version of starter as a dependency in `pom.xml` [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/) of `astra-spring-boot-starter` in the project. <dependency> <groupId> com.datastax.astra </groupId> <artifactId> astra-spring-boot-starter </artifactId> <version> 0.3.0 </version> </dependency> - Change the main class with the following code, we are leveraging on the unique `AstraClient` to interact with multiple interfaces. @RestController @SpringBootApplication public class SdkQuickstartSpringApplication { public static void main ( String [] args ) { SpringApplication . run ( SdkQuickstartSpringApplication . class , args ); } // Provided by the Starter @Autowired private AstraClient astraClient ; // Spring Data using the CqlSession initialized by the starter @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/api/devops/organizationid\" ) public String showOrganizationId () { return astraClient . apiDevopsOrganizations (). organizationId (); } @GetMapping ( \"/api/spring-data/datacenter\" ) public String showDatacenterNameWithSpringData () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } @GetMapping ( \"/api/cql/datacenter\" ) public String showDatacenterNameWithSpringData () { return astraClient . cqlSession () . execute ( \"SELECT data_center FROM system.local\" ) . one (). getString ( \"data_center\" ); } } - Rename `src/main/resources/application.properties` to `src/main/resources/application.yaml`. This step eases the configuration with hierarchical keys. Populate `application.yaml` with the following content and replace the values with expected values (how to retrieve the values are explained in the [Quickstart Astra](https://github.com/datastax/astra-sdk-java/wiki/Astra-SDK-Quickstart) astra : # Allow usage of devops and Stargate apis api : application-token : <your_token> database-id : <your_database_id> database-region : <your_database_region> # Connectivity to Cassandra cql : enabled : true download-scb : enabled : true driver-config : basic : session-keyspace : <your_keyspace> - Start the application mvn clean install spring-boot:run - Access the resources we created - Get your Organization ID: http://localhost:8080/api/devops/organizationid - Get your Datacenter Name (Spring-data): http://localhost:8080/api/spring-data/datacenter - Get your Datacenter Name (cql): http://localhost:8080/api/cql/datacenter [![dl](https://dabuttonfactory.com/button.png?t=Download+Project&f=Open+Sans-Bold&ts=14&tc=fff&hp=15&vp=15&w=180&h=50&c=11&bgt=pyramid&bgc=666&ebgc=000&bs=1&bc=444)](https://github.com/DataStax-Examples/astra-samples-java/archive/refs/heads/main.zip) ## 5. Spring Data Cassandra As describe in the [Spring documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.choose-style), there are multiple ways to interact with Cassandra. In this tutorial we will show you how to use all of them - **Repository Abstraction** lets you create repository declarations in your data access layer. The goal of Spring Data\u2019s repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores. - **`CassandraTemplate` wraps a `CqlTemplate`** to provide query result-to-object mapping and the use of SELECT, INSERT, UPDATE, and DELETE methods instead of writing CQL statements. This approach provides better documentation and ease of use. **\u2139\ufe0f Connecting Spring Data Cassandra to Astra** Spring Data Cassandra leverages on a `CqlSession` bean, all the time. To build the `CqlSession` there area again multiple ways described in the [documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.connectors) from custom code to `AbstractCassandraConfiguration`. **FORGET ABOUT IT.** Astra Spring Boot Starter creates the `CqlSession` bean for you using the keys previously listed as such you do not need to use configuration keys like `spring.data.cassandra` (_or very very few for special behaviour_) #### \u2705 Step 5a. Spring Data Cassandra Connectivity This one is straight forward. Remove the `exclude` in `@SpringBootApplication` @SpringBootApplication You can restart the application, spring data is connected to Astra. #### \u2705 Step 5b. Working with `CassandraRepository ` - Create a bean `Todos` in the same package `com.datastax.tutorial` @Table public class Todos { @PrimaryKey @CassandraType ( type = Name . UUID ) private UUID uid = UUID . randomUUID (); private String title ; private boolean completed = false ; public Todos () {} public Todos ( String title ) { this . title = title ; } //_getters and setters have been omitted here - Create an **interface** `TodosRepository` in the same package `com.datastax.tutorial` package com.datastax.tutorial ; import org.springframework.data.cassandra.repository.CassandraRepository ; public interface TodosRepository extends CassandraRepository < Todos , String > {} - Edit the `QuickStartSpring` to add the following: @Autowired private TodosRepository todoRepository ; @PostConstruct public void insertTodos () { todoRepository . save ( new Todos ( \"Create Spring Project\" )); todoRepository . save ( new Todos ( \"Setup Astra Starter\" )); todoRepository . save ( new Todos ( \"Setup Spring Starter\" )); } @GetMapping ( \"/todos\" ) public List < Todos > todos () { return todoRepository . findAll ( CassandraPageRequest . first ( 10 )). toList (); } - Finally tells Spring Data to create for us the tables with configuration. (not for CqlSession, only for this). In `application.yaml` add the following: spring : data : cassandra : schema-action : CREATE_IF_NOT_EXISTS - You can restart your application and access [http://localhost:8080/todos](http://localhost:8080/todos) [ { \"uid\" : \"83d7a60d-1f24-42c5-aa16-9275f36dc312\" , \"title\" : \"Setup Spring Starter\" , \"completed\" : false }, { \"uid\" : \"95e8a502-786d-4dd2-983a-b451a12877fe\" , \"title\" : \"Setup Astra Starter\" , \"completed\" : false }, { \"uid\" : \"44da79c3-73a6-46d0-84cb-3afa2a96d99e\" , \"title\" : \"Create Spring Project\" , \"completed\" : false } ] _\u2139\ufe0f Note: Each time you restart the application you will get 3 new tasks as the primary is an generated UUID._ #### \u2705 Step 5c. Working with `CqlTemplate` and `CassandraTemplate` `CassandraTemplate` is the bean initialized by Spring-Data. It embeds the `CqlTemplate` = `CqlOperations`. - Add the following to your main class @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/datacenter\" ) public String datacenter () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } - You can restart your application and access [http://localhost:8080/datacenter](http://localhost:8080/datacenter) ## Spring Data Cassandra ### Overview - Spring data - Spring data cassandra - Leveraging java drivers - 10 pitfalls of Spring Data Cassandra - [Guide](https://spring.io/guides/gs/accessing-data-cassandra/) TODO ### Spring Boot 1x and Spring Data 2x - Working with 3.x driver - 3.8 is required - how to enforce version - compatibility table TODO - https://github.com/mborges-pivotal/astra-springboot154 ### Spring Boot 2x and Spring Data 3x (recommended) - Working with 4.x drivers - CqlSession Customizer - Create your own Cql Session TODO ## Spring and Rest Apis ### Spring Web (Rest Template) TODO ### Spring Webflux (Webclient) TODO ## Spring Cloud and Astra TODO ## Spring Batch and Astra TODO","title":"Framework spring"},{"location":"pages/develop/framework-spring/#working-with-spring","text":"Spring makes programming Java quicker, easier, and safer for everybody. Spring\u2019s focus on speed, simplicity, and productivity has made it the world's most popular Java framework.. To get more information regarding the framework visit the reference Spring.io . Spring applications are packaged as standalone using Spring Boot . To add capabilities to applications multiple starters are provided by Spring. In the current page we will details which are the starters needed to interact Astra interfaces. Datastax team also implemented a dedicated astra-spring-boot-starter to help you with the boiler plate code.","title":"Working with Spring"},{"location":"pages/develop/framework-spring/#astra-spring-boot-starter","text":"","title":"Astra Spring Boot Starter"},{"location":"pages/develop/framework-spring/#i-overview","text":"The Astra Spring Boot Starter once imported in a Spring Boot application, will configure both Astra SDK and Spring Data Cassandra to work with AstraDB. Configuration keys are read in application.yaml like any spring applications with a dedicated prefix astra . The starter will initialize any beans you would need ( AstraClient , CqlSession , StargateClient ) to use all interfaces exposes by Astra. Not all are activated by default, you want to initialize only what you need.","title":"\u2139\ufe0f Overview"},{"location":"pages/develop/framework-spring/#prerequisites-astra","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token","title":"\ud83d\udce6. Prerequisites [ASTRA]"},{"location":"pages/develop/framework-spring/#prerequisites-development-environment","text":"You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version","title":"\ud83d\udce6. Prerequisites [Development Environment]"},{"location":"pages/develop/framework-spring/#setup-project","text":"Create your project with Spring Initializr . Dependencies needed are web and data-cassandra but we did the work for you if you click the template link Property Value Property Value groupId com.datastax.tutorial package com.datastax.tutorial artifactId sdk-quickstart-spring description Sample Spring App name sdk-quickstart-spring dependencies Spring Web and Spring Data for Cassandra packaging JAR Java Version 8 or 11 - Import the application in your favorite IDE but do not start the application immediately. - Add the latest version of starter as a dependency in `pom.xml` [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/) of `astra-spring-boot-starter` in the project. <dependency> <groupId> com.datastax.astra </groupId> <artifactId> astra-spring-boot-starter </artifactId> <version> 0.3.0 </version> </dependency> - Change the main class with the following code, we are leveraging on the unique `AstraClient` to interact with multiple interfaces. @RestController @SpringBootApplication public class SdkQuickstartSpringApplication { public static void main ( String [] args ) { SpringApplication . run ( SdkQuickstartSpringApplication . class , args ); } // Provided by the Starter @Autowired private AstraClient astraClient ; // Spring Data using the CqlSession initialized by the starter @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/api/devops/organizationid\" ) public String showOrganizationId () { return astraClient . apiDevopsOrganizations (). organizationId (); } @GetMapping ( \"/api/spring-data/datacenter\" ) public String showDatacenterNameWithSpringData () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } @GetMapping ( \"/api/cql/datacenter\" ) public String showDatacenterNameWithSpringData () { return astraClient . cqlSession () . execute ( \"SELECT data_center FROM system.local\" ) . one (). getString ( \"data_center\" ); } } - Rename `src/main/resources/application.properties` to `src/main/resources/application.yaml`. This step eases the configuration with hierarchical keys. Populate `application.yaml` with the following content and replace the values with expected values (how to retrieve the values are explained in the [Quickstart Astra](https://github.com/datastax/astra-sdk-java/wiki/Astra-SDK-Quickstart) astra : # Allow usage of devops and Stargate apis api : application-token : <your_token> database-id : <your_database_id> database-region : <your_database_region> # Connectivity to Cassandra cql : enabled : true download-scb : enabled : true driver-config : basic : session-keyspace : <your_keyspace> - Start the application mvn clean install spring-boot:run - Access the resources we created - Get your Organization ID: http://localhost:8080/api/devops/organizationid - Get your Datacenter Name (Spring-data): http://localhost:8080/api/spring-data/datacenter - Get your Datacenter Name (cql): http://localhost:8080/api/cql/datacenter [![dl](https://dabuttonfactory.com/button.png?t=Download+Project&f=Open+Sans-Bold&ts=14&tc=fff&hp=15&vp=15&w=180&h=50&c=11&bgt=pyramid&bgc=666&ebgc=000&bs=1&bc=444)](https://github.com/DataStax-Examples/astra-samples-java/archive/refs/heads/main.zip) ## 5. Spring Data Cassandra As describe in the [Spring documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.choose-style), there are multiple ways to interact with Cassandra. In this tutorial we will show you how to use all of them - **Repository Abstraction** lets you create repository declarations in your data access layer. The goal of Spring Data\u2019s repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores. - **`CassandraTemplate` wraps a `CqlTemplate`** to provide query result-to-object mapping and the use of SELECT, INSERT, UPDATE, and DELETE methods instead of writing CQL statements. This approach provides better documentation and ease of use. **\u2139\ufe0f Connecting Spring Data Cassandra to Astra** Spring Data Cassandra leverages on a `CqlSession` bean, all the time. To build the `CqlSession` there area again multiple ways described in the [documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.connectors) from custom code to `AbstractCassandraConfiguration`. **FORGET ABOUT IT.** Astra Spring Boot Starter creates the `CqlSession` bean for you using the keys previously listed as such you do not need to use configuration keys like `spring.data.cassandra` (_or very very few for special behaviour_) #### \u2705 Step 5a. Spring Data Cassandra Connectivity This one is straight forward. Remove the `exclude` in `@SpringBootApplication` @SpringBootApplication You can restart the application, spring data is connected to Astra. #### \u2705 Step 5b. Working with `CassandraRepository ` - Create a bean `Todos` in the same package `com.datastax.tutorial` @Table public class Todos { @PrimaryKey @CassandraType ( type = Name . UUID ) private UUID uid = UUID . randomUUID (); private String title ; private boolean completed = false ; public Todos () {} public Todos ( String title ) { this . title = title ; } //_getters and setters have been omitted here - Create an **interface** `TodosRepository` in the same package `com.datastax.tutorial` package com.datastax.tutorial ; import org.springframework.data.cassandra.repository.CassandraRepository ; public interface TodosRepository extends CassandraRepository < Todos , String > {} - Edit the `QuickStartSpring` to add the following: @Autowired private TodosRepository todoRepository ; @PostConstruct public void insertTodos () { todoRepository . save ( new Todos ( \"Create Spring Project\" )); todoRepository . save ( new Todos ( \"Setup Astra Starter\" )); todoRepository . save ( new Todos ( \"Setup Spring Starter\" )); } @GetMapping ( \"/todos\" ) public List < Todos > todos () { return todoRepository . findAll ( CassandraPageRequest . first ( 10 )). toList (); } - Finally tells Spring Data to create for us the tables with configuration. (not for CqlSession, only for this). In `application.yaml` add the following: spring : data : cassandra : schema-action : CREATE_IF_NOT_EXISTS - You can restart your application and access [http://localhost:8080/todos](http://localhost:8080/todos) [ { \"uid\" : \"83d7a60d-1f24-42c5-aa16-9275f36dc312\" , \"title\" : \"Setup Spring Starter\" , \"completed\" : false }, { \"uid\" : \"95e8a502-786d-4dd2-983a-b451a12877fe\" , \"title\" : \"Setup Astra Starter\" , \"completed\" : false }, { \"uid\" : \"44da79c3-73a6-46d0-84cb-3afa2a96d99e\" , \"title\" : \"Create Spring Project\" , \"completed\" : false } ] _\u2139\ufe0f Note: Each time you restart the application you will get 3 new tasks as the primary is an generated UUID._ #### \u2705 Step 5c. Working with `CqlTemplate` and `CassandraTemplate` `CassandraTemplate` is the bean initialized by Spring-Data. It embeds the `CqlTemplate` = `CqlOperations`. - Add the following to your main class @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/datacenter\" ) public String datacenter () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } - You can restart your application and access [http://localhost:8080/datacenter](http://localhost:8080/datacenter) ## Spring Data Cassandra ### Overview - Spring data - Spring data cassandra - Leveraging java drivers - 10 pitfalls of Spring Data Cassandra - [Guide](https://spring.io/guides/gs/accessing-data-cassandra/) TODO ### Spring Boot 1x and Spring Data 2x - Working with 3.x driver - 3.8 is required - how to enforce version - compatibility table TODO - https://github.com/mborges-pivotal/astra-springboot154 ### Spring Boot 2x and Spring Data 3x (recommended) - Working with 4.x drivers - CqlSession Customizer - Create your own Cql Session TODO ## Spring and Rest Apis ### Spring Web (Rest Template) TODO ### Spring Webflux (Webclient) TODO ## Spring Cloud and Astra TODO ## Spring Batch and Astra TODO","title":"\ud83d\udce6. Setup Project"},{"location":"pages/develop/language-csharp/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Language csharp"},{"location":"pages/develop/language-csharp/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-csharp/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"pages/develop/language-csharp/#3-cql","text":"","title":"3. CQL"},{"location":"pages/develop/language-csharp/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"pages/develop/language-csharp/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"pages/develop/language-csharp/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"pages/develop/language-csharp/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"pages/develop/language-csharp/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"pages/develop/language-csharp/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"pages/develop/language-csharp/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"pages/develop/language-csharp/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"pages/develop/language-csharp/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-csharp/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-csharp/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-csharp/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-csharp/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-csharp/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-csharp/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-csharp/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-csharp/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-csharp/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-csharp/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-csharp/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-csharp/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"pages/develop/language-go/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6 package main import ( \"archive/zip\" \"context\" \"crypto/tls\" \"crypto/x509\" \"encoding/json\" \"fmt\" \"io\" \"io/ioutil\" \"os\" \"path/filepath\" \"strconv\" \"strings\" \"github.com/gocql/gocql\" ) type Config struct { Host string `json:\"host\"` Port int `json:\"cql_port\"` } func main () { var clientID = os . Getenv ( \"ASTRA_CLIENT_ID\" ) var clientSecret = os . Getenv ( \"ASTRA_CLIENT_SECRET\" ) var secureConnectBundle = os . Getenv ( \"SECURE_CONNECT_BUNDLE\" ) if clientID == \"\" || clientSecret == \"\" || secureConnectBundle == \"\" { panic ( \"missing required environment variables\" ) } secureBundleDir := os . TempDir () fmt . Printf ( \"extracting secure connect bundle [%s] to [%s]\\n\" , secureConnectBundle , secureBundleDir ) if err := Unzip ( secureConnectBundle , secureBundleDir ); err != nil { panic ( err ) } configPath , _ := filepath . Abs ( secureBundleDir + \"/config.json\" ) fmt . Println ( \"config: \" + configPath ) configData , _ := ioutil . ReadFile ( configPath ) var cfg Config json . Unmarshal ( configData , & cfg ) cluster := gocql . NewCluster ( cfg . Host ) cluster . Authenticator = gocql . PasswordAuthenticator { Username : clientID , Password : clientSecret , } host := cfg . Host + \":\" + strconv . Itoa ( cfg . Port ) cluster . Hosts = [] string { host } fmt . Println ( \"connecting to: \" + host ) certPath , _ := filepath . Abs ( secureBundleDir + \"/cert\" ) keyPath , _ := filepath . Abs ( secureBundleDir + \"/key\" ) caPath , _ := filepath . Abs ( secureBundleDir + \"/ca.crt\" ) cert , _ := tls . LoadX509KeyPair ( certPath , keyPath ) caCert , _ := ioutil . ReadFile ( caPath ) caCertPool := x509 . NewCertPool () caCertPool . AppendCertsFromPEM ( caCert ) cluster . SslOpts = & gocql . SslOptions { Config : & tls . Config { Certificates : [] tls . Certificate { cert }, ServerName : cfg . Host , RootCAs : caCertPool , }, } session , err := cluster . CreateSession () if err != nil { panic ( err ) } fmt . Printf ( \"session established: %v\\n\" , session ) var releaseVersion string if err := session . Query ( \"select release_version from system.local\" ). WithContext ( context . Background ()). Consistency ( gocql . One ). Scan ( & releaseVersion ); err != nil { panic ( err ) } fmt . Printf ( \"release version: %s\\n\" , releaseVersion ) } func Unzip ( src , dest string ) error { r , err := zip . OpenReader ( src ) if err != nil { return err } defer func () { if err := r . Close (); err != nil { panic ( err ) } }() os . MkdirAll ( dest , 0755 ) // Closure to address file descriptors issue with all the deferred .Close() methods extractAndWriteFile := func ( f * zip . File ) error { rc , err := f . Open () if err != nil { return err } defer func () { if err := rc . Close (); err != nil { panic ( err ) } }() path := filepath . Join ( dest , f . Name ) // Check for ZipSlip (Directory traversal) if ! strings . HasPrefix ( path , filepath . Clean ( dest ) + string ( os . PathSeparator )) { return fmt . Errorf ( \"illegal file path: %s\" , path ) } if f . FileInfo (). IsDir () { os . MkdirAll ( path , f . Mode ()) } else { os . MkdirAll ( filepath . Dir ( path ), f . Mode ()) f , err := os . OpenFile ( path , os . O_WRONLY | os . O_CREATE | os . O_TRUNC , f . Mode ()) if err != nil { return err } defer func () { if err := f . Close (); err != nil { panic ( err ) } }() _ , err = io . Copy ( f , rc ) if err != nil { return err } } return nil } for _ , f := range r . File { err := extractAndWriteFile ( f ) if err != nil { return err } } return nil }","title":"Language go"},{"location":"pages/develop/language-go/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-go/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"pages/develop/language-go/#3-cql","text":"","title":"3. CQL"},{"location":"pages/develop/language-go/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"pages/develop/language-go/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"pages/develop/language-go/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"pages/develop/language-go/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"pages/develop/language-go/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"pages/develop/language-go/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"pages/develop/language-go/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"pages/develop/language-go/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"pages/develop/language-go/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-go/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-go/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-go/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-go/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-go/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-go/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-go/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-go/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-go/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-go/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-go/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-go/#12-devops-api-streaming","text":"package main import ( \"archive/zip\" \"context\" \"crypto/tls\" \"crypto/x509\" \"encoding/json\" \"fmt\" \"io\" \"io/ioutil\" \"os\" \"path/filepath\" \"strconv\" \"strings\" \"github.com/gocql/gocql\" ) type Config struct { Host string `json:\"host\"` Port int `json:\"cql_port\"` } func main () { var clientID = os . Getenv ( \"ASTRA_CLIENT_ID\" ) var clientSecret = os . Getenv ( \"ASTRA_CLIENT_SECRET\" ) var secureConnectBundle = os . Getenv ( \"SECURE_CONNECT_BUNDLE\" ) if clientID == \"\" || clientSecret == \"\" || secureConnectBundle == \"\" { panic ( \"missing required environment variables\" ) } secureBundleDir := os . TempDir () fmt . Printf ( \"extracting secure connect bundle [%s] to [%s]\\n\" , secureConnectBundle , secureBundleDir ) if err := Unzip ( secureConnectBundle , secureBundleDir ); err != nil { panic ( err ) } configPath , _ := filepath . Abs ( secureBundleDir + \"/config.json\" ) fmt . Println ( \"config: \" + configPath ) configData , _ := ioutil . ReadFile ( configPath ) var cfg Config json . Unmarshal ( configData , & cfg ) cluster := gocql . NewCluster ( cfg . Host ) cluster . Authenticator = gocql . PasswordAuthenticator { Username : clientID , Password : clientSecret , } host := cfg . Host + \":\" + strconv . Itoa ( cfg . Port ) cluster . Hosts = [] string { host } fmt . Println ( \"connecting to: \" + host ) certPath , _ := filepath . Abs ( secureBundleDir + \"/cert\" ) keyPath , _ := filepath . Abs ( secureBundleDir + \"/key\" ) caPath , _ := filepath . Abs ( secureBundleDir + \"/ca.crt\" ) cert , _ := tls . LoadX509KeyPair ( certPath , keyPath ) caCert , _ := ioutil . ReadFile ( caPath ) caCertPool := x509 . NewCertPool () caCertPool . AppendCertsFromPEM ( caCert ) cluster . SslOpts = & gocql . SslOptions { Config : & tls . Config { Certificates : [] tls . Certificate { cert }, ServerName : cfg . Host , RootCAs : caCertPool , }, } session , err := cluster . CreateSession () if err != nil { panic ( err ) } fmt . Printf ( \"session established: %v\\n\" , session ) var releaseVersion string if err := session . Query ( \"select release_version from system.local\" ). WithContext ( context . Background ()). Consistency ( gocql . One ). Scan ( & releaseVersion ); err != nil { panic ( err ) } fmt . Printf ( \"release version: %s\\n\" , releaseVersion ) } func Unzip ( src , dest string ) error { r , err := zip . OpenReader ( src ) if err != nil { return err } defer func () { if err := r . Close (); err != nil { panic ( err ) } }() os . MkdirAll ( dest , 0755 ) // Closure to address file descriptors issue with all the deferred .Close() methods extractAndWriteFile := func ( f * zip . File ) error { rc , err := f . Open () if err != nil { return err } defer func () { if err := rc . Close (); err != nil { panic ( err ) } }() path := filepath . Join ( dest , f . Name ) // Check for ZipSlip (Directory traversal) if ! strings . HasPrefix ( path , filepath . Clean ( dest ) + string ( os . PathSeparator )) { return fmt . Errorf ( \"illegal file path: %s\" , path ) } if f . FileInfo (). IsDir () { os . MkdirAll ( path , f . Mode ()) } else { os . MkdirAll ( filepath . Dir ( path ), f . Mode ()) f , err := os . OpenFile ( path , os . O_WRONLY | os . O_CREATE | os . O_TRUNC , f . Mode ()) if err != nil { return err } defer func () { if err := f . Close (); err != nil { panic ( err ) } }() _ , err = io . Copy ( f , rc ) if err != nil { return err } } return nil } for _ , f := range r . File { err := extractAndWriteFile ( f ) if err != nil { return err } } return nil }","title":"12 Devops API Streaming"},{"location":"pages/develop/language-java/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces list \u00b6 Pick the interface you want to use from the list: Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage users and roles Astra Core Manage Databases Astra Core Manage Streaming 3. CQL Cassandra Drivers \u00b6 Drivers reference documentation can be found HERE , this page is focused on connectivity with Astra DB only. 3.1 Drivers version 4.x \u00b6 Version 4.x is the recommended version Version 4 is major redesign of the internal architecture. As such, it is not binary compatible with previous versions. However, most of the concepts remain unchanged, and the new API will look very familiar to 2.x and 3.x users. If you want to know more the rational is explained in this blogpost . If you are still using 3.x and want to migrate you can have a look the upgrade guide but you can also keep using 3.x as described below \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Any version 4.x should be compatible with Astra. Update your pom.xml file with the latest version of the 4.x libraries: <!-- (REQUIRED) --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-core </artifactId> <version> ${latest4x} </version> </dependency> <!-- OPTIONAL --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-query-builder </artifactId> <version> ${latest4x} </version> </dependency> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-mapper-runtime </artifactId> <version> ${latest4x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver4x ) import java.nio.file.Paths ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.oss.driver.api.core.CqlSession ; public class AstraDriver4x { static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver4x . class ); try ( CqlSession cqlSession = CqlSession . builder () . withCloudSecureConnectBundle ( Paths . get ( ASTRA_ZIP_FILE )) . withAuthCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . withKeyspace ( ASTRA_KEYSPACE ) . build ()) { logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , cqlSession . getKeyspace (). get ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 4.x Multiple Standalone Classes using driver 4.x Spring PetClinic in Reactive and specially the mapper \u23eb Back to top 3.2 Drivers version 3.x \u00b6 \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Please note that version 3.8+ is required to connect to Astra. Update your pom.xml file with the latest version of the 3.x libraries: <dependency> <groupId> com.datastax.cassandra </groupId> <artifactId> cassandra-driver-core </artifactId> <version> ${latest3x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver3x ) import java.io.File ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.driver.core.Cluster ; import com.datastax.driver.core.Session ; public class AstraDriver3x { // Define inputs static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver3x . class ); try ( Cluster cluster = Cluster . builder () . withCloudSecureConnectBundle ( new File ( ASTRA_ZIP_FILE )) . withCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . build () ) { Session session = cluster . connect ( ASTRA_KEYSPACE ); logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , session . getLoggedKeyspace ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 3.x Multiple Standalone Classes using driver 3.x \u23eb Back to top 3.3 Astra SDK \u00b6 TODO 4. Stargate REST Api \u00b6 \u2139\ufe0f Overview Stargate is a data gateway (Proxy) on top of Apache Cassandra exposing new interface to ease the integration. It is a way to create stateless components (1) and ease the integration with 4 different HTTP Apis (rest, doc, graphQL, gRPC). In this chapter we will cover integration with REST Apis also called DATA in the swagger specifications. To know more regarding this interface specially you can have a look to dedicated section of the wiki or reference Stargate Rest Api Quick Start Guide . \u26a0\ufe0f We recommend to use version V2 ( with V2 in the URL ) as it covers more features and the V1 would be deprecated sooner. \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project You simple need an HTTP Client to use the Rest API. There are a lot in the Java languages like HttpURLConnection , HttpClient introduced in Java 11 , Apache HTTPClient , OkHttpClient , Jetty HttpClient . A comparison is provided is this blogpost to make your choice. In this tutorial we will go with Apache HttpClient , this is the one used in the SDK, you should adapt the code depending on the framework you choosed. Import relevant dependencies for Apache Http Client in your pom.xml <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-restapi ) public class AstraRestApiHttpClient { static final String ASTRA_TOKEN = \"<change_with_your_token>\" ; static final String ASTRA_DB_ID = \"<change_with_your_database_identifier>\" ; static final String ASTRA_DB_REGION = \"<change_with_your_database_region>\" ; static final String ASTRA_DB_KEYSPACE = \"<change_with_your_keyspace>\" ; static Logger logger = LoggerFactory . getLogger ( AstraRestApiHttpClient . class ); public static void main ( String [] args ) throws Exception { String apiRestEndpoint = new StringBuilder ( \"https://\" ) . append ( ASTRA_DB_ID ). append ( \"-\" ) . append ( ASTRA_DB_REGION ) . append ( \".apps.astra.datastax.com/api/rest\" ) . toString (); logger . info ( \"Rest Endpoint is {}\" , apiRestEndpoint ); try ( CloseableHttpClient httpClient = HttpClients . createDefault ()) { listKeyspaces ( httpClient , apiRestEndpoint ); createTable ( httpClient , apiRestEndpoint ); insertRow ( httpClient , apiRestEndpoint ); retrieveRow ( httpClient , apiRestEndpoint ); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } List keyspaces private static void listKeyspaces ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet listKeyspacesReq = new HttpGet ( apiRestEndpoint + \"/v2/schemas/keyspaces\" ); listKeyspacesReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( listKeyspacesReq )) { if ( 200 == res . getCode ()) { logger . info ( \"[OK] Keyspaces list retrieved\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Create a Table Query used is createTableJson here: { \"name\" : \"users\" , \"columnDefinitions\" : [ { \"name\" : \"firstname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"lastname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"email\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"color\" , \"typeDefinition\" : \"text\" } ], \"primaryKey\" : { \"partitionKey\" : [ \"firstname\" ], \"clusteringKey\" : [ \"lastname\" ] }, \"tableOptions\" : { \"defaultTimeToLive\" : 0 , \"clusteringExpression\" : [{ \"column\" : \"lastname\" , \"order\" : \"ASC\" }] } } Create Table code private static void createTable ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost createTableReq = new HttpPost ( apiRestEndpoint + \"/v2/schemas/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/tables\" ); createTableReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); String createTableJson = \"{...JSON.....}\" ; createTableReq . setEntity ( new StringEntity ( createTableJson , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( createTableReq )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Table Created (if needed)\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Insert a Row private static void insertRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost insertCedrick = new HttpPost ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users\" ); insertCedrick . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); insertCedrick . setEntity ( new StringEntity ( \"{\" + \" \\\"firstname\\\": \\\"Cedrick\\\",\" + \" \\\"lastname\\\" : \\\"Lunven\\\",\" + \" \\\"email\\\" : \\\"c.lunven@gmail.com\\\",\" + \" \\\"color\\\" : \\\"blue\\\" }\" , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( insertCedrick )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Row inserted\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Retrieve a row private static void retrieveRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet rowReq = new HttpGet ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users/Cedrick/Lunven\" ); rowReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( rowReq )) { if ( 200 == res . getCode ()) { String payload = EntityUtils . toString ( res . getEntity ()); logger . info ( \"[OK] Row retrieved\" ); logger . info ( \"Row retrieved : {}\" , payload ); } } } \u23eb Back to top 5. Stargate Document Api \u00b6 \u2139\ufe0f Overview api XXX \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Import relevant dependencies for Apache Http Client in your pom.xml . Jackon is also helpful to serialize or unserialized Java Objects as JSON. <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-docapi ) \u23eb Back to top 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Language java"},{"location":"pages/develop/language-java/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-java/#2-interfaces-list","text":"Pick the interface you want to use from the list: Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage users and roles Astra Core Manage Databases Astra Core Manage Streaming","title":"2. Interfaces list"},{"location":"pages/develop/language-java/#3-cql-cassandra-drivers","text":"Drivers reference documentation can be found HERE , this page is focused on connectivity with Astra DB only.","title":"3. CQL Cassandra Drivers"},{"location":"pages/develop/language-java/#31-drivers-version-4x","text":"Version 4.x is the recommended version Version 4 is major redesign of the internal architecture. As such, it is not binary compatible with previous versions. However, most of the concepts remain unchanged, and the new API will look very familiar to 2.x and 3.x users. If you want to know more the rational is explained in this blogpost . If you are still using 3.x and want to migrate you can have a look the upgrade guide but you can also keep using 3.x as described below \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Any version 4.x should be compatible with Astra. Update your pom.xml file with the latest version of the 4.x libraries: <!-- (REQUIRED) --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-core </artifactId> <version> ${latest4x} </version> </dependency> <!-- OPTIONAL --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-query-builder </artifactId> <version> ${latest4x} </version> </dependency> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-mapper-runtime </artifactId> <version> ${latest4x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver4x ) import java.nio.file.Paths ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.oss.driver.api.core.CqlSession ; public class AstraDriver4x { static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver4x . class ); try ( CqlSession cqlSession = CqlSession . builder () . withCloudSecureConnectBundle ( Paths . get ( ASTRA_ZIP_FILE )) . withAuthCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . withKeyspace ( ASTRA_KEYSPACE ) . build ()) { logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , cqlSession . getKeyspace (). get ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 4.x Multiple Standalone Classes using driver 4.x Spring PetClinic in Reactive and specially the mapper \u23eb Back to top","title":"3.1 Drivers version 4.x"},{"location":"pages/develop/language-java/#32-drivers-version-3x","text":"\ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Please note that version 3.8+ is required to connect to Astra. Update your pom.xml file with the latest version of the 3.x libraries: <dependency> <groupId> com.datastax.cassandra </groupId> <artifactId> cassandra-driver-core </artifactId> <version> ${latest3x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver3x ) import java.io.File ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.driver.core.Cluster ; import com.datastax.driver.core.Session ; public class AstraDriver3x { // Define inputs static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver3x . class ); try ( Cluster cluster = Cluster . builder () . withCloudSecureConnectBundle ( new File ( ASTRA_ZIP_FILE )) . withCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . build () ) { Session session = cluster . connect ( ASTRA_KEYSPACE ); logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , session . getLoggedKeyspace ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 3.x Multiple Standalone Classes using driver 3.x \u23eb Back to top","title":"3.2 Drivers version 3.x"},{"location":"pages/develop/language-java/#33-astra-sdk","text":"TODO","title":"3.3 Astra SDK"},{"location":"pages/develop/language-java/#4-stargate-rest-api","text":"\u2139\ufe0f Overview Stargate is a data gateway (Proxy) on top of Apache Cassandra exposing new interface to ease the integration. It is a way to create stateless components (1) and ease the integration with 4 different HTTP Apis (rest, doc, graphQL, gRPC). In this chapter we will cover integration with REST Apis also called DATA in the swagger specifications. To know more regarding this interface specially you can have a look to dedicated section of the wiki or reference Stargate Rest Api Quick Start Guide . \u26a0\ufe0f We recommend to use version V2 ( with V2 in the URL ) as it covers more features and the V1 would be deprecated sooner. \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project You simple need an HTTP Client to use the Rest API. There are a lot in the Java languages like HttpURLConnection , HttpClient introduced in Java 11 , Apache HTTPClient , OkHttpClient , Jetty HttpClient . A comparison is provided is this blogpost to make your choice. In this tutorial we will go with Apache HttpClient , this is the one used in the SDK, you should adapt the code depending on the framework you choosed. Import relevant dependencies for Apache Http Client in your pom.xml <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-restapi ) public class AstraRestApiHttpClient { static final String ASTRA_TOKEN = \"<change_with_your_token>\" ; static final String ASTRA_DB_ID = \"<change_with_your_database_identifier>\" ; static final String ASTRA_DB_REGION = \"<change_with_your_database_region>\" ; static final String ASTRA_DB_KEYSPACE = \"<change_with_your_keyspace>\" ; static Logger logger = LoggerFactory . getLogger ( AstraRestApiHttpClient . class ); public static void main ( String [] args ) throws Exception { String apiRestEndpoint = new StringBuilder ( \"https://\" ) . append ( ASTRA_DB_ID ). append ( \"-\" ) . append ( ASTRA_DB_REGION ) . append ( \".apps.astra.datastax.com/api/rest\" ) . toString (); logger . info ( \"Rest Endpoint is {}\" , apiRestEndpoint ); try ( CloseableHttpClient httpClient = HttpClients . createDefault ()) { listKeyspaces ( httpClient , apiRestEndpoint ); createTable ( httpClient , apiRestEndpoint ); insertRow ( httpClient , apiRestEndpoint ); retrieveRow ( httpClient , apiRestEndpoint ); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } List keyspaces private static void listKeyspaces ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet listKeyspacesReq = new HttpGet ( apiRestEndpoint + \"/v2/schemas/keyspaces\" ); listKeyspacesReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( listKeyspacesReq )) { if ( 200 == res . getCode ()) { logger . info ( \"[OK] Keyspaces list retrieved\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Create a Table Query used is createTableJson here: { \"name\" : \"users\" , \"columnDefinitions\" : [ { \"name\" : \"firstname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"lastname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"email\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"color\" , \"typeDefinition\" : \"text\" } ], \"primaryKey\" : { \"partitionKey\" : [ \"firstname\" ], \"clusteringKey\" : [ \"lastname\" ] }, \"tableOptions\" : { \"defaultTimeToLive\" : 0 , \"clusteringExpression\" : [{ \"column\" : \"lastname\" , \"order\" : \"ASC\" }] } } Create Table code private static void createTable ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost createTableReq = new HttpPost ( apiRestEndpoint + \"/v2/schemas/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/tables\" ); createTableReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); String createTableJson = \"{...JSON.....}\" ; createTableReq . setEntity ( new StringEntity ( createTableJson , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( createTableReq )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Table Created (if needed)\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Insert a Row private static void insertRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost insertCedrick = new HttpPost ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users\" ); insertCedrick . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); insertCedrick . setEntity ( new StringEntity ( \"{\" + \" \\\"firstname\\\": \\\"Cedrick\\\",\" + \" \\\"lastname\\\" : \\\"Lunven\\\",\" + \" \\\"email\\\" : \\\"c.lunven@gmail.com\\\",\" + \" \\\"color\\\" : \\\"blue\\\" }\" , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( insertCedrick )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Row inserted\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Retrieve a row private static void retrieveRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet rowReq = new HttpGet ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users/Cedrick/Lunven\" ); rowReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( rowReq )) { if ( 200 == res . getCode ()) { String payload = EntityUtils . toString ( res . getEntity ()); logger . info ( \"[OK] Row retrieved\" ); logger . info ( \"Row retrieved : {}\" , payload ); } } } \u23eb Back to top","title":"4. Stargate REST Api"},{"location":"pages/develop/language-java/#5-stargate-document-api","text":"\u2139\ufe0f Overview api XXX \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Import relevant dependencies for Apache Http Client in your pom.xml . Jackon is also helpful to serialize or unserialized Java Objects as JSON. <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-docapi ) \u23eb Back to top","title":"5. Stargate Document Api"},{"location":"pages/develop/language-java/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-java/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-java/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-java/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-java/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-java/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-java/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-java/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-java/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-java/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-java/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-java/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-java/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"pages/develop/language-javascript/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Language javascript"},{"location":"pages/develop/language-javascript/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-javascript/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"pages/develop/language-javascript/#3-cql","text":"","title":"3. CQL"},{"location":"pages/develop/language-javascript/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"pages/develop/language-javascript/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"pages/develop/language-javascript/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"pages/develop/language-javascript/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"pages/develop/language-javascript/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"pages/develop/language-javascript/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"pages/develop/language-javascript/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"pages/develop/language-javascript/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"pages/develop/language-javascript/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-javascript/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-javascript/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-javascript/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-javascript/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-javascript/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-javascript/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-javascript/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-javascript/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-javascript/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-javascript/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-javascript/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-javascript/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"pages/develop/language-python/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Language python"},{"location":"pages/develop/language-python/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-python/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"pages/develop/language-python/#3-cql","text":"","title":"3. CQL"},{"location":"pages/develop/language-python/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"pages/develop/language-python/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"pages/develop/language-python/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"pages/develop/language-python/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"pages/develop/language-python/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"pages/develop/language-python/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"pages/develop/language-python/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"pages/develop/language-python/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"pages/develop/language-python/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-python/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-python/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-python/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-python/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-python/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-python/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-python/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-python/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-python/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-python/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-python/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-python/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"pages/develop/language-rust/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Language rust"},{"location":"pages/develop/language-rust/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-rust/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"pages/develop/language-rust/#3-cql","text":"","title":"3. CQL"},{"location":"pages/develop/language-rust/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"pages/develop/language-rust/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"pages/develop/language-rust/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"pages/develop/language-rust/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"pages/develop/language-rust/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"pages/develop/language-rust/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"pages/develop/language-rust/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"pages/develop/language-rust/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"pages/develop/language-rust/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-rust/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-rust/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-rust/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-rust/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-rust/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-rust/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-rust/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-rust/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-rust/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-rust/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-rust/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-rust/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"pages/develop/language-scala/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Language scala"},{"location":"pages/develop/language-scala/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"pages/develop/language-scala/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"pages/develop/language-scala/#3-cql","text":"","title":"3. CQL"},{"location":"pages/develop/language-scala/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"pages/develop/language-scala/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"pages/develop/language-scala/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"pages/develop/language-scala/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"pages/develop/language-scala/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"pages/develop/language-scala/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"pages/develop/language-scala/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"pages/develop/language-scala/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"pages/develop/language-scala/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"pages/develop/language-scala/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"pages/develop/language-scala/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"pages/develop/language-scala/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"pages/develop/language-scala/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"pages/develop/language-scala/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"pages/develop/language-scala/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"pages/develop/language-scala/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"pages/develop/language-scala/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"pages/develop/language-scala/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"pages/develop/language-scala/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"pages/develop/language-scala/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"pages/develop/language-scala/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"pages/develop/section-coding/","text":"\ud83d\udee0\ufe0f Pick a language \u00b6 \ud83d\udee0\ufe0f Pick a framework \u00b6","title":"Section coding"},{"location":"pages/develop/section-coding/#pick-a-language","text":"","title":"\ud83d\udee0\ufe0f Pick a language"},{"location":"pages/develop/section-coding/#pick-a-framework","text":"","title":"\ud83d\udee0\ufe0f Pick a framework"},{"location":"pages/tools/section-tools/","text":"Apache Airflow : Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems Apache Nifi : NiFi was built to automate the flow of data between systems. While the term 'dataflow' is used in a variety of contexts, we use it here to mean the automated and managed flow of information between systems. Apache Spark : Apache Spark is an open-source, distributed processing system used for big data workloads. It utilizes in-memory caching, and optimized query execution for fast analytic queries against data of any size. Use Apache Spark to connect to your database and begin accessing your Astra DB tables using Scala in spark-shell. Cloud Functions (Python Driver) : Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to extend Astra DB with additional data processing capabilities and connect Astra DB with other cloud services into data pipelines. Cloud Functions (Python SDK) : Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to extend Astra DB with additional data processing capabilities and connect Astra DB with other cloud services into data pipelines. Cql Proxy : cql-proxy is designed to forward your application's CQL traffic to an appropriate database service. It listens on a local address and securely forwards that traffic. Cql Shell : the standalone CQLSH client is a separate, lightweight tool you can use to interact with your database. Datagrip Jetbrains : DataGrip is a database management environment for developers. It is designed to query, create, and manage databases. Databases can work locally, on a server, or in the cloud. Supports MySQL, PostgreSQL, Microsoft SQL Server, Oracle, and more. If you have a JDBC driver, add it to DataGrip, connect to your DBMS, and start working. DataStax Bulk : The DataStax Bulk Loader tool (DSBulk) is a unified tool for loading into and unloading from Cassandra-compatible storage engines, such as OSS Apache Cassandra\u00ae, DataStax Astra and DataStax Enterprise (DSE). DBeaver : DBeaver is a universal database management tool for everyone who needs to work with data in a professional way. With DBeaver you are able to manipulate with your data like in a regular spreadsheet, create analytical reports based on records from different data storages, export information in an appropriate format. IntelliJ IDEA : The Capable & Ergonomic Java IDE by JetBrains JanusGraph : JanusGraph is designed to support the processing of graphs so large that they require storage and computational capacities beyond what a single machine can provide. Scaling graph data processing for real time traversals and analytical queries is JanusGraph\u2019s foundational benefit. This section will discuss the various specific benefits of JanusGraph and its underlying, supported persistence solutions. Micronaut : Micronaut is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin, and Groovy. Micronaut is developed by the creators of the Grails framework and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails. MindDB :MindsDB enables you to use ML predictions in your database using SQL. Pentaho Data Integration : Pentaho Data Integration (PDI) provides the Extract, Transform, and Load (ETL) capabilities that facilitate the process of capturing, cleansing, and storing data using a uniform and consistent format that is accessible and relevant to end users and IoT technologies. TablePlus : TablePlus is a modern, native tool with elegant UI that allows you to simultaneously manage multiple databases such as MySQL, PostgreSQL, SQLite, Microsoft SQL Server and more.","title":"Section tools"},{"location":"pages/tools/tool-apache-airflow/","text":"A - Overview \u00b6 Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems. These instructions will step through tasks/adjustments to be done in each product (Astra DB, cql-proxy, Apache Airflow), ultimately resulting in Airflow being able to work with AstraDB in its directed acyclic graphs (DAG). \u2139\ufe0f Apache Airflow Documentation B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install python3 and pip3 (local deploymnent of Airflow) or Docker (docker) This article was written for Apache Airflow version 2.2.3 on MacOS with Python 3.9 . C - Installation \u00b6 \u2705 Step 0 Download and install Following the Apache Airflow reference documentation download and install the software. \u2705 Step 1 Create the keyspace airflow From the Astra DB dashboard , click on your database name. Scroll down to where the keyspaces are listed, and click the Add Keyspace button to create a new keyspace. Name this keyspace airflow . \u2705 Step 2 Start Cql Proxy DataStax\u2019s cql-proxy is designed to function as an intermediate connection point to allow legacy Apache Cassandra applications to connect to DataStax Astra DB using its new Secure Connect Bundle. There are a few ways to install and run DataStax\u2019s cql-proxy, as outlined in CQL-PROXY . Be sure to start cql-proxy with the following settings: Using the Secure Connect Bundle downloaded in the previous section Binding it to the listen IP of the server instance Specifying the username of \u201ctoken\u201d Specifying the Astra Token created for the user in Astra DB as the password You can run cql-proxy (in the foreground) from the command line in this way, like this: ./cql-proxy --bundle ~/local/astraCreds/secure-connect.zip \\ --bind 127 .0.0.1 \\ --username token \\ --password AstraCS:rtFckUZblahblahblahblahblahblaha3953d799a525 Important to note that the command shown above binds cql-proxy to localhost (127.0.0.1), meaning it is not reachable (by Airflow) from outside the server instance. \u2705 Step 3 Create a new connection in Apache Airflow Inside Apache Airflow, click Connections from underneath the Admin drop-down menu. Then click on the blue button labeled with the plus sign ( + ) to add a new connection. Fill out the form as shown in Figure 2: Connection Id: A unique identifier for the connection in Apache Airflow, which will be referenced inside the DAG code. We will use \u201ccassandra_cqlproxy.\u201d Connection Type: Select \u201cCassandra\u201d from the drop-down. If it is not present, you will have to install Airflow\u2019s Cassandra provider. Host: The listen address that cql-proxy is bound to. In this case, that is \u201c127.0.0.1.\u201d Schema: The Cassandra keyspace which we created in Astra DB. We\u2019ll set that to \u201cairflow\u201d in this case. Login: Your Astra DB client id. Password: Your Astra DB client secret. Port: The port that cql-proxy is listening on for the CQL native binary protocol, most likely 9042. Figure 2 - Create a new Cassandra connection for Apache Airflow. Click the blue Save button to persist the new connection. \u2705 Step 4 Create a new DAG in Apache Airflow A directed acyclic graph (DAG) is essentially a Python script which imports one or more libraries specific to Airflow. To create a new DAG, first locate your DAG directory. By default, Airflow looks for custom DAGs in the ~/airflow/dags/ directory. For testing, there is a sample DAG out in the following GitHub repository: https://github.com/aar0np/DS_Python_stuff/blob/main/cassandra_test_dag.py This DAG uses the following line to reference the Cassandra connection we created in the above step: hook = CassandraHook('cassandra_cqlproxy') The other important aspect is that this DAG sets its unique identifier as cass_hooks_tutorial : with DAG( 'cass_hooks_tutorial', It also specifically creates two unique tasks: check_table_exists query_system_local \u2705 Step 5 Final Test To test the connection, copy the DAG mentioned above into the /dags/ directory. Then we will invoke Airflow\u2019s task testing functionality, by running airflow tasks test and specifying: The DAG\u2019s unique identifier The name of the task to be run The execution date If today\u2019s date is 2022-02-08, the command looks like this: airflow tasks test cass_hooks_tutorial check_table_exists 2022-02-08 Many messages will go by quickly. If it worked, the final messages should look something like this: INFO - Done. Returned value was: True INFO - Marking task as SUCCESS. dag_id=cass_hooks_tutorial, task_id=check_table_exists, execution_date=20220208T000000, start_date=20220208T195333, end_date=20220208T195334 D - Acknowledgements \u00b6 Special thanks goes out to Obioma Anomnachi of Anant. Obi\u2019s video and GitHub repo proved quite helpful in building out this tutorial.","title":"Tool apache airflow"},{"location":"pages/tools/tool-apache-airflow/#a-overview","text":"Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems. These instructions will step through tasks/adjustments to be done in each product (Astra DB, cql-proxy, Apache Airflow), ultimately resulting in Airflow being able to work with AstraDB in its directed acyclic graphs (DAG). \u2139\ufe0f Apache Airflow Documentation","title":"A - Overview"},{"location":"pages/tools/tool-apache-airflow/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install python3 and pip3 (local deploymnent of Airflow) or Docker (docker) This article was written for Apache Airflow version 2.2.3 on MacOS with Python 3.9 .","title":"B - Prerequisites"},{"location":"pages/tools/tool-apache-airflow/#c-installation","text":"\u2705 Step 0 Download and install Following the Apache Airflow reference documentation download and install the software. \u2705 Step 1 Create the keyspace airflow From the Astra DB dashboard , click on your database name. Scroll down to where the keyspaces are listed, and click the Add Keyspace button to create a new keyspace. Name this keyspace airflow . \u2705 Step 2 Start Cql Proxy DataStax\u2019s cql-proxy is designed to function as an intermediate connection point to allow legacy Apache Cassandra applications to connect to DataStax Astra DB using its new Secure Connect Bundle. There are a few ways to install and run DataStax\u2019s cql-proxy, as outlined in CQL-PROXY . Be sure to start cql-proxy with the following settings: Using the Secure Connect Bundle downloaded in the previous section Binding it to the listen IP of the server instance Specifying the username of \u201ctoken\u201d Specifying the Astra Token created for the user in Astra DB as the password You can run cql-proxy (in the foreground) from the command line in this way, like this: ./cql-proxy --bundle ~/local/astraCreds/secure-connect.zip \\ --bind 127 .0.0.1 \\ --username token \\ --password AstraCS:rtFckUZblahblahblahblahblahblaha3953d799a525 Important to note that the command shown above binds cql-proxy to localhost (127.0.0.1), meaning it is not reachable (by Airflow) from outside the server instance. \u2705 Step 3 Create a new connection in Apache Airflow Inside Apache Airflow, click Connections from underneath the Admin drop-down menu. Then click on the blue button labeled with the plus sign ( + ) to add a new connection. Fill out the form as shown in Figure 2: Connection Id: A unique identifier for the connection in Apache Airflow, which will be referenced inside the DAG code. We will use \u201ccassandra_cqlproxy.\u201d Connection Type: Select \u201cCassandra\u201d from the drop-down. If it is not present, you will have to install Airflow\u2019s Cassandra provider. Host: The listen address that cql-proxy is bound to. In this case, that is \u201c127.0.0.1.\u201d Schema: The Cassandra keyspace which we created in Astra DB. We\u2019ll set that to \u201cairflow\u201d in this case. Login: Your Astra DB client id. Password: Your Astra DB client secret. Port: The port that cql-proxy is listening on for the CQL native binary protocol, most likely 9042. Figure 2 - Create a new Cassandra connection for Apache Airflow. Click the blue Save button to persist the new connection. \u2705 Step 4 Create a new DAG in Apache Airflow A directed acyclic graph (DAG) is essentially a Python script which imports one or more libraries specific to Airflow. To create a new DAG, first locate your DAG directory. By default, Airflow looks for custom DAGs in the ~/airflow/dags/ directory. For testing, there is a sample DAG out in the following GitHub repository: https://github.com/aar0np/DS_Python_stuff/blob/main/cassandra_test_dag.py This DAG uses the following line to reference the Cassandra connection we created in the above step: hook = CassandraHook('cassandra_cqlproxy') The other important aspect is that this DAG sets its unique identifier as cass_hooks_tutorial : with DAG( 'cass_hooks_tutorial', It also specifically creates two unique tasks: check_table_exists query_system_local \u2705 Step 5 Final Test To test the connection, copy the DAG mentioned above into the /dags/ directory. Then we will invoke Airflow\u2019s task testing functionality, by running airflow tasks test and specifying: The DAG\u2019s unique identifier The name of the task to be run The execution date If today\u2019s date is 2022-02-08, the command looks like this: airflow tasks test cass_hooks_tutorial check_table_exists 2022-02-08 Many messages will go by quickly. If it worked, the final messages should look something like this: INFO - Done. Returned value was: True INFO - Marking task as SUCCESS. dag_id=cass_hooks_tutorial, task_id=check_table_exists, execution_date=20220208T000000, start_date=20220208T195333, end_date=20220208T195334","title":"C - Installation"},{"location":"pages/tools/tool-apache-airflow/#d-acknowledgements","text":"Special thanks goes out to Obioma Anomnachi of Anant. Obi\u2019s video and GitHub repo proved quite helpful in building out this tutorial.","title":"D - Acknowledgements"}]}