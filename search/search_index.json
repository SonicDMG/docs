{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Your Wiki to implement Awesome Applications with Astra Welcome to the Awesome Astra wiki! As the name stated it is an attempt to gather all information regarding Astra usage in a single place to help you in the development of your applications. It is a community and collaborative effort, if you have some inputs or correction please do so.","title":"\ud83c\udfe0 Home"},{"location":"apache-airflow/","text":"\ud83c\udfe0 Back to home Last Update 2/10/2022 *This article was written by Aaron Ploetz* \ud83d\udccb On this page A - Overview B - Prerequisites C - Installation D - Acknowledgements A - Overview \u00b6 Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems. These instructions will step through tasks/adjustments to be done in each product (Astra DB, cql-proxy, Apache Airflow), ultimately resulting in Airflow being able to work with AstraDB in its directed acyclic graphs (DAG). \u2139\ufe0f Apache Airflow Documentation B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install python3 and pip3 (local deploymnent of Airflow) or Docker (docker) This article was written for Apache Airflow version 2.2.3 on MacOS with Python 3.9 . C - Installation \u00b6 \u2705 Step 0 Download and install \u00b6 Following the Apache Airflow reference documentation download and install the software. \u2705 Step 1 Create the keyspace airflow \u00b6 From the Astra DB dashboard , click on your database name. Scroll down to where the keyspaces are listed, and click the Add Keyspace button to create a new keyspace. Name this keyspace airflow . \u2705 Step 2 Start Cql Proxy \u00b6 DataStax\u2019s cql-proxy is designed to function as an intermediate connection point to allow legacy Apache Cassandra applications to connect to DataStax Astra DB using its new Secure Connect Bundle. There are a few ways to install and run DataStax\u2019s cql-proxy, as outlined in CQL-PROXY . Be sure to start cql-proxy with the following settings: Using the Secure Connect Bundle downloaded in the previous section Binding it to the listen IP of the server instance Specifying the username of \u201ctoken\u201d Specifying the Astra Token created for the user in Astra DB as the password You can run cql-proxy (in the foreground) from the command line in this way, like this: ./cql-proxy --bundle ~/local/astraCreds/secure-connect.zip \\ --bind 127 .0.0.1 \\ --username token \\ --password AstraCS:rtFckUZblahblahblahblahblahblaha3953d799a525 Important to note that the command shown above binds cql-proxy to localhost (127.0.0.1), meaning it is not reachable (by Airflow) from outside the server instance. \u2705 Step 3 Create a new connection in Apache Airflow \u00b6 Inside Apache Airflow, click Connections from underneath the Admin drop-down menu. Then click on the blue button labeled with the plus sign ( + ) to add a new connection. Fill out the form as shown in Figure 2: Connection Id: A unique identifier for the connection in Apache Airflow, which will be referenced inside the DAG code. We will use \u201ccassandra_cqlproxy.\u201d Connection Type: Select \u201cCassandra\u201d from the drop-down. If it is not present, you will have to install Airflow\u2019s Cassandra provider. Host: The listen address that cql-proxy is bound to. In this case, that is \u201c127.0.0.1.\u201d Schema: The Cassandra keyspace which we created in Astra DB. We\u2019ll set that to \u201cairflow\u201d in this case. Login: Your Astra DB client id. Password: Your Astra DB client secret. Port: The port that cql-proxy is listening on for the CQL native binary protocol, most likely 9042. Figure 2 - Create a new Cassandra connection for Apache Airflow. Click the blue Save button to persist the new connection. \u2705 Step 4 Create a new DAG in Apache Airflow \u00b6 A directed acyclic graph (DAG) is essentially a Python script which imports one or more libraries specific to Airflow. To create a new DAG, first locate your DAG directory. By default, Airflow looks for custom DAGs in the ~/airflow/dags/ directory. For testing, there is a sample DAG out in the following GitHub repository: https://github.com/aar0np/DS_Python_stuff/blob/main/cassandra_test_dag.py This DAG uses the following line to reference the Cassandra connection we created in the above step: hook = CassandraHook('cassandra_cqlproxy') The other important aspect is that this DAG sets its unique identifier as cass_hooks_tutorial : with DAG( 'cass_hooks_tutorial', It also specifically creates two unique tasks: check_table_exists query_system_local \u2705 Step 5 Final Test \u00b6 To test the connection, copy the DAG mentioned above into the /dags/ directory. Then we will invoke Airflow\u2019s task testing functionality, by running airflow tasks test and specifying: The DAG\u2019s unique identifier The name of the task to be run The execution date If today\u2019s date is 2022-02-08, the command looks like this: airflow tasks test cass_hooks_tutorial check_table_exists 2022-02-08 Many messages will go by quickly. If it worked, the final messages should look something like this: INFO - Done. Returned value was: True INFO - Marking task as SUCCESS. dag_id=cass_hooks_tutorial, task_id=check_table_exists, execution_date=20220208T000000, start_date=20220208T195333, end_date=20220208T195334 D - Acknowledgements \u00b6 Special thanks goes out to Obioma Anomnachi of Anant. Obi\u2019s video and GitHub repo proved quite helpful in building out this tutorial.","title":"Apache airflow"},{"location":"apache-airflow/#a-overview","text":"Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems. These instructions will step through tasks/adjustments to be done in each product (Astra DB, cql-proxy, Apache Airflow), ultimately resulting in Airflow being able to work with AstraDB in its directed acyclic graphs (DAG). \u2139\ufe0f Apache Airflow Documentation","title":"A - Overview"},{"location":"apache-airflow/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install python3 and pip3 (local deploymnent of Airflow) or Docker (docker) This article was written for Apache Airflow version 2.2.3 on MacOS with Python 3.9 .","title":"B - Prerequisites"},{"location":"apache-airflow/#c-installation","text":"","title":"C - Installation"},{"location":"apache-airflow/#step-0-download-and-install","text":"Following the Apache Airflow reference documentation download and install the software.","title":"\u2705 Step 0 Download and install"},{"location":"apache-airflow/#step-1-create-the-keyspace-airflow","text":"From the Astra DB dashboard , click on your database name. Scroll down to where the keyspaces are listed, and click the Add Keyspace button to create a new keyspace. Name this keyspace airflow .","title":"\u2705 Step 1 Create the keyspace airflow"},{"location":"apache-airflow/#step-2-start-cql-proxy","text":"DataStax\u2019s cql-proxy is designed to function as an intermediate connection point to allow legacy Apache Cassandra applications to connect to DataStax Astra DB using its new Secure Connect Bundle. There are a few ways to install and run DataStax\u2019s cql-proxy, as outlined in CQL-PROXY . Be sure to start cql-proxy with the following settings: Using the Secure Connect Bundle downloaded in the previous section Binding it to the listen IP of the server instance Specifying the username of \u201ctoken\u201d Specifying the Astra Token created for the user in Astra DB as the password You can run cql-proxy (in the foreground) from the command line in this way, like this: ./cql-proxy --bundle ~/local/astraCreds/secure-connect.zip \\ --bind 127 .0.0.1 \\ --username token \\ --password AstraCS:rtFckUZblahblahblahblahblahblaha3953d799a525 Important to note that the command shown above binds cql-proxy to localhost (127.0.0.1), meaning it is not reachable (by Airflow) from outside the server instance.","title":"\u2705 Step 2 Start Cql Proxy"},{"location":"apache-airflow/#step-3-create-a-new-connection-in-apache-airflow","text":"Inside Apache Airflow, click Connections from underneath the Admin drop-down menu. Then click on the blue button labeled with the plus sign ( + ) to add a new connection. Fill out the form as shown in Figure 2: Connection Id: A unique identifier for the connection in Apache Airflow, which will be referenced inside the DAG code. We will use \u201ccassandra_cqlproxy.\u201d Connection Type: Select \u201cCassandra\u201d from the drop-down. If it is not present, you will have to install Airflow\u2019s Cassandra provider. Host: The listen address that cql-proxy is bound to. In this case, that is \u201c127.0.0.1.\u201d Schema: The Cassandra keyspace which we created in Astra DB. We\u2019ll set that to \u201cairflow\u201d in this case. Login: Your Astra DB client id. Password: Your Astra DB client secret. Port: The port that cql-proxy is listening on for the CQL native binary protocol, most likely 9042. Figure 2 - Create a new Cassandra connection for Apache Airflow. Click the blue Save button to persist the new connection.","title":"\u2705 Step 3 Create a new connection in Apache Airflow"},{"location":"apache-airflow/#step-4-create-a-new-dag-in-apache-airflow","text":"A directed acyclic graph (DAG) is essentially a Python script which imports one or more libraries specific to Airflow. To create a new DAG, first locate your DAG directory. By default, Airflow looks for custom DAGs in the ~/airflow/dags/ directory. For testing, there is a sample DAG out in the following GitHub repository: https://github.com/aar0np/DS_Python_stuff/blob/main/cassandra_test_dag.py This DAG uses the following line to reference the Cassandra connection we created in the above step: hook = CassandraHook('cassandra_cqlproxy') The other important aspect is that this DAG sets its unique identifier as cass_hooks_tutorial : with DAG( 'cass_hooks_tutorial', It also specifically creates two unique tasks: check_table_exists query_system_local","title":"\u2705 Step 4 Create a new DAG in Apache Airflow"},{"location":"apache-airflow/#step-5-final-test","text":"To test the connection, copy the DAG mentioned above into the /dags/ directory. Then we will invoke Airflow\u2019s task testing functionality, by running airflow tasks test and specifying: The DAG\u2019s unique identifier The name of the task to be run The execution date If today\u2019s date is 2022-02-08, the command looks like this: airflow tasks test cass_hooks_tutorial check_table_exists 2022-02-08 Many messages will go by quickly. If it worked, the final messages should look something like this: INFO - Done. Returned value was: True INFO - Marking task as SUCCESS. dag_id=cass_hooks_tutorial, task_id=check_table_exists, execution_date=20220208T000000, start_date=20220208T195333, end_date=20220208T195334","title":"\u2705 Step 5 Final Test"},{"location":"apache-airflow/#d-acknowledgements","text":"Special thanks goes out to Obioma Anomnachi of Anant. Obi\u2019s video and GitHub repo proved quite helpful in building out this tutorial.","title":"D - Acknowledgements"},{"location":"astra-create-instance/","text":"Written by Cedrick Lunven , Last Update 2/10/2022 Reference documentation A - Overview \u00b6 ASTRA DB is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads. B - Prerequisites \u00b6 You should have an Astra account . If you don't have one yet, keep reading and we'll show you how to create it. C - Procedure \u00b6 \u2705 Step 1:Click the sign-in button to login or register. You can use your Github , Google accounts or register with an email . With the latest make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character. If you already have an Astra account, skip this step, locate and click the \"Create Database\" button on the left-side navigation bar of your Astra UI, and read next step. \u2705 Step 2: Complete the creation form As you create a new account, you will be prompted to create a database; you will see the same form if you simply hit the \"Create database\" button in your existing Astra account. \u2139\ufe0f Fields Description Field Description database name It does not need to be unique and not used to initialize a connection but only a label (Between 2 and 50 characters). It is recommended to have a database for each of your application. The free tier is limited to 5 databases. keyspace It is a logical grouping of your tables. (Between 2 and 48 characters), Please use lower cases and snake_case . Cloud Provider Use the one you like, click a cloud provider logo, pick an Area in the list and finally pick a region. We recommend to pick one the closes to you to readuce latencies but in free tier very few difference. \u2139\ufe0f Create Database button becomes enabled only when all fields are filled properly. Please use only lower cases and no space for a keyspace name. \u2139\ufe0f You will see your new database pending in the Dashboard.The status will change to Active when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready. \ud83d\udc41\ufe0f Walkthrough","title":"Create Database"},{"location":"astra-create-instance/#a-overview","text":"ASTRA DB is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.","title":"A - Overview"},{"location":"astra-create-instance/#b-prerequisites","text":"You should have an Astra account . If you don't have one yet, keep reading and we'll show you how to create it.","title":"B - Prerequisites"},{"location":"astra-create-instance/#c-procedure","text":"\u2705 Step 1:Click the sign-in button to login or register. You can use your Github , Google accounts or register with an email . With the latest make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character. If you already have an Astra account, skip this step, locate and click the \"Create Database\" button on the left-side navigation bar of your Astra UI, and read next step. \u2705 Step 2: Complete the creation form As you create a new account, you will be prompted to create a database; you will see the same form if you simply hit the \"Create database\" button in your existing Astra account. \u2139\ufe0f Fields Description Field Description database name It does not need to be unique and not used to initialize a connection but only a label (Between 2 and 50 characters). It is recommended to have a database for each of your application. The free tier is limited to 5 databases. keyspace It is a logical grouping of your tables. (Between 2 and 48 characters), Please use lower cases and snake_case . Cloud Provider Use the one you like, click a cloud provider logo, pick an Area in the list and finally pick a region. We recommend to pick one the closes to you to readuce latencies but in free tier very few difference. \u2139\ufe0f Create Database button becomes enabled only when all fields are filled properly. Please use only lower cases and no space for a keyspace name. \u2139\ufe0f You will see your new database pending in the Dashboard.The status will change to Active when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready. \ud83d\udc41\ufe0f Walkthrough","title":"C - Procedure"},{"location":"astra-create-token/","text":"The Astra token creation procedure is also described in the reference documentation A - Overview \u00b6 Tokens are the way to authenticate against Astra with any given Apis or Drivers. They are created at organization level and as such can be used with multiple Databases. When you create a token you will select a Role that code a set of permissions. There you can limit the usage of your token for a particular database. B - Prerequisites \u00b6 You should have an Astra account C - Procedure \u00b6 \u2705 Step 1 : Open the Organization settings panel On the top left hand corner locate the panel Current Organization with your email address. Use the chevron down \u2304 to open the menu and pick Organizations Settings \u2705 Step 2: Open the token management page On the new page, select Token Management in the menu. Then use the Select Roles combo to select Organization Administrator role. This is the administrator of your tenant with all permissions. **Tip**: you can reach the Token Management page directly from the ellipsis menu next to your database in the main Astra dashboard. Expand to see how \u2705 Step 3: Save the token as a CSV. The values of clientSecret and token will not be shown to you later for security reasons. Do not share those values and never commit them on github. \ud83d\udc41\ufe0f Walkthrough You can use the clipboard icons close to each parameter to clip them and copy them elsewhere. D - Extra Resources \u00b6 A video explaining you the details of roles and privileges A video guiding you through the steps of creating a token. Written by Cedrick Lunven , Last Update 2/10/2021","title":"Create Token"},{"location":"astra-create-token/#a-overview","text":"Tokens are the way to authenticate against Astra with any given Apis or Drivers. They are created at organization level and as such can be used with multiple Databases. When you create a token you will select a Role that code a set of permissions. There you can limit the usage of your token for a particular database.","title":"A - Overview"},{"location":"astra-create-token/#b-prerequisites","text":"You should have an Astra account","title":"B - Prerequisites"},{"location":"astra-create-token/#c-procedure","text":"\u2705 Step 1 : Open the Organization settings panel On the top left hand corner locate the panel Current Organization with your email address. Use the chevron down \u2304 to open the menu and pick Organizations Settings \u2705 Step 2: Open the token management page On the new page, select Token Management in the menu. Then use the Select Roles combo to select Organization Administrator role. This is the administrator of your tenant with all permissions. **Tip**: you can reach the Token Management page directly from the ellipsis menu next to your database in the main Astra dashboard. Expand to see how \u2705 Step 3: Save the token as a CSV. The values of clientSecret and token will not be shown to you later for security reasons. Do not share those values and never commit them on github. \ud83d\udc41\ufe0f Walkthrough You can use the clipboard icons close to each parameter to clip them and copy them elsewhere.","title":"C - Procedure"},{"location":"astra-create-token/#d-extra-resources","text":"A video explaining you the details of roles and privileges A video guiding you through the steps of creating a token. Written by Cedrick Lunven , Last Update 2/10/2021","title":"D - Extra Resources"},{"location":"astra-create-topic/","text":"Reference documentation A - Overview \u00b6 ASTRA STREAMING is the simplest way to use the Apache Pulsar messaging/streaming service with zero operations at all - just push the button and get your messages flowing. No credit card required, $25.00 USD credit every month, and the strength and the features of Apache Pulsar managed for you in the cloud. This page explains how to create a new tenant in Astra Streaming, a new namespace in the tenant (if desired) and a new topic in the namespace. Also instructions are given to retrieve the connection parameters to later connect to the topic and start messaging from your application. B - Prerequisites \u00b6 You should have an Astra account . Have a tenant_name , optionally a namespace (if not using \"default\"), and a topic_name ready to create the topic. C - Procedure \u00b6 Make sure you are logged in to your Astra account before proceeding. \u2705 Step 1: Create a tenant Go to your Astra console, locate the \"Create Streaming\" button on the left window and to the right of Streaming. Click on it. Set up a new Tenant (remember Pulsar has a multi-tenant architecture): you have to find a globally unique name for it . Pick the provider/region you like ( try to have it close to you for reduced latency ) and finally hit \"Create Tenant\". You'll shortly see the dashboard for your newly-created Tenant. \u2705 Step 2: Create a namespace A default namespace is created for you with the tenant and you can use it if you want. However, you may want to create a namespace to host your topic(s). Go to the \"Namespaces\" tab of your Tenant dashboard and click on the \"Create namespace\" button on the right. Choose a name and hit \"Create\": you should see it listed among the available namespaces in a moment. \u2705 Step 3: Create a topic Head to the \"Topics\" tab and click the \"Add Topic\" button next to the namespace you want to use. Choose a topic name and click \"Save\" after reviewing the topic settings (such as persistent=yes, partitioned=no ) according to your needs. Your topic is now being created, which takes a couple of minutes max. It will then be ready to receive and dispatch messages. \ud83d\udc41\ufe0f Walkthrough for topic creation \u2705 Step 4: retrieve the Broker URL All is left is to make sure you have the connection parameters needed to reach the topic programmatically. If you click the \"Connect\" tab you will see a list of \"Tenant Details\", along with links to look at code examples in various languages. There are several ways to connect to the topic: in particular, if you plan to use the Pulsar drivers from your application, the important bits are the \"Broker Service URL\" and the \"Streaming Token\" secret. The \"Broker Service URL\" is shown right in the \"Connect\" tab and looks like pulsar+ssl://pulsar-[...].streaming.datastax.com:6651 . You can click on the clipboard icon to copy it. \u2705 Step 5: Manage secrets and retrieve the Streaming Token You will also need a Token, a long secret string providing authentication info when the driver will connect to the topic. The token must be treated as a secret, which means do not post it publicly and do not check it in to repositories. Note : the Streaming Tokens are a completely separate thing from the Astra DB Tokens. Get to the \"Token Manager\" by clicking on the link in the \"Tenant Details\" list: there you will be able to create, copy and revoke streaming tokens for your tenant. Note that a default token has already been created for you, so you don't need to create a new token if you are OK with using that one. Click on the clipboard icon to copy it. The token is a long random-looking string, such as eyJhbGci [...] cpNpX_qN68Q (about 500 chars long). \ud83d\udc41\ufe0f Screenshot for the connection parameters D - Extra Resources \u00b6 Apache Pulsar documentation \ud83c\udfe0 Back to home","title":"Create Astra Streaming Topic"},{"location":"astra-create-topic/#a-overview","text":"ASTRA STREAMING is the simplest way to use the Apache Pulsar messaging/streaming service with zero operations at all - just push the button and get your messages flowing. No credit card required, $25.00 USD credit every month, and the strength and the features of Apache Pulsar managed for you in the cloud. This page explains how to create a new tenant in Astra Streaming, a new namespace in the tenant (if desired) and a new topic in the namespace. Also instructions are given to retrieve the connection parameters to later connect to the topic and start messaging from your application.","title":"A - Overview"},{"location":"astra-create-topic/#b-prerequisites","text":"You should have an Astra account . Have a tenant_name , optionally a namespace (if not using \"default\"), and a topic_name ready to create the topic.","title":"B - Prerequisites"},{"location":"astra-create-topic/#c-procedure","text":"Make sure you are logged in to your Astra account before proceeding. \u2705 Step 1: Create a tenant Go to your Astra console, locate the \"Create Streaming\" button on the left window and to the right of Streaming. Click on it. Set up a new Tenant (remember Pulsar has a multi-tenant architecture): you have to find a globally unique name for it . Pick the provider/region you like ( try to have it close to you for reduced latency ) and finally hit \"Create Tenant\". You'll shortly see the dashboard for your newly-created Tenant. \u2705 Step 2: Create a namespace A default namespace is created for you with the tenant and you can use it if you want. However, you may want to create a namespace to host your topic(s). Go to the \"Namespaces\" tab of your Tenant dashboard and click on the \"Create namespace\" button on the right. Choose a name and hit \"Create\": you should see it listed among the available namespaces in a moment. \u2705 Step 3: Create a topic Head to the \"Topics\" tab and click the \"Add Topic\" button next to the namespace you want to use. Choose a topic name and click \"Save\" after reviewing the topic settings (such as persistent=yes, partitioned=no ) according to your needs. Your topic is now being created, which takes a couple of minutes max. It will then be ready to receive and dispatch messages. \ud83d\udc41\ufe0f Walkthrough for topic creation \u2705 Step 4: retrieve the Broker URL All is left is to make sure you have the connection parameters needed to reach the topic programmatically. If you click the \"Connect\" tab you will see a list of \"Tenant Details\", along with links to look at code examples in various languages. There are several ways to connect to the topic: in particular, if you plan to use the Pulsar drivers from your application, the important bits are the \"Broker Service URL\" and the \"Streaming Token\" secret. The \"Broker Service URL\" is shown right in the \"Connect\" tab and looks like pulsar+ssl://pulsar-[...].streaming.datastax.com:6651 . You can click on the clipboard icon to copy it. \u2705 Step 5: Manage secrets and retrieve the Streaming Token You will also need a Token, a long secret string providing authentication info when the driver will connect to the topic. The token must be treated as a secret, which means do not post it publicly and do not check it in to repositories. Note : the Streaming Tokens are a completely separate thing from the Astra DB Tokens. Get to the \"Token Manager\" by clicking on the link in the \"Tenant Details\" list: there you will be able to create, copy and revoke streaming tokens for your tenant. Note that a default token has already been created for you, so you don't need to create a new token if you are OK with using that one. Click on the clipboard icon to copy it. The token is a long random-looking string, such as eyJhbGci [...] cpNpX_qN68Q (about 500 chars long). \ud83d\udc41\ufe0f Screenshot for the connection parameters","title":"C - Procedure"},{"location":"astra-create-topic/#d-extra-resources","text":"Apache Pulsar documentation \ud83c\udfe0 Back to home","title":"D - Extra Resources"},{"location":"astra-download-scb/","text":"The Astra token creation procedure is also described in the reference documentation A - Overview \u00b6 To initialize a secured 2-way TLS connection between clients and Astra x509 certificates are needed. The strong authentication is key for maximum security and still benefit from greatest drivers features(health-check, load-balancing, fail-over). Under the hood the protocol SNI over TCP is used to contact each node independently. The configuration and required certificates are provided to user through a zip file called the secure connect bundle that can be downloaded for each DATABASE REGION . Meaning a database deployed across multiple regions will have one secure connect bundle per region. (1 region = 1 underlying Apache Cassandra\u2122 datacenter) B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database C - Procedure \u00b6 \u2705 Step 1 : Select your database Once signed in Astra the list of available databases is located in the menu on the left. Select the database you want to work with by clicking on it. Click on the TAB CONNECT or the big blue button [CONNECT] on the top right hand corner. \u2705 Step 2 : Download the ZIP On this screen look for Connect using a driver . You can pick any of the options Node.js ( javascript ), Python or Java . It will be the same file downloaded. Click on Download Bundle and eventually select the region you want to use Click on target region to be able to copy the link locally. Remarks \u00b6 Most browsers will give you the option to open the zip file directly. Do not do that, save it whole instead : the bundle zipfile will be passed to the drivers as it is! The generated link to the bundle zipfile will expire a few minutes after it is generated. If you download the bundle much later after you have reached the \"Connect\" page, you might end up with a faulty bundle. As a check, make sure the zipfile you downloaded is around 12-13 KiB in size. D - Extra Resources \u00b6 Video on How to use the Secure Connect Bundle","title":"Download SecureConnectBundle"},{"location":"astra-download-scb/#a-overview","text":"To initialize a secured 2-way TLS connection between clients and Astra x509 certificates are needed. The strong authentication is key for maximum security and still benefit from greatest drivers features(health-check, load-balancing, fail-over). Under the hood the protocol SNI over TCP is used to contact each node independently. The configuration and required certificates are provided to user through a zip file called the secure connect bundle that can be downloaded for each DATABASE REGION . Meaning a database deployed across multiple regions will have one secure connect bundle per region. (1 region = 1 underlying Apache Cassandra\u2122 datacenter)","title":"A - Overview"},{"location":"astra-download-scb/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database","title":"B - Prerequisites"},{"location":"astra-download-scb/#c-procedure","text":"\u2705 Step 1 : Select your database Once signed in Astra the list of available databases is located in the menu on the left. Select the database you want to work with by clicking on it. Click on the TAB CONNECT or the big blue button [CONNECT] on the top right hand corner. \u2705 Step 2 : Download the ZIP On this screen look for Connect using a driver . You can pick any of the options Node.js ( javascript ), Python or Java . It will be the same file downloaded. Click on Download Bundle and eventually select the region you want to use Click on target region to be able to copy the link locally.","title":"C - Procedure"},{"location":"astra-download-scb/#remarks","text":"Most browsers will give you the option to open the zip file directly. Do not do that, save it whole instead : the bundle zipfile will be passed to the drivers as it is! The generated link to the bundle zipfile will expire a few minutes after it is generated. If you download the bundle much later after you have reached the \"Connect\" page, you might end up with a faulty bundle. As a check, make sure the zipfile you downloaded is around 12-13 KiB in size.","title":"Remarks"},{"location":"astra-download-scb/#d-extra-resources","text":"Video on How to use the Secure Connect Bundle","title":"D - Extra Resources"},{"location":"astra-faq/","text":"Questions List \u00b6 Where should I find a database identifier ? Where should I find a database region name ? How to create a keyspace or a namespace ? Where should I find a database identifier ? \u00b6 The database id is a unique identifier ( GUID ) for your database. You can find it on the main dashboard of AstraDB. You can copy it to the clip board by clicking the small icon \ud83d\udccb \u2139\ufe0f Note that, on the contrary of the identifier, the database name is not unique in an organization. ( project in the screenshot above) Where should I find a database region name ? \u00b6 A database can have one or multiple regions. Each regions will have a datacenter Id and a region name. The region name is the one used in the Api Urls. Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the region name in the region table. In the screenshot below we do have 2 europe-west1 and us-east1 . How to create a namespace or keyspace ? \u00b6 Namespaces and keyspaces are synonyms. There are 2 ways to create them. You can create them when you create a database You can create them on the Database Dashboard in the Keyspaces section by clicking the button Add Keyspace . Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the create Keyspace Button on the botton right-hand corner Create Keyspace from its name. The database will switch in MAINTENANCE mode for a few seconds but do not worry the application can still request the other keyspaces.","title":"FAQ"},{"location":"astra-faq/#questions-list","text":"Where should I find a database identifier ? Where should I find a database region name ? How to create a keyspace or a namespace ?","title":"Questions List"},{"location":"astra-faq/#where-should-i-find-a-database-identifier","text":"The database id is a unique identifier ( GUID ) for your database. You can find it on the main dashboard of AstraDB. You can copy it to the clip board by clicking the small icon \ud83d\udccb \u2139\ufe0f Note that, on the contrary of the identifier, the database name is not unique in an organization. ( project in the screenshot above)","title":"Where should I find a database identifier ?"},{"location":"astra-faq/#where-should-i-find-a-database-region-name","text":"A database can have one or multiple regions. Each regions will have a datacenter Id and a region name. The region name is the one used in the Api Urls. Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the region name in the region table. In the screenshot below we do have 2 europe-west1 and us-east1 .","title":"Where should I find a database region name ?"},{"location":"astra-faq/#how-to-create-a-namespace-or-keyspace","text":"Namespaces and keyspaces are synonyms. There are 2 ways to create them. You can create them when you create a database You can create them on the Database Dashboard in the Keyspaces section by clicking the button Add Keyspace . Access your database dashboard by clicking its name either in the menu on the left or on the main panel. Locate the create Keyspace Button on the botton right-hand corner Create Keyspace from its name. The database will switch in MAINTENANCE mode for a few seconds but do not worry the application can still request the other keyspaces.","title":"How to create a namespace or keyspace ?"},{"location":"astra-multi-regions/","text":"Astra Reference Documentation on this topic A - Overview \u00b6 AstraDB allows you to replicate data across multiple regions to maintain data availability for multi-region application architectures. Configuring multiple regions can also satisfy data locality requirements with the added value of cost savings. \ud83d\udd04 Eventual Consistency \u00b6 Apache Cassandra\u00ae and DataStax Astra DB follow the eventual consistency model. As a result, data written to one datacenter/region may not be immediately accessible in other datacenters/regions in the same database cluster. The time span is normally within a few minutes to fully replicate the data. However, it could take longer, and possibly span one or more days. There are several contributing factors to the latter scenario, such as the workload volume, the number of regions, the process that runs data repair operations, and network resources. \u2696\ufe0f Data sovereignty \u00b6 Astra DB serverless replicates all data in the database to all of a database\u2019s regions. By contrast, multiple keyspaces in Apache Cassandra\u00ae and DataStax Enterprise (DSE) allow a database to replicate some tables to a subset of regions. To achieve the same behavior as Cassandra or DSE, create a separate AstraDB instance that adheres to the necessary region restrictions. The database client will need to add a separate connection for the additional database and send queries to the appropriate connection depending on the table being queried. \u26a0\ufe0f Limitations \u00b6 Lightweight transactions work for only a single-region datacenter. If you original region is disconnected, schema changes are suspended and repairs do not run. If any regions are disconnected, the writes to those regions will not be forwarded. While adding a new region, you cannot drop a table or keyspace and you cannot truncate a table. If any region is not online, you cannot truncate a table. B - Prerequisites \u00b6 You should have an Astra account You should have enter a CREDIT CARD in the system OR/AND get MORE THAN 25$ in Astra Credits. C - Create a new Region \u00b6 \u2705 Step 1: Click the Add Region Button Select the database to show the Dashboard, select Add Region. \u2705 Step 2: Select your region Select your desired region from the dropdown menu of available. You can review your selected region and its cost below the dropdown menu. You can add only a single region at one time. \u2705 Step 3: Validate your region Select Add Region to add the region to your database. The database switch in maintenance status. Do not worry the existing regions remain active and available for operations there is no downtime. After you add the new region, your new region will show up in the list of regions on your database Dashboard. Finally after the initialization you got: D - Delete a new Region \u00b6 \u2705 Step 1: Select Region to delete From you database Dashboard, select the overflow menu for the database you want to delete, Select Delete. You can notice that you CANNOT delete the original main region, the delete is not available in the menu \u2705 Step 2: Validate your action Removing a region is not reversible. Proceed with caution. A pop-up will ask you to validate this operation by entering the delete word. The database will switch in maintenance mode. After a few seconds you will see the status of the deleted regions change from Active to Offline Finally the region will not be visible on screen E - Extra Resources \u00b6 Walkthrough Video \ud83c\udfe0 Back to home","title":"Multi Regions"},{"location":"astra-multi-regions/#a-overview","text":"AstraDB allows you to replicate data across multiple regions to maintain data availability for multi-region application architectures. Configuring multiple regions can also satisfy data locality requirements with the added value of cost savings.","title":"A - Overview"},{"location":"astra-multi-regions/#eventual-consistency","text":"Apache Cassandra\u00ae and DataStax Astra DB follow the eventual consistency model. As a result, data written to one datacenter/region may not be immediately accessible in other datacenters/regions in the same database cluster. The time span is normally within a few minutes to fully replicate the data. However, it could take longer, and possibly span one or more days. There are several contributing factors to the latter scenario, such as the workload volume, the number of regions, the process that runs data repair operations, and network resources.","title":"\ud83d\udd04 Eventual Consistency"},{"location":"astra-multi-regions/#data-sovereignty","text":"Astra DB serverless replicates all data in the database to all of a database\u2019s regions. By contrast, multiple keyspaces in Apache Cassandra\u00ae and DataStax Enterprise (DSE) allow a database to replicate some tables to a subset of regions. To achieve the same behavior as Cassandra or DSE, create a separate AstraDB instance that adheres to the necessary region restrictions. The database client will need to add a separate connection for the additional database and send queries to the appropriate connection depending on the table being queried.","title":"\u2696\ufe0f Data sovereignty"},{"location":"astra-multi-regions/#limitations","text":"Lightweight transactions work for only a single-region datacenter. If you original region is disconnected, schema changes are suspended and repairs do not run. If any regions are disconnected, the writes to those regions will not be forwarded. While adding a new region, you cannot drop a table or keyspace and you cannot truncate a table. If any region is not online, you cannot truncate a table.","title":"\u26a0\ufe0f Limitations"},{"location":"astra-multi-regions/#b-prerequisites","text":"You should have an Astra account You should have enter a CREDIT CARD in the system OR/AND get MORE THAN 25$ in Astra Credits.","title":"B - Prerequisites"},{"location":"astra-multi-regions/#c-create-a-new-region","text":"\u2705 Step 1: Click the Add Region Button Select the database to show the Dashboard, select Add Region. \u2705 Step 2: Select your region Select your desired region from the dropdown menu of available. You can review your selected region and its cost below the dropdown menu. You can add only a single region at one time. \u2705 Step 3: Validate your region Select Add Region to add the region to your database. The database switch in maintenance status. Do not worry the existing regions remain active and available for operations there is no downtime. After you add the new region, your new region will show up in the list of regions on your database Dashboard. Finally after the initialization you got:","title":"C - Create a new Region"},{"location":"astra-multi-regions/#d-delete-a-new-region","text":"\u2705 Step 1: Select Region to delete From you database Dashboard, select the overflow menu for the database you want to delete, Select Delete. You can notice that you CANNOT delete the original main region, the delete is not available in the menu \u2705 Step 2: Validate your action Removing a region is not reversible. Proceed with caution. A pop-up will ask you to validate this operation by entering the delete word. The database will switch in maintenance mode. After a few seconds you will see the status of the deleted regions change from Active to Offline Finally the region will not be visible on screen","title":"D - Delete a new Region"},{"location":"astra-multi-regions/#e-extra-resources","text":"Walkthrough Video \ud83c\udfe0 Back to home","title":"E - Extra Resources"},{"location":"astra-resume-db/","text":"A - Overview \u00b6 In the free tier (serverless) , after 23h , your database will be hibernated and the status will change to StandBy . From there it needs to be resumed or the first request will fail . This first request will also replace the database in Active mode after a few seconds. B - Prerequisites \u00b6 You should have an Astra account C - Procedure \u00b6 The idea here is to trigger an harmless request to access to the health TAB to change the status of the Database. \u2705 Step 1: Trigger a request Access the database by clicking its name in the menu on the left Select Table Health check Wait for a minute for the database to exit hibernation D - Extra Resources \u00b6 \ud83c\udfe0 Back to home","title":"Resume a database"},{"location":"astra-resume-db/#a-overview","text":"In the free tier (serverless) , after 23h , your database will be hibernated and the status will change to StandBy . From there it needs to be resumed or the first request will fail . This first request will also replace the database in Active mode after a few seconds.","title":"A - Overview"},{"location":"astra-resume-db/#b-prerequisites","text":"You should have an Astra account","title":"B - Prerequisites"},{"location":"astra-resume-db/#c-procedure","text":"The idea here is to trigger an harmless request to access to the health TAB to change the status of the Database. \u2705 Step 1: Trigger a request Access the database by clicking its name in the menu on the left Select Table Health check Wait for a minute for the database to exit hibernation","title":"C - Procedure"},{"location":"astra-resume-db/#d-extra-resources","text":"\ud83c\udfe0 Back to home","title":"D - Extra Resources"},{"location":"framework-micronaut/","text":"This guide was built base on the Micronaut Cassandra Guide A - Overview \u00b6 Micronaut is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin, and Groovy. Micronaut is developed by the creators of the Grails framework and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails. For more information refer to the user guide The micronaut-cassandra module includes support for integrating Micronaut services with Cassandra. B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install a Java JDK 1.8+ and Apache Maven C - Configuration \u00b6 You can find a working sample here \u2705 Step 1: Create your project To create a micronaut project and CLI mn is provided. You can install it using sdkman as describe in the doc #Download SDKMan curl -s https://get.sdkman.io | bash #Setup SDKMan source \" $HOME /.sdkman/bin/sdkman-init.sh\" #Download Micronaut sdk install micronaut To generate a new project use mn create-app adding the feature cassandra mn create-app astra-todo-micronaut --features cassandra Notice that in your pom.xml you now have the following <dependency> <groupId> io.micronaut.cassandra </groupId> <artifactId> micronaut-cassandra </artifactId> <scope> compile </scope> </dependency> \u2705 Step 2: Setup your project All configuration of your project will be defined in application.yaml in src/main/resources . The module is clever enough to load all properties as if it was the driver configuration file . You can defined multiple profiles and each profile will be identified with key cassandra.${profile_name} . There is a default profile. In the following sample file we provide 2 profiles one for local and one for Astra. There is no extra code needed, simply configuration. cassandra : default : basic : session-keyspace : micronaut contact-points : - \"localhost:9042\" load-balancing-policy : local-datacenter : datacenter1 astra : basic : request : timeout : 5 seconds consistency : LOCAL_QUORUM page-size : 5000 session-keyspace : micronaut cloud : secure-connect-bundle : /Users/cedricklunven/Downloads/secure-connect-workshops.zip advanced : auth-provider : class : PlainTextAuthProvider username : token password : \"AstraCS:blahblahblah\" connection : init-query-timeout : 10 seconds set-keyspace-timeout : 10 seconds control-connection.timeout : 10 seconds \u2705 Step 3: Application Startup At startup you may want create the different tables needed for you application. In Astra you can only create keyspaces from the devops API or the user interface. . To enable content at startup simple implement ApplicationEventListener<ServiceReadyEvent> as shown below @Singleton public class TodoApplicationStartup implements ApplicationEventListener < ServiceReadyEvent > { /** Logger for the class. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoApplicationStartup . class ); @Property ( name = \"todo.cassandra.create_schema\" , defaultValue = \"false\" ) private boolean createTable ; @Inject private CqlSession cqlSession ; /** {@inheritDoc} */ @Override public void onApplicationEvent ( final ServiceReadyEvent event ) { LOGGER . info ( \"Startup Initialization\" ); if ( createTable ) { TodoServiceCassandraCql . createTableTodo ( cqlSession ); LOGGER . info ( \"+ Table TodoItems created if needed.\" ); } LOGGER . info ( \"[OK]\" ); } } \u2705 Step 4: Use Cassandra To use Cassandra you will reuse the CqlSession from the Datastax drivers. You can simply inject it where you needed as shown in this sample code @Validated @Controller ( \"/api/v1\" ) public class TodoRestController { /** Logger for our Client. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoRestController . class ); /** CqlSession initialized from application.yaml */ @Inject private CqlSession cqlSession ; Happy coding.","title":"Micronaut"},{"location":"framework-micronaut/#a-overview","text":"Micronaut is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin, and Groovy. Micronaut is developed by the creators of the Grails framework and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails. For more information refer to the user guide The micronaut-cassandra module includes support for integrating Micronaut services with Cassandra.","title":"A - Overview"},{"location":"framework-micronaut/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install a Java JDK 1.8+ and Apache Maven","title":"B - Prerequisites"},{"location":"framework-micronaut/#c-configuration","text":"You can find a working sample here \u2705 Step 1: Create your project To create a micronaut project and CLI mn is provided. You can install it using sdkman as describe in the doc #Download SDKMan curl -s https://get.sdkman.io | bash #Setup SDKMan source \" $HOME /.sdkman/bin/sdkman-init.sh\" #Download Micronaut sdk install micronaut To generate a new project use mn create-app adding the feature cassandra mn create-app astra-todo-micronaut --features cassandra Notice that in your pom.xml you now have the following <dependency> <groupId> io.micronaut.cassandra </groupId> <artifactId> micronaut-cassandra </artifactId> <scope> compile </scope> </dependency> \u2705 Step 2: Setup your project All configuration of your project will be defined in application.yaml in src/main/resources . The module is clever enough to load all properties as if it was the driver configuration file . You can defined multiple profiles and each profile will be identified with key cassandra.${profile_name} . There is a default profile. In the following sample file we provide 2 profiles one for local and one for Astra. There is no extra code needed, simply configuration. cassandra : default : basic : session-keyspace : micronaut contact-points : - \"localhost:9042\" load-balancing-policy : local-datacenter : datacenter1 astra : basic : request : timeout : 5 seconds consistency : LOCAL_QUORUM page-size : 5000 session-keyspace : micronaut cloud : secure-connect-bundle : /Users/cedricklunven/Downloads/secure-connect-workshops.zip advanced : auth-provider : class : PlainTextAuthProvider username : token password : \"AstraCS:blahblahblah\" connection : init-query-timeout : 10 seconds set-keyspace-timeout : 10 seconds control-connection.timeout : 10 seconds \u2705 Step 3: Application Startup At startup you may want create the different tables needed for you application. In Astra you can only create keyspaces from the devops API or the user interface. . To enable content at startup simple implement ApplicationEventListener<ServiceReadyEvent> as shown below @Singleton public class TodoApplicationStartup implements ApplicationEventListener < ServiceReadyEvent > { /** Logger for the class. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoApplicationStartup . class ); @Property ( name = \"todo.cassandra.create_schema\" , defaultValue = \"false\" ) private boolean createTable ; @Inject private CqlSession cqlSession ; /** {@inheritDoc} */ @Override public void onApplicationEvent ( final ServiceReadyEvent event ) { LOGGER . info ( \"Startup Initialization\" ); if ( createTable ) { TodoServiceCassandraCql . createTableTodo ( cqlSession ); LOGGER . info ( \"+ Table TodoItems created if needed.\" ); } LOGGER . info ( \"[OK]\" ); } } \u2705 Step 4: Use Cassandra To use Cassandra you will reuse the CqlSession from the Datastax drivers. You can simply inject it where you needed as shown in this sample code @Validated @Controller ( \"/api/v1\" ) public class TodoRestController { /** Logger for our Client. */ private static final Logger LOGGER = LoggerFactory . getLogger ( TodoRestController . class ); /** CqlSession initialized from application.yaml */ @Inject private CqlSession cqlSession ; Happy coding.","title":"C - Configuration"},{"location":"framework-quarkus/","text":"Quarkus Documentation Quarkus Workshop Todo Application Quarkus","title":"Quarkus"},{"location":"framework-spring/","text":"Working with Spring \u00b6 Spring makes programming Java quicker, easier, and safer for everybody. Spring\u2019s focus on speed, simplicity, and productivity has made it the world's most popular Java framework.. To get more information regarding the framework visit the reference Spring.io . Spring applications are packaged as standalone using Spring Boot . To add capabilities to applications multiple starters are provided by Spring. In the current page we will details which are the starters needed to interact Astra interfaces. Datastax team also implemented a dedicated astra-spring-boot-starter to help you with the boiler plate code. Astra Spring Boot Starter \u00b6 \u2139\ufe0f Overview \u00b6 The Astra Spring Boot Starter once imported in a Spring Boot application, will configure both Astra SDK and Spring Data Cassandra to work with AstraDB. Configuration keys are read in application.yaml like any spring applications with a dedicated prefix astra . The starter will initialize any beans you would need ( AstraClient , CqlSession , StargateClient ) to use all interfaces exposes by Astra. Not all are activated by default, you want to initialize only what you need. \ud83d\udce6. Prerequisites [ASTRA] \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6. Prerequisites [Development Environment] \u00b6 You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6. Setup Project \u00b6 Create your project with Spring Initializr . Dependencies needed are web and data-cassandra but we did the work for you if you click the template link Property Value Property Value groupId com.datastax.tutorial package com.datastax.tutorial artifactId sdk-quickstart-spring description Sample Spring App name sdk-quickstart-spring dependencies Spring Web and Spring Data for Cassandra packaging JAR Java Version 8 or 11 - Import the application in your favorite IDE but do not start the application immediately. - Add the latest version of starter as a dependency in `pom.xml` [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/) of `astra-spring-boot-starter` in the project. <dependency> <groupId> com.datastax.astra </groupId> <artifactId> astra-spring-boot-starter </artifactId> <version> 0.3.0 </version> </dependency> - Change the main class with the following code, we are leveraging on the unique `AstraClient` to interact with multiple interfaces. @RestController @SpringBootApplication public class SdkQuickstartSpringApplication { public static void main ( String [] args ) { SpringApplication . run ( SdkQuickstartSpringApplication . class , args ); } // Provided by the Starter @Autowired private AstraClient astraClient ; // Spring Data using the CqlSession initialized by the starter @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/api/devops/organizationid\" ) public String showOrganizationId () { return astraClient . apiDevopsOrganizations (). organizationId (); } @GetMapping ( \"/api/spring-data/datacenter\" ) public String showDatacenterNameWithSpringData () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } @GetMapping ( \"/api/cql/datacenter\" ) public String showDatacenterNameWithSpringData () { return astraClient . cqlSession () . execute ( \"SELECT data_center FROM system.local\" ) . one (). getString ( \"data_center\" ); } } - Rename `src/main/resources/application.properties` to `src/main/resources/application.yaml`. This step eases the configuration with hierarchical keys. Populate `application.yaml` with the following content and replace the values with expected values (how to retrieve the values are explained in the [Quickstart Astra](https://github.com/datastax/astra-sdk-java/wiki/Astra-SDK-Quickstart) astra : # Allow usage of devops and Stargate apis api : application-token : <your_token> database-id : <your_database_id> database-region : <your_database_region> # Connectivity to Cassandra cql : enabled : true download-scb : enabled : true driver-config : basic : session-keyspace : <your_keyspace> - Start the application mvn clean install spring-boot:run - Access the resources we created - Get your Organization ID: http://localhost:8080/api/devops/organizationid - Get your Datacenter Name (Spring-data): http://localhost:8080/api/spring-data/datacenter - Get your Datacenter Name (cql): http://localhost:8080/api/cql/datacenter [![dl](https://dabuttonfactory.com/button.png?t=Download+Project&f=Open+Sans-Bold&ts=14&tc=fff&hp=15&vp=15&w=180&h=50&c=11&bgt=pyramid&bgc=666&ebgc=000&bs=1&bc=444)](https://github.com/DataStax-Examples/astra-samples-java/archive/refs/heads/main.zip) ## 5. Spring Data Cassandra As describe in the [Spring documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.choose-style), there are multiple ways to interact with Cassandra. In this tutorial we will show you how to use all of them - **Repository Abstraction** lets you create repository declarations in your data access layer. The goal of Spring Data\u2019s repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores. - **`CassandraTemplate` wraps a `CqlTemplate`** to provide query result-to-object mapping and the use of SELECT, INSERT, UPDATE, and DELETE methods instead of writing CQL statements. This approach provides better documentation and ease of use. **\u2139\ufe0f Connecting Spring Data Cassandra to Astra** Spring Data Cassandra leverages on a `CqlSession` bean, all the time. To build the `CqlSession` there area again multiple ways described in the [documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.connectors) from custom code to `AbstractCassandraConfiguration`. **FORGET ABOUT IT.** Astra Spring Boot Starter creates the `CqlSession` bean for you using the keys previously listed as such you do not need to use configuration keys like `spring.data.cassandra` (_or very very few for special behaviour_) #### \u2705 Step 5a. Spring Data Cassandra Connectivity This one is straight forward. Remove the `exclude` in `@SpringBootApplication` @SpringBootApplication You can restart the application, spring data is connected to Astra. #### \u2705 Step 5b. Working with `CassandraRepository ` - Create a bean `Todos` in the same package `com.datastax.tutorial` @Table public class Todos { @PrimaryKey @CassandraType ( type = Name . UUID ) private UUID uid = UUID . randomUUID (); private String title ; private boolean completed = false ; public Todos () {} public Todos ( String title ) { this . title = title ; } //_getters and setters have been omitted here - Create an **interface** `TodosRepository` in the same package `com.datastax.tutorial` package com.datastax.tutorial ; import org.springframework.data.cassandra.repository.CassandraRepository ; public interface TodosRepository extends CassandraRepository < Todos , String > {} - Edit the `QuickStartSpring` to add the following: @Autowired private TodosRepository todoRepository ; @PostConstruct public void insertTodos () { todoRepository . save ( new Todos ( \"Create Spring Project\" )); todoRepository . save ( new Todos ( \"Setup Astra Starter\" )); todoRepository . save ( new Todos ( \"Setup Spring Starter\" )); } @GetMapping ( \"/todos\" ) public List < Todos > todos () { return todoRepository . findAll ( CassandraPageRequest . first ( 10 )). toList (); } - Finally tells Spring Data to create for us the tables with configuration. (not for CqlSession, only for this). In `application.yaml` add the following: spring : data : cassandra : schema-action : CREATE_IF_NOT_EXISTS - You can restart your application and access [http://localhost:8080/todos](http://localhost:8080/todos) [ { \"uid\" : \"83d7a60d-1f24-42c5-aa16-9275f36dc312\" , \"title\" : \"Setup Spring Starter\" , \"completed\" : false }, { \"uid\" : \"95e8a502-786d-4dd2-983a-b451a12877fe\" , \"title\" : \"Setup Astra Starter\" , \"completed\" : false }, { \"uid\" : \"44da79c3-73a6-46d0-84cb-3afa2a96d99e\" , \"title\" : \"Create Spring Project\" , \"completed\" : false } ] _\u2139\ufe0f Note: Each time you restart the application you will get 3 new tasks as the primary is an generated UUID._ #### \u2705 Step 5c. Working with `CqlTemplate` and `CassandraTemplate` `CassandraTemplate` is the bean initialized by Spring-Data. It embeds the `CqlTemplate` = `CqlOperations`. - Add the following to your main class @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/datacenter\" ) public String datacenter () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } - You can restart your application and access [http://localhost:8080/datacenter](http://localhost:8080/datacenter) ## Spring Data Cassandra ### Overview - Spring data - Spring data cassandra - Leveraging java drivers - 10 pitfalls of Spring Data Cassandra - [Guide](https://spring.io/guides/gs/accessing-data-cassandra/) TODO ### Spring Boot 1x and Spring Data 2x - Working with 3.x driver - 3.8 is required - how to enforce version - compatibility table TODO - https://github.com/mborges-pivotal/astra-springboot154 ### Spring Boot 2x and Spring Data 3x (recommended) - Working with 4.x drivers - CqlSession Customizer - Create your own Cql Session TODO ## Spring and Rest Apis ### Spring Web (Rest Template) TODO ### Spring Webflux (Webclient) TODO ## Spring Cloud and Astra TODO ## Spring Batch and Astra TODO","title":"Spring"},{"location":"framework-spring/#working-with-spring","text":"Spring makes programming Java quicker, easier, and safer for everybody. Spring\u2019s focus on speed, simplicity, and productivity has made it the world's most popular Java framework.. To get more information regarding the framework visit the reference Spring.io . Spring applications are packaged as standalone using Spring Boot . To add capabilities to applications multiple starters are provided by Spring. In the current page we will details which are the starters needed to interact Astra interfaces. Datastax team also implemented a dedicated astra-spring-boot-starter to help you with the boiler plate code.","title":"Working with Spring"},{"location":"framework-spring/#astra-spring-boot-starter","text":"","title":"Astra Spring Boot Starter"},{"location":"framework-spring/#i-overview","text":"The Astra Spring Boot Starter once imported in a Spring Boot application, will configure both Astra SDK and Spring Data Cassandra to work with AstraDB. Configuration keys are read in application.yaml like any spring applications with a dedicated prefix astra . The starter will initialize any beans you would need ( AstraClient , CqlSession , StargateClient ) to use all interfaces exposes by Astra. Not all are activated by default, you want to initialize only what you need.","title":"\u2139\ufe0f Overview"},{"location":"framework-spring/#prerequisites-astra","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token","title":"\ud83d\udce6. Prerequisites [ASTRA]"},{"location":"framework-spring/#prerequisites-development-environment","text":"You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version","title":"\ud83d\udce6. Prerequisites [Development Environment]"},{"location":"framework-spring/#setup-project","text":"Create your project with Spring Initializr . Dependencies needed are web and data-cassandra but we did the work for you if you click the template link Property Value Property Value groupId com.datastax.tutorial package com.datastax.tutorial artifactId sdk-quickstart-spring description Sample Spring App name sdk-quickstart-spring dependencies Spring Web and Spring Data for Cassandra packaging JAR Java Version 8 or 11 - Import the application in your favorite IDE but do not start the application immediately. - Add the latest version of starter as a dependency in `pom.xml` [![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-spring-boot-starter/) of `astra-spring-boot-starter` in the project. <dependency> <groupId> com.datastax.astra </groupId> <artifactId> astra-spring-boot-starter </artifactId> <version> 0.3.0 </version> </dependency> - Change the main class with the following code, we are leveraging on the unique `AstraClient` to interact with multiple interfaces. @RestController @SpringBootApplication public class SdkQuickstartSpringApplication { public static void main ( String [] args ) { SpringApplication . run ( SdkQuickstartSpringApplication . class , args ); } // Provided by the Starter @Autowired private AstraClient astraClient ; // Spring Data using the CqlSession initialized by the starter @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/api/devops/organizationid\" ) public String showOrganizationId () { return astraClient . apiDevopsOrganizations (). organizationId (); } @GetMapping ( \"/api/spring-data/datacenter\" ) public String showDatacenterNameWithSpringData () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } @GetMapping ( \"/api/cql/datacenter\" ) public String showDatacenterNameWithSpringData () { return astraClient . cqlSession () . execute ( \"SELECT data_center FROM system.local\" ) . one (). getString ( \"data_center\" ); } } - Rename `src/main/resources/application.properties` to `src/main/resources/application.yaml`. This step eases the configuration with hierarchical keys. Populate `application.yaml` with the following content and replace the values with expected values (how to retrieve the values are explained in the [Quickstart Astra](https://github.com/datastax/astra-sdk-java/wiki/Astra-SDK-Quickstart) astra : # Allow usage of devops and Stargate apis api : application-token : <your_token> database-id : <your_database_id> database-region : <your_database_region> # Connectivity to Cassandra cql : enabled : true download-scb : enabled : true driver-config : basic : session-keyspace : <your_keyspace> - Start the application mvn clean install spring-boot:run - Access the resources we created - Get your Organization ID: http://localhost:8080/api/devops/organizationid - Get your Datacenter Name (Spring-data): http://localhost:8080/api/spring-data/datacenter - Get your Datacenter Name (cql): http://localhost:8080/api/cql/datacenter [![dl](https://dabuttonfactory.com/button.png?t=Download+Project&f=Open+Sans-Bold&ts=14&tc=fff&hp=15&vp=15&w=180&h=50&c=11&bgt=pyramid&bgc=666&ebgc=000&bs=1&bc=444)](https://github.com/DataStax-Examples/astra-samples-java/archive/refs/heads/main.zip) ## 5. Spring Data Cassandra As describe in the [Spring documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.choose-style), there are multiple ways to interact with Cassandra. In this tutorial we will show you how to use all of them - **Repository Abstraction** lets you create repository declarations in your data access layer. The goal of Spring Data\u2019s repository abstraction is to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores. - **`CassandraTemplate` wraps a `CqlTemplate`** to provide query result-to-object mapping and the use of SELECT, INSERT, UPDATE, and DELETE methods instead of writing CQL statements. This approach provides better documentation and ease of use. **\u2139\ufe0f Connecting Spring Data Cassandra to Astra** Spring Data Cassandra leverages on a `CqlSession` bean, all the time. To build the `CqlSession` there area again multiple ways described in the [documentation](https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.connectors) from custom code to `AbstractCassandraConfiguration`. **FORGET ABOUT IT.** Astra Spring Boot Starter creates the `CqlSession` bean for you using the keys previously listed as such you do not need to use configuration keys like `spring.data.cassandra` (_or very very few for special behaviour_) #### \u2705 Step 5a. Spring Data Cassandra Connectivity This one is straight forward. Remove the `exclude` in `@SpringBootApplication` @SpringBootApplication You can restart the application, spring data is connected to Astra. #### \u2705 Step 5b. Working with `CassandraRepository ` - Create a bean `Todos` in the same package `com.datastax.tutorial` @Table public class Todos { @PrimaryKey @CassandraType ( type = Name . UUID ) private UUID uid = UUID . randomUUID (); private String title ; private boolean completed = false ; public Todos () {} public Todos ( String title ) { this . title = title ; } //_getters and setters have been omitted here - Create an **interface** `TodosRepository` in the same package `com.datastax.tutorial` package com.datastax.tutorial ; import org.springframework.data.cassandra.repository.CassandraRepository ; public interface TodosRepository extends CassandraRepository < Todos , String > {} - Edit the `QuickStartSpring` to add the following: @Autowired private TodosRepository todoRepository ; @PostConstruct public void insertTodos () { todoRepository . save ( new Todos ( \"Create Spring Project\" )); todoRepository . save ( new Todos ( \"Setup Astra Starter\" )); todoRepository . save ( new Todos ( \"Setup Spring Starter\" )); } @GetMapping ( \"/todos\" ) public List < Todos > todos () { return todoRepository . findAll ( CassandraPageRequest . first ( 10 )). toList (); } - Finally tells Spring Data to create for us the tables with configuration. (not for CqlSession, only for this). In `application.yaml` add the following: spring : data : cassandra : schema-action : CREATE_IF_NOT_EXISTS - You can restart your application and access [http://localhost:8080/todos](http://localhost:8080/todos) [ { \"uid\" : \"83d7a60d-1f24-42c5-aa16-9275f36dc312\" , \"title\" : \"Setup Spring Starter\" , \"completed\" : false }, { \"uid\" : \"95e8a502-786d-4dd2-983a-b451a12877fe\" , \"title\" : \"Setup Astra Starter\" , \"completed\" : false }, { \"uid\" : \"44da79c3-73a6-46d0-84cb-3afa2a96d99e\" , \"title\" : \"Create Spring Project\" , \"completed\" : false } ] _\u2139\ufe0f Note: Each time you restart the application you will get 3 new tasks as the primary is an generated UUID._ #### \u2705 Step 5c. Working with `CqlTemplate` and `CassandraTemplate` `CassandraTemplate` is the bean initialized by Spring-Data. It embeds the `CqlTemplate` = `CqlOperations`. - Add the following to your main class @Autowired private CassandraTemplate cassandraTemplate ; @GetMapping ( \"/datacenter\" ) public String datacenter () { return cassandraTemplate . getCqlOperations () . queryForObject ( \"SELECT data_center FROM system.local\" , String . class ); } - You can restart your application and access [http://localhost:8080/datacenter](http://localhost:8080/datacenter) ## Spring Data Cassandra ### Overview - Spring data - Spring data cassandra - Leveraging java drivers - 10 pitfalls of Spring Data Cassandra - [Guide](https://spring.io/guides/gs/accessing-data-cassandra/) TODO ### Spring Boot 1x and Spring Data 2x - Working with 3.x driver - 3.8 is required - how to enforce version - compatibility table TODO - https://github.com/mborges-pivotal/astra-springboot154 ### Spring Boot 2x and Spring Data 3x (recommended) - Working with 4.x drivers - CqlSession Customizer - Create your own Cql Session TODO ## Spring and Rest Apis ### Spring Web (Rest Template) TODO ### Spring Webflux (Webclient) TODO ## Spring Cloud and Astra TODO ## Spring Batch and Astra TODO","title":"\ud83d\udce6. Setup Project"},{"location":"language-csharp/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"CSharp"},{"location":"language-csharp/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-csharp/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"language-csharp/#3-cql","text":"","title":"3. CQL"},{"location":"language-csharp/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"language-csharp/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"language-csharp/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"language-csharp/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"language-csharp/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"language-csharp/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"language-csharp/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"language-csharp/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"language-csharp/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-csharp/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-csharp/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-csharp/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-csharp/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-csharp/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-csharp/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-csharp/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-csharp/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-csharp/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-csharp/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-csharp/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-csharp/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"language-go/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6 package main import ( \"archive/zip\" \"context\" \"crypto/tls\" \"crypto/x509\" \"encoding/json\" \"fmt\" \"io\" \"io/ioutil\" \"os\" \"path/filepath\" \"strconv\" \"strings\" \"github.com/gocql/gocql\" ) type Config struct { Host string `json:\"host\"` Port int `json:\"cql_port\"` } func main () { var clientID = os . Getenv ( \"ASTRA_CLIENT_ID\" ) var clientSecret = os . Getenv ( \"ASTRA_CLIENT_SECRET\" ) var secureConnectBundle = os . Getenv ( \"SECURE_CONNECT_BUNDLE\" ) if clientID == \"\" || clientSecret == \"\" || secureConnectBundle == \"\" { panic ( \"missing required environment variables\" ) } secureBundleDir := os . TempDir () fmt . Printf ( \"extracting secure connect bundle [%s] to [%s]\\n\" , secureConnectBundle , secureBundleDir ) if err := Unzip ( secureConnectBundle , secureBundleDir ); err != nil { panic ( err ) } configPath , _ := filepath . Abs ( secureBundleDir + \"/config.json\" ) fmt . Println ( \"config: \" + configPath ) configData , _ := ioutil . ReadFile ( configPath ) var cfg Config json . Unmarshal ( configData , & cfg ) cluster := gocql . NewCluster ( cfg . Host ) cluster . Authenticator = gocql . PasswordAuthenticator { Username : clientID , Password : clientSecret , } host := cfg . Host + \":\" + strconv . Itoa ( cfg . Port ) cluster . Hosts = [] string { host } fmt . Println ( \"connecting to: \" + host ) certPath , _ := filepath . Abs ( secureBundleDir + \"/cert\" ) keyPath , _ := filepath . Abs ( secureBundleDir + \"/key\" ) caPath , _ := filepath . Abs ( secureBundleDir + \"/ca.crt\" ) cert , _ := tls . LoadX509KeyPair ( certPath , keyPath ) caCert , _ := ioutil . ReadFile ( caPath ) caCertPool := x509 . NewCertPool () caCertPool . AppendCertsFromPEM ( caCert ) cluster . SslOpts = & gocql . SslOptions { Config : & tls . Config { Certificates : [] tls . Certificate { cert }, ServerName : cfg . Host , RootCAs : caCertPool , }, } session , err := cluster . CreateSession () if err != nil { panic ( err ) } fmt . Printf ( \"session established: %v\\n\" , session ) var releaseVersion string if err := session . Query ( \"select release_version from system.local\" ). WithContext ( context . Background ()). Consistency ( gocql . One ). Scan ( & releaseVersion ); err != nil { panic ( err ) } fmt . Printf ( \"release version: %s\\n\" , releaseVersion ) } func Unzip ( src , dest string ) error { r , err := zip . OpenReader ( src ) if err != nil { return err } defer func () { if err := r . Close (); err != nil { panic ( err ) } }() os . MkdirAll ( dest , 0755 ) // Closure to address file descriptors issue with all the deferred .Close() methods extractAndWriteFile := func ( f * zip . File ) error { rc , err := f . Open () if err != nil { return err } defer func () { if err := rc . Close (); err != nil { panic ( err ) } }() path := filepath . Join ( dest , f . Name ) // Check for ZipSlip (Directory traversal) if ! strings . HasPrefix ( path , filepath . Clean ( dest ) + string ( os . PathSeparator )) { return fmt . Errorf ( \"illegal file path: %s\" , path ) } if f . FileInfo (). IsDir () { os . MkdirAll ( path , f . Mode ()) } else { os . MkdirAll ( filepath . Dir ( path ), f . Mode ()) f , err := os . OpenFile ( path , os . O_WRONLY | os . O_CREATE | os . O_TRUNC , f . Mode ()) if err != nil { return err } defer func () { if err := f . Close (); err != nil { panic ( err ) } }() _ , err = io . Copy ( f , rc ) if err != nil { return err } } return nil } for _ , f := range r . File { err := extractAndWriteFile ( f ) if err != nil { return err } } return nil }","title":"GoLang"},{"location":"language-go/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-go/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"language-go/#3-cql","text":"","title":"3. CQL"},{"location":"language-go/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"language-go/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"language-go/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"language-go/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"language-go/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"language-go/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"language-go/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"language-go/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"language-go/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-go/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-go/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-go/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-go/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-go/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-go/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-go/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-go/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-go/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-go/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-go/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-go/#12-devops-api-streaming","text":"package main import ( \"archive/zip\" \"context\" \"crypto/tls\" \"crypto/x509\" \"encoding/json\" \"fmt\" \"io\" \"io/ioutil\" \"os\" \"path/filepath\" \"strconv\" \"strings\" \"github.com/gocql/gocql\" ) type Config struct { Host string `json:\"host\"` Port int `json:\"cql_port\"` } func main () { var clientID = os . Getenv ( \"ASTRA_CLIENT_ID\" ) var clientSecret = os . Getenv ( \"ASTRA_CLIENT_SECRET\" ) var secureConnectBundle = os . Getenv ( \"SECURE_CONNECT_BUNDLE\" ) if clientID == \"\" || clientSecret == \"\" || secureConnectBundle == \"\" { panic ( \"missing required environment variables\" ) } secureBundleDir := os . TempDir () fmt . Printf ( \"extracting secure connect bundle [%s] to [%s]\\n\" , secureConnectBundle , secureBundleDir ) if err := Unzip ( secureConnectBundle , secureBundleDir ); err != nil { panic ( err ) } configPath , _ := filepath . Abs ( secureBundleDir + \"/config.json\" ) fmt . Println ( \"config: \" + configPath ) configData , _ := ioutil . ReadFile ( configPath ) var cfg Config json . Unmarshal ( configData , & cfg ) cluster := gocql . NewCluster ( cfg . Host ) cluster . Authenticator = gocql . PasswordAuthenticator { Username : clientID , Password : clientSecret , } host := cfg . Host + \":\" + strconv . Itoa ( cfg . Port ) cluster . Hosts = [] string { host } fmt . Println ( \"connecting to: \" + host ) certPath , _ := filepath . Abs ( secureBundleDir + \"/cert\" ) keyPath , _ := filepath . Abs ( secureBundleDir + \"/key\" ) caPath , _ := filepath . Abs ( secureBundleDir + \"/ca.crt\" ) cert , _ := tls . LoadX509KeyPair ( certPath , keyPath ) caCert , _ := ioutil . ReadFile ( caPath ) caCertPool := x509 . NewCertPool () caCertPool . AppendCertsFromPEM ( caCert ) cluster . SslOpts = & gocql . SslOptions { Config : & tls . Config { Certificates : [] tls . Certificate { cert }, ServerName : cfg . Host , RootCAs : caCertPool , }, } session , err := cluster . CreateSession () if err != nil { panic ( err ) } fmt . Printf ( \"session established: %v\\n\" , session ) var releaseVersion string if err := session . Query ( \"select release_version from system.local\" ). WithContext ( context . Background ()). Consistency ( gocql . One ). Scan ( & releaseVersion ); err != nil { panic ( err ) } fmt . Printf ( \"release version: %s\\n\" , releaseVersion ) } func Unzip ( src , dest string ) error { r , err := zip . OpenReader ( src ) if err != nil { return err } defer func () { if err := r . Close (); err != nil { panic ( err ) } }() os . MkdirAll ( dest , 0755 ) // Closure to address file descriptors issue with all the deferred .Close() methods extractAndWriteFile := func ( f * zip . File ) error { rc , err := f . Open () if err != nil { return err } defer func () { if err := rc . Close (); err != nil { panic ( err ) } }() path := filepath . Join ( dest , f . Name ) // Check for ZipSlip (Directory traversal) if ! strings . HasPrefix ( path , filepath . Clean ( dest ) + string ( os . PathSeparator )) { return fmt . Errorf ( \"illegal file path: %s\" , path ) } if f . FileInfo (). IsDir () { os . MkdirAll ( path , f . Mode ()) } else { os . MkdirAll ( filepath . Dir ( path ), f . Mode ()) f , err := os . OpenFile ( path , os . O_WRONLY | os . O_CREATE | os . O_TRUNC , f . Mode ()) if err != nil { return err } defer func () { if err := f . Close (); err != nil { panic ( err ) } }() _ , err = io . Copy ( f , rc ) if err != nil { return err } } return nil } for _ , f := range r . File { err := extractAndWriteFile ( f ) if err != nil { return err } } return nil }","title":"12 Devops API Streaming"},{"location":"language-java/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces list \u00b6 Pick the interface you want to use from the list: Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage users and roles Astra Core Manage Databases Astra Core Manage Streaming 3. CQL Cassandra Drivers \u00b6 Drivers reference documentation can be found HERE , this page is focused on connectivity with Astra DB only. 3.1 Drivers version 4.x \u00b6 Version 4.x is the recommended version Version 4 is major redesign of the internal architecture. As such, it is not binary compatible with previous versions. However, most of the concepts remain unchanged, and the new API will look very familiar to 2.x and 3.x users. If you want to know more the rational is explained in this blogpost . If you are still using 3.x and want to migrate you can have a look the upgrade guide but you can also keep using 3.x as described below \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Any version 4.x should be compatible with Astra. Update your pom.xml file with the latest version of the 4.x libraries: <!-- (REQUIRED) --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-core </artifactId> <version> ${latest4x} </version> </dependency> <!-- OPTIONAL --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-query-builder </artifactId> <version> ${latest4x} </version> </dependency> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-mapper-runtime </artifactId> <version> ${latest4x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver4x ) import java.nio.file.Paths ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.oss.driver.api.core.CqlSession ; public class AstraDriver4x { static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver4x . class ); try ( CqlSession cqlSession = CqlSession . builder () . withCloudSecureConnectBundle ( Paths . get ( ASTRA_ZIP_FILE )) . withAuthCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . withKeyspace ( ASTRA_KEYSPACE ) . build ()) { logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , cqlSession . getKeyspace (). get ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 4.x Multiple Standalone Classes using driver 4.x Spring PetClinic in Reactive and specially the mapper \u23eb Back to top 3.2 Drivers version 3.x \u00b6 \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Please note that version 3.8+ is required to connect to Astra. Update your pom.xml file with the latest version of the 3.x libraries: <dependency> <groupId> com.datastax.cassandra </groupId> <artifactId> cassandra-driver-core </artifactId> <version> ${latest3x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver3x ) import java.io.File ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.driver.core.Cluster ; import com.datastax.driver.core.Session ; public class AstraDriver3x { // Define inputs static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver3x . class ); try ( Cluster cluster = Cluster . builder () . withCloudSecureConnectBundle ( new File ( ASTRA_ZIP_FILE )) . withCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . build () ) { Session session = cluster . connect ( ASTRA_KEYSPACE ); logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , session . getLoggedKeyspace ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 3.x Multiple Standalone Classes using driver 3.x \u23eb Back to top 3.3 Astra SDK \u00b6 TODO 4. Stargate REST Api \u00b6 \u2139\ufe0f Overview Stargate is a data gateway (Proxy) on top of Apache Cassandra exposing new interface to ease the integration. It is a way to create stateless components (1) and ease the integration with 4 different HTTP Apis (rest, doc, graphQL, gRPC). In this chapter we will cover integration with REST Apis also called DATA in the swagger specifications. To know more regarding this interface specially you can have a look to dedicated section of the wiki or reference Stargate Rest Api Quick Start Guide . \u26a0\ufe0f We recommend to use version V2 ( with V2 in the URL ) as it covers more features and the V1 would be deprecated sooner. \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project You simple need an HTTP Client to use the Rest API. There are a lot in the Java languages like HttpURLConnection , HttpClient introduced in Java 11 , Apache HTTPClient , OkHttpClient , Jetty HttpClient . A comparison is provided is this blogpost to make your choice. In this tutorial we will go with Apache HttpClient , this is the one used in the SDK, you should adapt the code depending on the framework you choosed. Import relevant dependencies for Apache Http Client in your pom.xml <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-restapi ) public class AstraRestApiHttpClient { static final String ASTRA_TOKEN = \"<change_with_your_token>\" ; static final String ASTRA_DB_ID = \"<change_with_your_database_identifier>\" ; static final String ASTRA_DB_REGION = \"<change_with_your_database_region>\" ; static final String ASTRA_DB_KEYSPACE = \"<change_with_your_keyspace>\" ; static Logger logger = LoggerFactory . getLogger ( AstraRestApiHttpClient . class ); public static void main ( String [] args ) throws Exception { String apiRestEndpoint = new StringBuilder ( \"https://\" ) . append ( ASTRA_DB_ID ). append ( \"-\" ) . append ( ASTRA_DB_REGION ) . append ( \".apps.astra.datastax.com/api/rest\" ) . toString (); logger . info ( \"Rest Endpoint is {}\" , apiRestEndpoint ); try ( CloseableHttpClient httpClient = HttpClients . createDefault ()) { listKeyspaces ( httpClient , apiRestEndpoint ); createTable ( httpClient , apiRestEndpoint ); insertRow ( httpClient , apiRestEndpoint ); retrieveRow ( httpClient , apiRestEndpoint ); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } List keyspaces private static void listKeyspaces ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet listKeyspacesReq = new HttpGet ( apiRestEndpoint + \"/v2/schemas/keyspaces\" ); listKeyspacesReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( listKeyspacesReq )) { if ( 200 == res . getCode ()) { logger . info ( \"[OK] Keyspaces list retrieved\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Create a Table Query used is createTableJson here: { \"name\" : \"users\" , \"columnDefinitions\" : [ { \"name\" : \"firstname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"lastname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"email\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"color\" , \"typeDefinition\" : \"text\" } ], \"primaryKey\" : { \"partitionKey\" : [ \"firstname\" ], \"clusteringKey\" : [ \"lastname\" ] }, \"tableOptions\" : { \"defaultTimeToLive\" : 0 , \"clusteringExpression\" : [{ \"column\" : \"lastname\" , \"order\" : \"ASC\" }] } } Create Table code private static void createTable ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost createTableReq = new HttpPost ( apiRestEndpoint + \"/v2/schemas/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/tables\" ); createTableReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); String createTableJson = \"{...JSON.....}\" ; createTableReq . setEntity ( new StringEntity ( createTableJson , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( createTableReq )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Table Created (if needed)\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Insert a Row private static void insertRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost insertCedrick = new HttpPost ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users\" ); insertCedrick . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); insertCedrick . setEntity ( new StringEntity ( \"{\" + \" \\\"firstname\\\": \\\"Cedrick\\\",\" + \" \\\"lastname\\\" : \\\"Lunven\\\",\" + \" \\\"email\\\" : \\\"c.lunven@gmail.com\\\",\" + \" \\\"color\\\" : \\\"blue\\\" }\" , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( insertCedrick )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Row inserted\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Retrieve a row private static void retrieveRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet rowReq = new HttpGet ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users/Cedrick/Lunven\" ); rowReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( rowReq )) { if ( 200 == res . getCode ()) { String payload = EntityUtils . toString ( res . getEntity ()); logger . info ( \"[OK] Row retrieved\" ); logger . info ( \"Row retrieved : {}\" , payload ); } } } \u23eb Back to top 5. Stargate Document Api \u00b6 \u2139\ufe0f Overview api XXX \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Import relevant dependencies for Apache Http Client in your pom.xml . Jackon is also helpful to serialize or unserialized Java Objects as JSON. <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-docapi ) \u23eb Back to top 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Java"},{"location":"language-java/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-java/#2-interfaces-list","text":"Pick the interface you want to use from the list: Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage users and roles Astra Core Manage Databases Astra Core Manage Streaming","title":"2. Interfaces list"},{"location":"language-java/#3-cql-cassandra-drivers","text":"Drivers reference documentation can be found HERE , this page is focused on connectivity with Astra DB only.","title":"3. CQL Cassandra Drivers"},{"location":"language-java/#31-drivers-version-4x","text":"Version 4.x is the recommended version Version 4 is major redesign of the internal architecture. As such, it is not binary compatible with previous versions. However, most of the concepts remain unchanged, and the new API will look very familiar to 2.x and 3.x users. If you want to know more the rational is explained in this blogpost . If you are still using 3.x and want to migrate you can have a look the upgrade guide but you can also keep using 3.x as described below \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Any version 4.x should be compatible with Astra. Update your pom.xml file with the latest version of the 4.x libraries: <!-- (REQUIRED) --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-core </artifactId> <version> ${latest4x} </version> </dependency> <!-- OPTIONAL --> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-query-builder </artifactId> <version> ${latest4x} </version> </dependency> <dependency> <groupId> com.datastax.oss </groupId> <artifactId> java-driver-mapper-runtime </artifactId> <version> ${latest4x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver4x ) import java.nio.file.Paths ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.oss.driver.api.core.CqlSession ; public class AstraDriver4x { static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver4x . class ); try ( CqlSession cqlSession = CqlSession . builder () . withCloudSecureConnectBundle ( Paths . get ( ASTRA_ZIP_FILE )) . withAuthCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . withKeyspace ( ASTRA_KEYSPACE ) . build ()) { logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , cqlSession . getKeyspace (). get ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 4.x Multiple Standalone Classes using driver 4.x Spring PetClinic in Reactive and specially the mapper \u23eb Back to top","title":"3.1 Drivers version 4.x"},{"location":"language-java/#32-drivers-version-3x","text":"\ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit , Validate your installation with java --version You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Please note that version 3.8+ is required to connect to Astra. Update your pom.xml file with the latest version of the 3.x libraries: <dependency> <groupId> com.datastax.cassandra </groupId> <artifactId> cassandra-driver-core </artifactId> <version> ${latest3x} </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-driver3x ) import java.io.File ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; import com.datastax.driver.core.Cluster ; import com.datastax.driver.core.Session ; public class AstraDriver3x { // Define inputs static final String ASTRA_ZIP_FILE = \"<path_to_secureConnectBundle.zip>\" ; static final String ASTRA_USERNAME = \"<provide_a_clientId>\" ; static final String ASTRA_PASSWORD = \"<provide_a_clientSecret>\" ; static final String ASTRA_KEYSPACE = \"<provide_your_keyspace>\" ; public static void main ( String [] args ) { Logger logger = LoggerFactory . getLogger ( AstraDriver3x . class ); try ( Cluster cluster = Cluster . builder () . withCloudSecureConnectBundle ( new File ( ASTRA_ZIP_FILE )) . withCredentials ( ASTRA_USERNAME , ASTRA_PASSWORD ) . build () ) { Session session = cluster . connect ( ASTRA_KEYSPACE ); logger . info ( \"[OK] Welcome to ASTRA. Connected to Keyspace {}\" , session . getLoggedKeyspace ()); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } } \ud83d\udd17 Extra Resources for Cassandra Drivers 3.x Multiple Standalone Classes using driver 3.x \u23eb Back to top","title":"3.2 Drivers version 3.x"},{"location":"language-java/#33-astra-sdk","text":"TODO","title":"3.3 Astra SDK"},{"location":"language-java/#4-stargate-rest-api","text":"\u2139\ufe0f Overview Stargate is a data gateway (Proxy) on top of Apache Cassandra exposing new interface to ease the integration. It is a way to create stateless components (1) and ease the integration with 4 different HTTP Apis (rest, doc, graphQL, gRPC). In this chapter we will cover integration with REST Apis also called DATA in the swagger specifications. To know more regarding this interface specially you can have a look to dedicated section of the wiki or reference Stargate Rest Api Quick Start Guide . \u26a0\ufe0f We recommend to use version V2 ( with V2 in the URL ) as it covers more features and the V1 would be deprecated sooner. \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project You simple need an HTTP Client to use the Rest API. There are a lot in the Java languages like HttpURLConnection , HttpClient introduced in Java 11 , Apache HTTPClient , OkHttpClient , Jetty HttpClient . A comparison is provided is this blogpost to make your choice. In this tutorial we will go with Apache HttpClient , this is the one used in the SDK, you should adapt the code depending on the framework you choosed. Import relevant dependencies for Apache Http Client in your pom.xml <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-restapi ) public class AstraRestApiHttpClient { static final String ASTRA_TOKEN = \"<change_with_your_token>\" ; static final String ASTRA_DB_ID = \"<change_with_your_database_identifier>\" ; static final String ASTRA_DB_REGION = \"<change_with_your_database_region>\" ; static final String ASTRA_DB_KEYSPACE = \"<change_with_your_keyspace>\" ; static Logger logger = LoggerFactory . getLogger ( AstraRestApiHttpClient . class ); public static void main ( String [] args ) throws Exception { String apiRestEndpoint = new StringBuilder ( \"https://\" ) . append ( ASTRA_DB_ID ). append ( \"-\" ) . append ( ASTRA_DB_REGION ) . append ( \".apps.astra.datastax.com/api/rest\" ) . toString (); logger . info ( \"Rest Endpoint is {}\" , apiRestEndpoint ); try ( CloseableHttpClient httpClient = HttpClients . createDefault ()) { listKeyspaces ( httpClient , apiRestEndpoint ); createTable ( httpClient , apiRestEndpoint ); insertRow ( httpClient , apiRestEndpoint ); retrieveRow ( httpClient , apiRestEndpoint ); } logger . info ( \"[OK] Success\" ); System . exit ( 0 ); } List keyspaces private static void listKeyspaces ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet listKeyspacesReq = new HttpGet ( apiRestEndpoint + \"/v2/schemas/keyspaces\" ); listKeyspacesReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( listKeyspacesReq )) { if ( 200 == res . getCode ()) { logger . info ( \"[OK] Keyspaces list retrieved\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Create a Table Query used is createTableJson here: { \"name\" : \"users\" , \"columnDefinitions\" : [ { \"name\" : \"firstname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"lastname\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"email\" , \"typeDefinition\" : \"text\" }, { \"name\" : \"color\" , \"typeDefinition\" : \"text\" } ], \"primaryKey\" : { \"partitionKey\" : [ \"firstname\" ], \"clusteringKey\" : [ \"lastname\" ] }, \"tableOptions\" : { \"defaultTimeToLive\" : 0 , \"clusteringExpression\" : [{ \"column\" : \"lastname\" , \"order\" : \"ASC\" }] } } Create Table code private static void createTable ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost createTableReq = new HttpPost ( apiRestEndpoint + \"/v2/schemas/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/tables\" ); createTableReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); String createTableJson = \"{...JSON.....}\" ; createTableReq . setEntity ( new StringEntity ( createTableJson , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( createTableReq )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Table Created (if needed)\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Insert a Row private static void insertRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { HttpPost insertCedrick = new HttpPost ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users\" ); insertCedrick . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); insertCedrick . setEntity ( new StringEntity ( \"{\" + \" \\\"firstname\\\": \\\"Cedrick\\\",\" + \" \\\"lastname\\\" : \\\"Lunven\\\",\" + \" \\\"email\\\" : \\\"c.lunven@gmail.com\\\",\" + \" \\\"color\\\" : \\\"blue\\\" }\" , ContentType . APPLICATION_JSON )); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( insertCedrick )) { if ( 201 == res . getCode ()) { logger . info ( \"[OK] Row inserted\" ); logger . info ( \"Returned message: {}\" , EntityUtils . toString ( res . getEntity ())); } } } Retrieve a row private static void retrieveRow ( CloseableHttpClient httpClient , String apiRestEndpoint ) throws Exception { // Build Request HttpGet rowReq = new HttpGet ( apiRestEndpoint + \"/v2/keyspaces/\" + ASTRA_DB_KEYSPACE + \"/users/Cedrick/Lunven\" ); rowReq . addHeader ( \"X-Cassandra-Token\" , ASTRA_TOKEN ); // Execute Request try ( CloseableHttpResponse res = httpClient . execute ( rowReq )) { if ( 200 == res . getCode ()) { String payload = EntityUtils . toString ( res . getEntity ()); logger . info ( \"[OK] Row retrieved\" ); logger . info ( \"Row retrieved : {}\" , payload ); } } } \u23eb Back to top","title":"4. Stargate REST Api"},{"location":"language-java/#5-stargate-document-api","text":"\u2139\ufe0f Overview api XXX \ud83d\udce6 Prerequisites [ASTRA] You should have an Astra account You should Create and Astra Database You should Have an Astra Token \ud83d\udce6 Prerequisites [Development Environment] You should install Java Development Kit (JDK) 8 : Use the reference documentation to install a Java Development Kit . You should install Apache Maven : Use the reference documentation and validate your installation with mvn -version \ud83d\udce6 Setup Project Import relevant dependencies for Apache Http Client in your pom.xml . Jackon is also helpful to serialize or unserialized Java Objects as JSON. <dependency> <groupId> org.apache.httpcomponents.client5 </groupId> <artifactId> httpclient5 </artifactId> <version> 5.1.3 </version> </dependency> \ud83d\udda5\ufe0f Sample Code (project astra-httpclient-docapi ) \u23eb Back to top","title":"5. Stargate Document Api"},{"location":"language-java/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-java/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-java/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-java/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-java/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-java/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-java/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-java/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-java/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-java/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-java/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-java/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-java/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"language-javascript/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Javascript"},{"location":"language-javascript/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-javascript/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"language-javascript/#3-cql","text":"","title":"3. CQL"},{"location":"language-javascript/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"language-javascript/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"language-javascript/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"language-javascript/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"language-javascript/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"language-javascript/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"language-javascript/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"language-javascript/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"language-javascript/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-javascript/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-javascript/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-javascript/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-javascript/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-javascript/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-javascript/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-javascript/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-javascript/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-javascript/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-javascript/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-javascript/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-javascript/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"language-python/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Python"},{"location":"language-python/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-python/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"language-python/#3-cql","text":"","title":"3. CQL"},{"location":"language-python/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"language-python/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"language-python/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"language-python/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"language-python/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"language-python/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"language-python/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"language-python/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"language-python/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-python/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-python/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-python/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-python/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-python/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-python/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-python/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-python/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-python/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-python/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-python/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-python/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"language-rust/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Rust"},{"location":"language-rust/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-rust/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"language-rust/#3-cql","text":"","title":"3. CQL"},{"location":"language-rust/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"language-rust/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"language-rust/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"language-rust/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"language-rust/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"language-rust/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"language-rust/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"language-rust/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"language-rust/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-rust/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-rust/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-rust/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-rust/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-rust/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-rust/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-rust/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-rust/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-rust/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-rust/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-rust/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-rust/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"language-scala/","text":"1. Overview \u00b6 Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here . 2. Interfaces List \u00b6 Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming 3. CQL \u00b6 3.1 Cassandra Drivers \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 3.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4. Stargate REST Api \u00b6 4.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 4.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5. Stargate Document Api \u00b6 5.1 Axios \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 5.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6 Stargate GraphQL \u00b6 6.1 CQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 6.2 GraphQL First \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7. Stargate gRPC \u00b6 7.1 Stargate Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 7.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8. Pulsar Client \u00b6 8.1 Pulsar Client \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 8.2 Astra SDK \u00b6 \u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO 9. Pulsar Admin \u00b6 10 Devops API Database \u00b6 11 Devops API Organization \u00b6 12 Devops API Streaming \u00b6","title":"Scala"},{"location":"language-scala/#1-overview","text":"Astra provides include multiple services (Database, Streaming), and, for each, there are multiple Api and interfaces . Frameworks and tools to connect to Astra are related to the Apis you choose. Pick the interface in the table to get relevant instructions. In most case you download a working sample. Those are standalone examples designed as simple as possible. please note that a Software developement KIT (SDK) is also available for you to reduce boilerplate. More information here .","title":"1. Overview"},{"location":"language-scala/#2-interfaces-list","text":"Component Interface Description Astra DB Main connection to Cassandra Astra DB CQL exposes as stateless rest resources Astra DB Use Cassandra as a Document DB Astra DB Create tables and use generated CRUD Astra DB CQL exposes through serialized protobuf Astra Streaming Create Producer, Consumers, Subscriptions.. Astra Streaming Administrate your Pulsar cluster Astra Core Manage Databases Astra Core Manage users and roles Astra Core Manage Streaming","title":"2. Interfaces List"},{"location":"language-scala/#3-cql","text":"","title":"3. CQL"},{"location":"language-scala/#31-cassandra-drivers","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.1 Cassandra Drivers"},{"location":"language-scala/#32-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"3.2 Astra SDK"},{"location":"language-scala/#4-stargate-rest-api","text":"","title":"4. Stargate REST Api"},{"location":"language-scala/#41-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.1 Axios"},{"location":"language-scala/#42-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"4.2 Astra SDK"},{"location":"language-scala/#5-stargate-document-api","text":"","title":"5. Stargate Document Api"},{"location":"language-scala/#51-axios","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.1 Axios"},{"location":"language-scala/#52-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"5.2 Astra SDK"},{"location":"language-scala/#6-stargate-graphql","text":"","title":"6 Stargate GraphQL"},{"location":"language-scala/#61-cql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.1 CQL First"},{"location":"language-scala/#62-graphql-first","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"6.2 GraphQL First"},{"location":"language-scala/#7-stargate-grpc","text":"","title":"7. Stargate gRPC"},{"location":"language-scala/#71-stargate-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.1 Stargate Client"},{"location":"language-scala/#72-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"7.2 Astra SDK"},{"location":"language-scala/#8-pulsar-client","text":"","title":"8. Pulsar Client"},{"location":"language-scala/#81-pulsar-client","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.1 Pulsar Client"},{"location":"language-scala/#82-astra-sdk","text":"\u2139\ufe0f Overview TODO \ud83d\udce6 Prerequisites [ASTRA] TODO \ud83d\udce6 Prerequisites [Development Environment] TODO \ud83d\udce6 Setup Project TODO \ud83d\udda5\ufe0f Sample Code TODO","title":"8.2 Astra SDK"},{"location":"language-scala/#9-pulsar-admin","text":"","title":"9. Pulsar Admin"},{"location":"language-scala/#10-devops-api-database","text":"","title":"10 Devops API Database"},{"location":"language-scala/#11-devops-api-organization","text":"","title":"11 Devops API Organization"},{"location":"language-scala/#12-devops-api-streaming","text":"","title":"12 Devops API Streaming"},{"location":"section-coding/","text":"\ud83d\udee0\ufe0f Pick a language \u00b6 \ud83d\udee0\ufe0f Pick a framework \u00b6","title":"\ud83c\udfe0 List"},{"location":"section-coding/#pick-a-language","text":"","title":"\ud83d\udee0\ufe0f Pick a language"},{"location":"section-coding/#pick-a-framework","text":"","title":"\ud83d\udee0\ufe0f Pick a framework"},{"location":"section-tools/","text":"Apache Airflow : Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems Apache Nifi : NiFi was built to automate the flow of data between systems. While the term 'dataflow' is used in a variety of contexts, we use it here to mean the automated and managed flow of information between systems. Apache Spark : Apache Spark is an open-source, distributed processing system used for big data workloads. It utilizes in-memory caching, and optimized query execution for fast analytic queries against data of any size. Use Apache Spark to connect to your database and begin accessing your Astra DB tables using Scala in spark-shell. Cloud Functions (Python Driver) : Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to extend Astra DB with additional data processing capabilities and connect Astra DB with other cloud services into data pipelines. Cloud Functions (Python SDK) : Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to extend Astra DB with additional data processing capabilities and connect Astra DB with other cloud services into data pipelines. Cql Proxy : cql-proxy is designed to forward your application's CQL traffic to an appropriate database service. It listens on a local address and securely forwards that traffic. Cql Shell : the standalone CQLSH client is a separate, lightweight tool you can use to interact with your database. Datagrip Jetbrains : DataGrip is a database management environment for developers. It is designed to query, create, and manage databases. Databases can work locally, on a server, or in the cloud. Supports MySQL, PostgreSQL, Microsoft SQL Server, Oracle, and more. If you have a JDBC driver, add it to DataGrip, connect to your DBMS, and start working. DataStax Bulk : The DataStax Bulk Loader tool (DSBulk) is a unified tool for loading into and unloading from Cassandra-compatible storage engines, such as OSS Apache Cassandra\u00ae, DataStax Astra and DataStax Enterprise (DSE). DBeaver : DBeaver is a universal database management tool for everyone who needs to work with data in a professional way. With DBeaver you are able to manipulate with your data like in a regular spreadsheet, create analytical reports based on records from different data storages, export information in an appropriate format. IntelliJ IDEA : The Capable & Ergonomic Java IDE by JetBrains JanusGraph : JanusGraph is designed to support the processing of graphs so large that they require storage and computational capacities beyond what a single machine can provide. Scaling graph data processing for real time traversals and analytical queries is JanusGraph\u2019s foundational benefit. This section will discuss the various specific benefits of JanusGraph and its underlying, supported persistence solutions. Micronaut : Micronaut is a modern, JVM-based, full stack Java framework designed for building modular, easily testable JVM applications with support for Java, Kotlin, and Groovy. Micronaut is developed by the creators of the Grails framework and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails. MindDB :MindsDB enables you to use ML predictions in your database using SQL. Pentaho Data Integration : Pentaho Data Integration (PDI) provides the Extract, Transform, and Load (ETL) capabilities that facilitate the process of capturing, cleansing, and storing data using a uniform and consistent format that is accessible and relevant to end users and IoT technologies. TablePlus : TablePlus is a modern, native tool with elegant UI that allows you to simultaneously manage multiple databases such as MySQL, PostgreSQL, SQLite, Microsoft SQL Server and more.","title":"\ud83d\udce6 Tools List"},{"location":"section-work-with-data/","text":"\ud83d\udee0\ufe0f Load and Export DATA \u00b6 \ud83d\udee0\ufe0f Browse DATA \u00b6 \ud83d\udee0\ufe0f DATA Modelling \u00b6","title":"\ud83c\udfe0 Home"},{"location":"section-work-with-data/#load-and-export-data","text":"","title":"\ud83d\udee0\ufe0f Load and Export DATA"},{"location":"section-work-with-data/#browse-data","text":"","title":"\ud83d\udee0\ufe0f Browse DATA"},{"location":"section-work-with-data/#data-modelling","text":"","title":"\ud83d\udee0\ufe0f DATA Modelling"},{"location":"tool-apache-airflow/","text":"A - Overview \u00b6 Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems. These instructions will step through tasks/adjustments to be done in each product (Astra DB, cql-proxy, Apache Airflow), ultimately resulting in Airflow being able to work with AstraDB in its directed acyclic graphs (DAG). \u2139\ufe0f Apache Airflow Documentation B - Prerequisites \u00b6 You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install python3 and pip3 (local deploymnent of Airflow) or Docker (docker) This article was written for Apache Airflow version 2.2.3 on MacOS with Python 3.9 . C - Installation \u00b6 \u2705 Step 0 Download and install Following the Apache Airflow reference documentation download and install the software. \u2705 Step 1 Create the keyspace airflow From the Astra DB dashboard , click on your database name. Scroll down to where the keyspaces are listed, and click the Add Keyspace button to create a new keyspace. Name this keyspace airflow . \u2705 Step 2 Start Cql Proxy DataStax\u2019s cql-proxy is designed to function as an intermediate connection point to allow legacy Apache Cassandra applications to connect to DataStax Astra DB using its new Secure Connect Bundle. There are a few ways to install and run DataStax\u2019s cql-proxy, as outlined in CQL-PROXY . Be sure to start cql-proxy with the following settings: Using the Secure Connect Bundle downloaded in the previous section Binding it to the listen IP of the server instance Specifying the username of \u201ctoken\u201d Specifying the Astra Token created for the user in Astra DB as the password You can run cql-proxy (in the foreground) from the command line in this way, like this: ./cql-proxy --bundle ~/local/astraCreds/secure-connect.zip \\ --bind 127 .0.0.1 \\ --username token \\ --password AstraCS:rtFckUZblahblahblahblahblahblaha3953d799a525 Important to note that the command shown above binds cql-proxy to localhost (127.0.0.1), meaning it is not reachable (by Airflow) from outside the server instance. \u2705 Step 3 Create a new connection in Apache Airflow Inside Apache Airflow, click Connections from underneath the Admin drop-down menu. Then click on the blue button labeled with the plus sign ( + ) to add a new connection. Fill out the form as shown in Figure 2: Connection Id: A unique identifier for the connection in Apache Airflow, which will be referenced inside the DAG code. We will use \u201ccassandra_cqlproxy.\u201d Connection Type: Select \u201cCassandra\u201d from the drop-down. If it is not present, you will have to install Airflow\u2019s Cassandra provider. Host: The listen address that cql-proxy is bound to. In this case, that is \u201c127.0.0.1.\u201d Schema: The Cassandra keyspace which we created in Astra DB. We\u2019ll set that to \u201cairflow\u201d in this case. Login: Your Astra DB client id. Password: Your Astra DB client secret. Port: The port that cql-proxy is listening on for the CQL native binary protocol, most likely 9042. Figure 2 - Create a new Cassandra connection for Apache Airflow. Click the blue Save button to persist the new connection. \u2705 Step 4 Create a new DAG in Apache Airflow A directed acyclic graph (DAG) is essentially a Python script which imports one or more libraries specific to Airflow. To create a new DAG, first locate your DAG directory. By default, Airflow looks for custom DAGs in the ~/airflow/dags/ directory. For testing, there is a sample DAG out in the following GitHub repository: https://github.com/aar0np/DS_Python_stuff/blob/main/cassandra_test_dag.py This DAG uses the following line to reference the Cassandra connection we created in the above step: hook = CassandraHook('cassandra_cqlproxy') The other important aspect is that this DAG sets its unique identifier as cass_hooks_tutorial : with DAG( 'cass_hooks_tutorial', It also specifically creates two unique tasks: check_table_exists query_system_local \u2705 Step 5 Final Test To test the connection, copy the DAG mentioned above into the /dags/ directory. Then we will invoke Airflow\u2019s task testing functionality, by running airflow tasks test and specifying: The DAG\u2019s unique identifier The name of the task to be run The execution date If today\u2019s date is 2022-02-08, the command looks like this: airflow tasks test cass_hooks_tutorial check_table_exists 2022-02-08 Many messages will go by quickly. If it worked, the final messages should look something like this: INFO - Done. Returned value was: True INFO - Marking task as SUCCESS. dag_id=cass_hooks_tutorial, task_id=check_table_exists, execution_date=20220208T000000, start_date=20220208T195333, end_date=20220208T195334 D - Acknowledgements \u00b6 Special thanks goes out to Obioma Anomnachi of Anant. Obi\u2019s video and GitHub repo proved quite helpful in building out this tutorial.","title":"Apache Airflow"},{"location":"tool-apache-airflow/#a-overview","text":"Apache Airflow is an open source workflow management system. It provides components which allow engineers to build data pipelines between different systems. These instructions will step through tasks/adjustments to be done in each product (Astra DB, cql-proxy, Apache Airflow), ultimately resulting in Airflow being able to work with AstraDB in its directed acyclic graphs (DAG). \u2139\ufe0f Apache Airflow Documentation","title":"A - Overview"},{"location":"tool-apache-airflow/#b-prerequisites","text":"You should have an Astra account You should Create and Astra Database You should Have an Astra Token You should Download your Secure bundle You should install python3 and pip3 (local deploymnent of Airflow) or Docker (docker) This article was written for Apache Airflow version 2.2.3 on MacOS with Python 3.9 .","title":"B - Prerequisites"},{"location":"tool-apache-airflow/#c-installation","text":"\u2705 Step 0 Download and install Following the Apache Airflow reference documentation download and install the software. \u2705 Step 1 Create the keyspace airflow From the Astra DB dashboard , click on your database name. Scroll down to where the keyspaces are listed, and click the Add Keyspace button to create a new keyspace. Name this keyspace airflow . \u2705 Step 2 Start Cql Proxy DataStax\u2019s cql-proxy is designed to function as an intermediate connection point to allow legacy Apache Cassandra applications to connect to DataStax Astra DB using its new Secure Connect Bundle. There are a few ways to install and run DataStax\u2019s cql-proxy, as outlined in CQL-PROXY . Be sure to start cql-proxy with the following settings: Using the Secure Connect Bundle downloaded in the previous section Binding it to the listen IP of the server instance Specifying the username of \u201ctoken\u201d Specifying the Astra Token created for the user in Astra DB as the password You can run cql-proxy (in the foreground) from the command line in this way, like this: ./cql-proxy --bundle ~/local/astraCreds/secure-connect.zip \\ --bind 127 .0.0.1 \\ --username token \\ --password AstraCS:rtFckUZblahblahblahblahblahblaha3953d799a525 Important to note that the command shown above binds cql-proxy to localhost (127.0.0.1), meaning it is not reachable (by Airflow) from outside the server instance. \u2705 Step 3 Create a new connection in Apache Airflow Inside Apache Airflow, click Connections from underneath the Admin drop-down menu. Then click on the blue button labeled with the plus sign ( + ) to add a new connection. Fill out the form as shown in Figure 2: Connection Id: A unique identifier for the connection in Apache Airflow, which will be referenced inside the DAG code. We will use \u201ccassandra_cqlproxy.\u201d Connection Type: Select \u201cCassandra\u201d from the drop-down. If it is not present, you will have to install Airflow\u2019s Cassandra provider. Host: The listen address that cql-proxy is bound to. In this case, that is \u201c127.0.0.1.\u201d Schema: The Cassandra keyspace which we created in Astra DB. We\u2019ll set that to \u201cairflow\u201d in this case. Login: Your Astra DB client id. Password: Your Astra DB client secret. Port: The port that cql-proxy is listening on for the CQL native binary protocol, most likely 9042. Figure 2 - Create a new Cassandra connection for Apache Airflow. Click the blue Save button to persist the new connection. \u2705 Step 4 Create a new DAG in Apache Airflow A directed acyclic graph (DAG) is essentially a Python script which imports one or more libraries specific to Airflow. To create a new DAG, first locate your DAG directory. By default, Airflow looks for custom DAGs in the ~/airflow/dags/ directory. For testing, there is a sample DAG out in the following GitHub repository: https://github.com/aar0np/DS_Python_stuff/blob/main/cassandra_test_dag.py This DAG uses the following line to reference the Cassandra connection we created in the above step: hook = CassandraHook('cassandra_cqlproxy') The other important aspect is that this DAG sets its unique identifier as cass_hooks_tutorial : with DAG( 'cass_hooks_tutorial', It also specifically creates two unique tasks: check_table_exists query_system_local \u2705 Step 5 Final Test To test the connection, copy the DAG mentioned above into the /dags/ directory. Then we will invoke Airflow\u2019s task testing functionality, by running airflow tasks test and specifying: The DAG\u2019s unique identifier The name of the task to be run The execution date If today\u2019s date is 2022-02-08, the command looks like this: airflow tasks test cass_hooks_tutorial check_table_exists 2022-02-08 Many messages will go by quickly. If it worked, the final messages should look something like this: INFO - Done. Returned value was: True INFO - Marking task as SUCCESS. dag_id=cass_hooks_tutorial, task_id=check_table_exists, execution_date=20220208T000000, start_date=20220208T195333, end_date=20220208T195334","title":"C - Installation"},{"location":"tool-apache-airflow/#d-acknowledgements","text":"Special thanks goes out to Obioma Anomnachi of Anant. Obi\u2019s video and GitHub repo proved quite helpful in building out this tutorial.","title":"D - Acknowledgements"},{"location":"img/google-cloud-functions-python-driver/","text":"Connecting to Astra DB from a Google Cloud Function using Python Driver and Cloud Console \u00b6 Overview \u00b6 Cloud Functions is Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to: - Extend Astra DB with additional data processing capabilities, such as aggregating, summarizing and validating data periodically; - Connect Astra DB with other cloud services into data pipelines that move, process and analyze data. Prerequisites \u00b6 Create an Astra Database Create an Astra Token Download a Secure Connect Bundle Optionally, if you are new to Cloud Functions, practice creating a simpler function first Creating a Google Cloud Function to Access Astra DB using Python Driver and Cloud Console \u00b6 \u2705 Step 1: Create a secret with the secure connect bundle file. \u00b6 Go to the Secret Manager page , select a project that has Secret Manager and Cloud Functions enabled, and click Create secret . Give a Name to the secret and upload the secure connect bundle file as a Secret value . (See the Prerequisites section above if you need to download your secure connect bundle.) Optionally, customize other secret management settings. Click Create secret . On the Secret Manager page , find the newly created secret. \u2705 Step 2: Create a function. \u00b6 Go to the Functions Overview page , select the same project that has Secret Manager and Cloud Functions enabled, and click Create function . Under the Basics section, specify preferred Function name and Region . Under the Trigger section, select HTTP , Allow unauthenticated invocations , and Require HTTPS . Click Save . Under the Runtime, build, connections and security settings section, customize additional settings and create these Runtime environment variables : ASTRA_DB_CLIENT_ID : A Client ID is generated together with an application token (see the Prerequisites section above). ASTRA_DB_CLIENT_SECRET : A Client secret is generated together with an application token (see the Prerequisites section above). Note that, for better security, you can alternatively use the Secret Manager service to store and manage a client secret. A secret can then be similarly exposed as an environment variable. The settings can be found under the Runtime, build, connections and security settings section, the Security tab, and the Secrets field. Under the Runtime, build, connections and security settings section and the Security , click Reference a secret . Select the previously created Secret with the secure connect bundle file, Grant the service account access to the secret, if needed, use Mounted as volume in the Reference method field, and enter secrets in the Mount path field. Notice the final Path that should be used to access the secure connect bundle in the function code. Click Done and Next . Select Python 3.7 or your preferred version in the Runtime field. Select Inline Editor in the Source code field. Enter query_astra_db in the Entry point field. Add cassandra-driver , a Python client library for Apache Cassandra, DataStax Astra DB and DataStax Enterprise, to the requirements.txt file. Replace the main.py content with: from cassandra.cluster import Cluster from cassandra.auth import PlainTextAuthProvider import os from shutil import copyfile def query_astra_db ( request ): # Copy the secure connect bundle file to the writable part of the file system /tmp copyfile ( '/secrets/secure-connect-secret' , '/tmp/secure-connect-for-my-database.zip' ) ASTRA_DB_CLIENT_ID = os . environ . get ( 'ASTRA_DB_CLIENT_ID' ) ASTRA_DB_CLIENT_SECRET = os . environ . get ( 'ASTRA_DB_CLIENT_SECRET' ) cloud_config = { 'secure_connect_bundle' : '/tmp/secure-connect-for-my-database.zip' } auth_provider = PlainTextAuthProvider ( ASTRA_DB_CLIENT_ID , ASTRA_DB_CLIENT_SECRET ) cluster = Cluster ( cloud = cloud_config , auth_provider = auth_provider , protocol_version = 4 ) session = cluster . connect () row = session . execute ( \"SELECT cql_version FROM system.local WHERE key = 'local';\" ) . one () print ( row [ 0 ]) print ( 'Success' ) You can learn more about the code above by reading the cassandra-driver documentation. \u2705 Step 3: Deploy the function. \u00b6 Click Deploy . On the Cloud Functions Overview page, find the newly deployed function. \u2705 Step 4: Test the function. \u00b6 Under Actions , select Test function . On the testing page, click Test the function and observe the output. Notice the CQL version output 3.4.5 and status code 200 . \u2705 Step 5: View logs. \u00b6 You can further explore the log history by either clicking on the Logs tab or the View all logs link that opens Logs Explorer .","title":"Connecting to Astra DB from a Google Cloud Function using Python Driver and Cloud Console"},{"location":"img/google-cloud-functions-python-driver/#connecting-to-astra-db-from-a-google-cloud-function-using-python-driver-and-cloud-console","text":"","title":"Connecting to Astra DB from a Google Cloud Function using Python Driver and Cloud Console"},{"location":"img/google-cloud-functions-python-driver/#overview","text":"Cloud Functions is Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to: - Extend Astra DB with additional data processing capabilities, such as aggregating, summarizing and validating data periodically; - Connect Astra DB with other cloud services into data pipelines that move, process and analyze data.","title":"Overview"},{"location":"img/google-cloud-functions-python-driver/#prerequisites","text":"Create an Astra Database Create an Astra Token Download a Secure Connect Bundle Optionally, if you are new to Cloud Functions, practice creating a simpler function first","title":"Prerequisites"},{"location":"img/google-cloud-functions-python-driver/#creating-a-google-cloud-function-to-access-astra-db-using-python-driver-and-cloud-console","text":"","title":"Creating a Google Cloud Function to Access Astra DB using Python Driver and Cloud Console"},{"location":"img/google-cloud-functions-python-driver/#step-1-create-a-secret-with-the-secure-connect-bundle-file","text":"Go to the Secret Manager page , select a project that has Secret Manager and Cloud Functions enabled, and click Create secret . Give a Name to the secret and upload the secure connect bundle file as a Secret value . (See the Prerequisites section above if you need to download your secure connect bundle.) Optionally, customize other secret management settings. Click Create secret . On the Secret Manager page , find the newly created secret.","title":"\u2705 Step 1: Create a secret with the secure connect bundle file."},{"location":"img/google-cloud-functions-python-driver/#step-2-create-a-function","text":"Go to the Functions Overview page , select the same project that has Secret Manager and Cloud Functions enabled, and click Create function . Under the Basics section, specify preferred Function name and Region . Under the Trigger section, select HTTP , Allow unauthenticated invocations , and Require HTTPS . Click Save . Under the Runtime, build, connections and security settings section, customize additional settings and create these Runtime environment variables : ASTRA_DB_CLIENT_ID : A Client ID is generated together with an application token (see the Prerequisites section above). ASTRA_DB_CLIENT_SECRET : A Client secret is generated together with an application token (see the Prerequisites section above). Note that, for better security, you can alternatively use the Secret Manager service to store and manage a client secret. A secret can then be similarly exposed as an environment variable. The settings can be found under the Runtime, build, connections and security settings section, the Security tab, and the Secrets field. Under the Runtime, build, connections and security settings section and the Security , click Reference a secret . Select the previously created Secret with the secure connect bundle file, Grant the service account access to the secret, if needed, use Mounted as volume in the Reference method field, and enter secrets in the Mount path field. Notice the final Path that should be used to access the secure connect bundle in the function code. Click Done and Next . Select Python 3.7 or your preferred version in the Runtime field. Select Inline Editor in the Source code field. Enter query_astra_db in the Entry point field. Add cassandra-driver , a Python client library for Apache Cassandra, DataStax Astra DB and DataStax Enterprise, to the requirements.txt file. Replace the main.py content with: from cassandra.cluster import Cluster from cassandra.auth import PlainTextAuthProvider import os from shutil import copyfile def query_astra_db ( request ): # Copy the secure connect bundle file to the writable part of the file system /tmp copyfile ( '/secrets/secure-connect-secret' , '/tmp/secure-connect-for-my-database.zip' ) ASTRA_DB_CLIENT_ID = os . environ . get ( 'ASTRA_DB_CLIENT_ID' ) ASTRA_DB_CLIENT_SECRET = os . environ . get ( 'ASTRA_DB_CLIENT_SECRET' ) cloud_config = { 'secure_connect_bundle' : '/tmp/secure-connect-for-my-database.zip' } auth_provider = PlainTextAuthProvider ( ASTRA_DB_CLIENT_ID , ASTRA_DB_CLIENT_SECRET ) cluster = Cluster ( cloud = cloud_config , auth_provider = auth_provider , protocol_version = 4 ) session = cluster . connect () row = session . execute ( \"SELECT cql_version FROM system.local WHERE key = 'local';\" ) . one () print ( row [ 0 ]) print ( 'Success' ) You can learn more about the code above by reading the cassandra-driver documentation.","title":"\u2705 Step 2: Create a function."},{"location":"img/google-cloud-functions-python-driver/#step-3-deploy-the-function","text":"Click Deploy . On the Cloud Functions Overview page, find the newly deployed function.","title":"\u2705 Step 3: Deploy the function."},{"location":"img/google-cloud-functions-python-driver/#step-4-test-the-function","text":"Under Actions , select Test function . On the testing page, click Test the function and observe the output. Notice the CQL version output 3.4.5 and status code 200 .","title":"\u2705 Step 4: Test the function."},{"location":"img/google-cloud-functions-python-driver/#step-5-view-logs","text":"You can further explore the log history by either clicking on the Logs tab or the View all logs link that opens Logs Explorer .","title":"\u2705 Step 5: View logs."},{"location":"img/google-cloud-functions-python-sdk/","text":"Connecting to Astra DB from a Google Cloud Function using Python SDK and Cloud Console \u00b6 Overview \u00b6 Cloud Functions is Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to: - Extend Astra DB with additional data processing capabilities, such as aggregating, summarizing and validating data periodically; - Connect Astra DB with other cloud services into data pipelines that move, process and analyze data. Prerequisites \u00b6 Create an Astra Database Create an Astra Token Optionally, if you are new to Cloud Functions, practice creating a simpler function first Creating a Google Cloud Function to Access Astra DB using Python SDK and Cloud Console \u00b6 \u2705 Step 1: Create a function. \u00b6 Go to the Functions Overview page , select a project that has Cloud Functions enabled, and click Create function . Under the Basics section, specify preferred Function name and Region . Under the Trigger section, select HTTP , Allow unauthenticated invocations , and Require HTTPS . Click Save . Under the Runtime, build, connections and security settings section, customize additional settings and create these Runtime environment variables : ASTRA_DB_ID : A Database ID value can be found on the Astra DB dashboard. ASTRA_DB_REGION : A Region name can be found on the overview page for a specific Astra DB database. ASTRA_DB_APPLICATION_TOKEN : An Application Token can be generated for a specific Astra DB database (see the Prerequisites section above). Note that, for better security, you can alternatively use the Secret Manager service to store and manage an application token as a secret. A secret can then be similarly exposed as an environment variable. The settings can be found under the Runtime, build, connections and security settings section, the Security tab, and the Secrets field. Click Next . Select Python 3.7 or your preferred version in the Runtime field. Select Inline Editor in the Source code field. Enter query_astra_db in the Entry point field. Add AstraPy , a Pythonic SDK for DataStax Astra and Stargate, and its preferred version to the requirements.txt file. Replace the main.py content with: from astrapy.rest import create_client , http_methods import os def query_astra_db ( request ): ASTRA_DB_ID = os . environ . get ( 'ASTRA_DB_ID' ) ASTRA_DB_REGION = os . environ . get ( 'ASTRA_DB_REGION' ) ASTRA_DB_APPLICATION_TOKEN = os . environ . get ( 'ASTRA_DB_APPLICATION_TOKEN' ) astra_http_client = create_client ( astra_database_id = ASTRA_DB_ID , astra_database_region = ASTRA_DB_REGION , astra_application_token = ASTRA_DB_APPLICATION_TOKEN ) # Retrieve a row with primary key value 'local' # from table 'local' in keyspace 'system' res = astra_http_client . request ( method = http_methods . GET , path = f \"/api/rest/v2/keyspaces/system/local/local\" ) # Print the 'cql_version' field value of the row print ( res [ \"data\" ][ 0 ][ 'cql_version' ]) print ( 'Success' ) You can learn more about the code above by reading the AstraPy documentation. \u2705 Step 2: Deploy the function. \u00b6 Click Deploy . On the Cloud Functions Overview page, find the newly deployed function. \u2705 Step 3: Test the function. \u00b6 Under Actions , select Test function . On the testing page, click Test the function and observe the output. Notice the CQL version output 3.4.5 and status code 200 . \u2705 Step 4: View logs. \u00b6 You can further explore the log history by either clicking on the Logs tab or the View all logs link that opens Logs Explorer .","title":"Connecting to Astra DB from a Google Cloud Function using Python SDK and Cloud Console"},{"location":"img/google-cloud-functions-python-sdk/#connecting-to-astra-db-from-a-google-cloud-function-using-python-sdk-and-cloud-console","text":"","title":"Connecting to Astra DB from a Google Cloud Function using Python SDK and Cloud Console"},{"location":"img/google-cloud-functions-python-sdk/#overview","text":"Cloud Functions is Google's function-as-a-service offering that provides a serverless execution environment for your code. Cloud Functions are commonly used to: - Extend Astra DB with additional data processing capabilities, such as aggregating, summarizing and validating data periodically; - Connect Astra DB with other cloud services into data pipelines that move, process and analyze data.","title":"Overview"},{"location":"img/google-cloud-functions-python-sdk/#prerequisites","text":"Create an Astra Database Create an Astra Token Optionally, if you are new to Cloud Functions, practice creating a simpler function first","title":"Prerequisites"},{"location":"img/google-cloud-functions-python-sdk/#creating-a-google-cloud-function-to-access-astra-db-using-python-sdk-and-cloud-console","text":"","title":"Creating a Google Cloud Function to Access Astra DB using Python SDK and Cloud Console"},{"location":"img/google-cloud-functions-python-sdk/#step-1-create-a-function","text":"Go to the Functions Overview page , select a project that has Cloud Functions enabled, and click Create function . Under the Basics section, specify preferred Function name and Region . Under the Trigger section, select HTTP , Allow unauthenticated invocations , and Require HTTPS . Click Save . Under the Runtime, build, connections and security settings section, customize additional settings and create these Runtime environment variables : ASTRA_DB_ID : A Database ID value can be found on the Astra DB dashboard. ASTRA_DB_REGION : A Region name can be found on the overview page for a specific Astra DB database. ASTRA_DB_APPLICATION_TOKEN : An Application Token can be generated for a specific Astra DB database (see the Prerequisites section above). Note that, for better security, you can alternatively use the Secret Manager service to store and manage an application token as a secret. A secret can then be similarly exposed as an environment variable. The settings can be found under the Runtime, build, connections and security settings section, the Security tab, and the Secrets field. Click Next . Select Python 3.7 or your preferred version in the Runtime field. Select Inline Editor in the Source code field. Enter query_astra_db in the Entry point field. Add AstraPy , a Pythonic SDK for DataStax Astra and Stargate, and its preferred version to the requirements.txt file. Replace the main.py content with: from astrapy.rest import create_client , http_methods import os def query_astra_db ( request ): ASTRA_DB_ID = os . environ . get ( 'ASTRA_DB_ID' ) ASTRA_DB_REGION = os . environ . get ( 'ASTRA_DB_REGION' ) ASTRA_DB_APPLICATION_TOKEN = os . environ . get ( 'ASTRA_DB_APPLICATION_TOKEN' ) astra_http_client = create_client ( astra_database_id = ASTRA_DB_ID , astra_database_region = ASTRA_DB_REGION , astra_application_token = ASTRA_DB_APPLICATION_TOKEN ) # Retrieve a row with primary key value 'local' # from table 'local' in keyspace 'system' res = astra_http_client . request ( method = http_methods . GET , path = f \"/api/rest/v2/keyspaces/system/local/local\" ) # Print the 'cql_version' field value of the row print ( res [ \"data\" ][ 0 ][ 'cql_version' ]) print ( 'Success' ) You can learn more about the code above by reading the AstraPy documentation.","title":"\u2705 Step 1: Create a function."},{"location":"img/google-cloud-functions-python-sdk/#step-2-deploy-the-function","text":"Click Deploy . On the Cloud Functions Overview page, find the newly deployed function.","title":"\u2705 Step 2: Deploy the function."},{"location":"img/google-cloud-functions-python-sdk/#step-3-test-the-function","text":"Under Actions , select Test function . On the testing page, click Test the function and observe the output. Notice the CQL version output 3.4.5 and status code 200 .","title":"\u2705 Step 3: Test the function."},{"location":"img/google-cloud-functions-python-sdk/#step-4-view-logs","text":"You can further explore the log history by either clicking on the Logs tab or the View all logs link that opens Logs Explorer .","title":"\u2705 Step 4: View logs."}]}